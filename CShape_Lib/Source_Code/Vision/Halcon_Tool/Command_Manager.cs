using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using EFC.INI;
using EFC.Tool;
using HalconDotNet;


namespace EFC.Vision.Halcon
{
    //-----------------------------------------------------------------------------------------
    //-- TCommand_Manager
    //-----------------------------------------------------------------------------------------
    public class Command_Manager
    {
        private TCommand_Define[] Commands = new TCommand_Define[0];

        public int Commands_Count
        {
            get
            {
                return Commands.Length;
            }
            set
            {
                int old_count = Commands.Length;
                Array.Resize(ref Commands, value);
                for (int i = old_count; i < value; i++)
                    Commands[i] = new TCommand_Define();
            }
        }
        public Command_Manager()
        {
        }
        public bool Execute(TCommand_Define cmd, ref TTool_Values tool_values)
        {
            bool result = true;
            string program_str;

            for (int i = 0; i < cmd.Programs_List.Count; i++)
            {
                program_str = cmd.Programs_List[i].ToString();
                if (!Halcon_Tool.Is_Comment(program_str))
                {
                    result = Execute(program_str, ref tool_values, cmd);
                    if (!result) break;
                }
            }
            return result;
        }
        public bool Execute(string program_list, ref TTool_Values tool_values, TCommand_Define user_cmd)
        {
            bool result = true;
            string[] command_list = null;
            TCommand_Define default_cmd = null;

            if (!Halcon_Tool.Is_Comment(program_list))
            {
                Halcon_Tool.Break_String(program_list, ref command_list);
                default_cmd = Get_Command(program_list);
                if (default_cmd != null)
                {
                    if (!default_cmd.User_Define)
                    {
                        if (default_cmd.Execute != null) default_cmd.Execute(command_list, ref tool_values);
                    }
                    else
                    {
                        TCommand_Define sub_cmd = null;

                        sub_cmd = user_cmd.Get_User_Cmd_List(default_cmd.Name);
                        if (sub_cmd != null)
                        {
                            sub_cmd.Set_Data(command_list);
                            TTool_Values tmp_tool_values = new TTool_Values();
                            tmp_tool_values.Add_Value(sub_cmd.In);
                            tmp_tool_values.Add_Value(sub_cmd.Out);
                            tmp_tool_values.Set_Value_In(sub_cmd.In, tool_values);

                            Command_Manager tmp_manager = new Command_Manager();
                            tmp_manager.Register_All_Command();
                            tmp_manager.Register_User_Command(sub_cmd.User_Cmd_List);

                            result = tmp_manager.Execute(sub_cmd, ref tmp_tool_values);
                            tool_values.Add_Value_Out(sub_cmd.Out);
                            tool_values.Set_Value_Out(sub_cmd.Out, tmp_tool_values);
                        }
                    }
                }
            }
            return result;
        }
        public void Register_All_Command()
        {
            Register_Halcon_Command();
            Register_Other_Command();
        }
        public void Register_Halcon_Command()
        {
            #region A
            Register_Command(Def_Abs_DiffImage());
            Register_Command(Def_Abs_Image());
            Register_Command(Def_Access_Channel());
            Register_Command(Def_Acos_Image());
            // Adapt_Template
            Register_Command(Def_Add_Channels());
            Register_Command(Def_Add_Image());
            // Add_Noise_Distribution
            Register_Command(Def_Add_Noise_White());
            Register_Command(Def_Add_Noise_White_Contour_Xld());


            // Add_SampleIdentifier_Preparation_Data
            // Add_SampleIdentifier_Training_Data
            // Add_Samples_Image_Class_Gmm
            // Add_Samples_Image_Class_Knn
            // Add_Samples_Image_Class_Mlp
            // Add_Samples_Image_Class_Svm     
            // Adjust_Mosaic_Images
            Register_Command(Def_Affine_Trans_Contour_Xld());
            Register_Command(Def_Affine_Trans_Image());
            Register_Command(Def_Affine_Trans_Image_Size());
            Register_Command(Def_Affine_Trans_Region());
            // Anisotrope_Diff,停用,使用 anisotropic_diffusion
            Register_Command(Def_Anisotropic_Diffusion());
            Register_Command(Def_Append_Channel());
            // Append_Ocr_Trainf
            // Apply_Color_Trans_Lut
            // Apply_Sample_Identifier
            // Apply_Sheet_Of_Light_Calibration
            Register_Command(Def_Area_Center());
            Register_Command(Def_Area_Center_Gray());
            Register_Command(Def_Area_Holes());
            Register_Command(Def_Asin_Image());
            Register_Command(Def_Atan_Image());
            Register_Command(Def_Atan2_Image());
            Register_Command(Def_Auto_Threshold());
            #endregion

            #region B
            Register_Command(Def_Background_Seg());
            Register_Command(Def_Bandpass_Image());
            // Best_Match
            // Best_Match_Mg
            // Best_Match_Pre_Mg
            // Best_Match_Rot
            // Best_Match_Rot_Mg
            // Binocular_Disparity
            // Binocular_Disparity_Mg
            // Binocular_Distance
            // Binocular_Distance_Mg
            Register_Command(Def_Binomial_Filter());
            Register_Command(Def_Bin_Threshold());
            Register_Command(Def_Bit_And());
            Register_Command(Def_Bit_L_shift());
            Register_Command(Def_Bit_Mask());
            Register_Command(Def_Bit_Not());
            Register_Command(Def_Bit_Or());
            Register_Command(Def_Bit_R_shift());
            Register_Command(Def_Bit_Slice());
            Register_Command(Def_Bit_Xor());
            Register_Command(Def_Bottom_Hat());
            Register_Command(Def_Boundary());
            #endregion

            #region C
            Register_Command(Def_Cfa_To_Rgb());
            Register_Command(Def_Change_Domain());
            Register_Command(Def_Change_Format());
            // Change_Radial_Distortion_Image
            // Change_Radial_Distortion_Points
            Register_Command(Def_Channels_To_Image());
            Register_Command(Def_Char_Threshold());
            Register_Command(Def_Check_Difference());
            Register_Command(Def_Circularity());
            // Class2dim_Sup
            // Class2dim_Unsup
            // Classify_Image_Class_Gmm
            // Classify_Image_Class_Knn
            // Classify_Image_Class_Lut
            // Classify_Image_Class_Mlp
            // Classify_Image_Class_Svm
            // Class_Ndim_Box
            // Class_Ndim_Norm
            // Clear_Color_Trans_Lut
            // Cluster_Model_Components
           
            Register_Command(Def_Change_Radial_Distortion_Contours_Xld());
            Register_Command(Def_Clip_Contours_Xld());
            Register_Command(Def_Clip_End_Points_Contours_Xld());
            Register_Command(Def_Clip_Region());
            Register_Command(Def_Clip_Region_Rel());

            Register_Command(Def_Close_Contours_Xld());
            Register_Command(Def_Close_Edges());
            Register_Command(Def_Close_Edges_Length());
            Register_Command(Def_Closest_Point_Transform());
            Register_Command(Def_Closing());
            Register_Command(Def_Closing_Circle());
            Register_Command(Def_Closing_Golay());
            Register_Command(Def_Closing_Rectangle1());
            // Coherence_Enhancing_Diff
            Register_Command(Def_Compactness());
            // Compare_Ext_Variation_Model
            // Compare_Variation_Model
            // Contour_To_World_Plane_Xld
            Register_Command(Def_Complement());
            Register_Command(Def_Complex_To_Real());
            Register_Command(Def_Compose2());
            Register_Command(Def_Compose3());
            Register_Command(Def_Compose4());
            Register_Command(Def_Compose5());
            Register_Command(Def_Compose6());
            Register_Command(Def_Compose7());

            Register_Command(Def_Concat_Obj_Image());
            Register_Command(Def_Concat_Obj_Region());
            Register_Command(Def_Concat_Obj_Xld());

            
            Register_Command(Def_Connect_And_Holes());
            Register_Command(Def_Connection());
            Register_Command(Def_Contlength());
            Register_Command(Def_Contour_Point_Num_Xld());

            // Connect_Grid_Points
            Register_Command(Def_Convert_Image_Type());
            // Convert_Map_Type
            Register_Command(Def_Convexity());
            Register_Command(Def_Convol_Fft());
            Register_Command(Def_Convol_Gabor());
            Register_Command(Def_Convol_Image());
            Register_Command(Def_Cooc_Feature_Image());
            Register_Command(Def_Cooc_Feature_Matrix());
            Register_Command(Def_Corner_Response());
            Register_Command(Def_Correlation_Fft());
            Register_Command(Def_Cos_Image());
            Register_Command(Def_Count_Channels());
            Register_Command(Def_Create_Aniso_Shape_Model());
            Register_Command(Def_Create_Aniso_Shape_Model_Xld());
            // Create_Bg_Esti
            // Create_Calib_Descriptor_Model
            // Create_Color_Trans_Lut
            // Create_Component_Model
            // Create_Local_Deformable_Model
            // Create_Ncc_Model
            // Create_Planar_Calib_Deformable_Model
            // Create_Planar_Uncalib_Deformable_Model
            // CreateLocalDeformableModelXld
            // CreatePlanarCalibDeformableModelXld
            // CreatePlanarUncalibDeformableModelXld


            Register_Command(Def_Create_Scaled_Shape_Model());
            Register_Command(Def_Create_Scaled_Shape_Model_Xld());            
            Register_Command(Def_Create_Shape_Model());
            Register_Command(Def_Create_Shape_Model_Xld());
            
            // Create_Sheet_Of_Light_Model
            // Create_Template
            // Create_Template_Rot
            // Create_Uncalib_Descriptor_Model
            // Critical_Points_Sub_Pix

            Register_Command(Def_Crop_Contours_Xld());
            Register_Command(Def_Crop_Domain());
            Register_Command(Def_Crop_Domain_Rel());
            Register_Command(Def_Crop_Part());
            Register_Command(Def_Crop_Rectangle1());
            #endregion

            #region D
            // Decode_Bar_Code_Rectangle2
            Register_Command(Def_Decompose2());
            Register_Command(Def_Decompose3());
            Register_Command(Def_Decompose4());
            Register_Command(Def_Decompose5());
            Register_Command(Def_Decompose6());
            Register_Command(Def_Decompose7());
            Register_Command(Def_Depth_From_Focus());
            Register_Command(Def_Derivate_Gauss());
            Register_Command(Def_Derivate_Vector_Field());
            // Deserialize
            // Deserialize_Image
            // Deserialize_Region
            // Detect_Edge_Segments
            // Determine_Deformable_Model_Params
            // Determine_Shape_Model_Params
            Register_Command(Def_Deviation_Image());
            Register_Command(Def_Deviation_N()); 
            Register_Command(Def_Diameter_Region());
            Register_Command(Def_Difference());
            Register_Command(Def_Difference_Closed_Contours_Xld());

            Register_Command(Def_Diff_Of_Gauss());
            Register_Command(Def_Dilation1());
            Register_Command(Def_Dilation2());
            Register_Command(Def_Dilation_Circle());
            Register_Command(Def_Dilation_Golay());
            Register_Command(Def_Dilation_Rectangle1());
            Register_Command(Def_Dilation_Seq());

            //DistanceCc
            //DistanceCcMin
            //DistanceLc
            //DistancePc
            //DistanceSc    
            //DistEllipseContourPointsXld
            //DistEllipseContourXld
            //DistRectangle2ContourPointsXld
            //DrawNurbs
            //DrawNurbsInterp
            //DrawNurbsInterpMod
            //DrawNurbsMod
            //DrawXld
            //DrawXldMod

            Register_Command(Def_Distance_Lr());
            Register_Command(Def_Distance_Pr());
            Register_Command(Def_Distance_Rr_Min());
            Register_Command(Def_Distance_Rr_Min_Dil());
            Register_Command(Def_Distance_Sr());
            Register_Command(Def_Distance_Transform());
            Register_Command(Def_Div_Image());
            // Do_Ocv_Simple
            Register_Command(Def_Dots_Image());
            Register_Command(Def_Dual_Rank());
            Register_Command(Def_Dual_Threshold());
            Register_Command(Def_Dyn_Threshold());
            // Do_Ocr_Multi
            // Do_Ocr_Multi_Class_Knn
            // Do_Ocr_Multi_Class_Mlp
            // Do_Ocr_Multi_Class_Svm
            // Do_Ocr_Single
            // Do_Ocr_Single_Class_Knn
            // Do_Ocr_Single_Class_Mlp
            // Do_Ocr_Single_Class_Svm
            // Do_Ocr_Word_Knn
            // Do_Ocr_Word_Mlp
            // Do_Ocr_Word_Svm
            // Drag_Region1
            // Drag_Region2
            // Drag_Region3
            // Draw_Polygon
            // Draw_Region
            #endregion

            #region E
            Register_Command(Def_Eccentricity());
            Register_Command(Def_Edges_Color());
            Register_Command(Def_Edges_Color_Sub_Pix());
            Register_Command(Def_Eliminate_Min_Max());
            Register_Command(Def_Eliminate_Sp());
            Register_Command(Def_Eliminate_Runs());
            Register_Command(Def_Elliptic_Axis());
            Register_Command(Def_Elliptic_Axis_Gray());
            Register_Command(Def_Emphasize());
            Register_Command(Def_Energy_Gabor());
            Register_Command(Def_Entropy_Gray());
            Register_Command(Def_Entropy_Image());
            Register_Command(Def_Equ_Histo_Image());
            Register_Command(Def_Erosion1());
            Register_Command(Def_Erosion2());
            Register_Command(Def_Erosion_Circle());
            Register_Command(Def_Erosion_Golay());
            Register_Command(Def_Erosion_Rectangle1());
            Register_Command(Def_Erosion_Seq());
            Register_Command(Def_Estimate_Al_Am());
            Register_Command(Def_Estimate_Noise());
            Register_Command(Def_Estimate_Sl_Al_Lr());
            Register_Command(Def_Estimate_Sl_Al_Zc());
            Register_Command(Def_Estimate_Tilt_Lr());
            Register_Command(Def_Estimate_Tilt_Zc()); 
            Register_Command(Def_Euler_Number());
            Register_Command(Def_Exhaustive_Match());
            Register_Command(Def_Exhaustive_Match_Mg());
            Register_Command(Def_Exp_Image());
            Register_Command(Def_Expand_Domain_Gray());
            Register_Command(Def_Expand_Gray());
            Register_Command(Def_Expand_Gray_Ref());
            Register_Command(Def_Expand_Line());
            Register_Command(Def_Expand_Region());
            #endregion

            #region F
            // Fast_Match
            // Fast_Match_Mg
            Register_Command(Def_Fast_Threshold());
            Register_Command(Def_Fft_Generic());
            Register_Command(Def_Fft_Image());
            Register_Command(Def_Fft_Image_Inv());
            Register_Command(Def_Fill_Interlace());
            Register_Command(Def_Fill_Up());
            Register_Command(Def_Fill_Up_Shape());
           
            // Find_1d_BarCode
            // Find_1d_BarCode_Region
            // Find_1d_BarCode_Scanline
            // Find_2d_BarCode
            // Find_Aniso_Shape_Model
            // Find_Aniso_Shape_Models
            // Find_BarCode
            // Find_Calib_Descriptor_Model
            Register_Command(Def_Find_Caltab());
            // Find_Component_Model
            // Find_Data_Code_2d
            // Find_Local_Deformable_Model
            // Find_Marks_And_Pose
            // Find_Ncc_Model
            Register_Command(Def_Find_Neighbors());
            // Find_Planar_Calib_Deformable_Model
            // Find_Planar_Uncalib_Deformable_Model
            // Find_Rectification_Grid
            Register_Command(Def_Find_Scaled_Shape_Model());
            Register_Command(Def_Find_Scaled_Shape_Models());
            // Find_Shape_Model_3d
            Register_Command(Def_Find_Shape_Model());
            Register_Command(Def_Find_Shape_Models());
            // Find_Text
            // Find_Uncalib_Descriptor_Model
            Register_Command(Def_Fit_Circle_Contour_Xld());
            Register_Command(Def_Fit_Ellipse_Contour_Xld());
            Register_Command(Def_Fit_Line_Contour_Xld());
            Register_Command(Def_Fit_Rectangle2_Contour_Xld());
            Register_Command(Def_Fit_Surface_First_Order());
            Register_Command(Def_Fit_Surface_Second_Order());

            Register_Command(Def_Fitting());
            Register_Command(Def_Frei_Amp());
            Register_Command(Def_Frei_Dir());
            Register_Command(Def_Full_Domain());
            Register_Command(Def_Fuzzy_Entropy());
            Register_Command(Def_Fuzzy_Measure_Pairing());
            Register_Command(Def_Fuzzy_Measure_Pairs());
            Register_Command(Def_Fuzzy_Perimeter());
            #endregion

            #region G
            Register_Command(Def_Gamma_Image());
            Register_Command(Def_Gauss_Image());
            Register_Command(Def_Gen_Bandfilter());
            Register_Command(Def_Gen_Bandpass());
            // Gen_Binocular_Proj_Rectification
            // Gen_Binocular_Rectification_Map
            // Gen_Bundle_Adjusted_Mosaic
            Register_Command(Def_Gen_Checker_Region());
            Register_Command(Def_Gen_Circle());
            Register_Command(Def_Gen_Circle_Contour_Xld());
            Register_Command(Def_Gen_Contour_Nurbs_Xld());
            Register_Command(Def_Gen_Contour_Polygon_Rounded_Xld());
            Register_Command(Def_Gen_Contour_Polygon_Xld());
            Register_Command(Def_Gen_Cross_Contour_Xld());
            Register_Command(Def_Gen_Contour_Region_Xld());
            Register_Command(Def_Gen_Contours_Skeleton_Xld());
            // Gen_Cooc_Matrix
            // Gen_Cube_Map_Mosaic
            Register_Command(Def_Gen_Derivative_Filter());
            Register_Command(Def_Gen_Disc_Se());
            Register_Command(Def_Gen_Ellipse());
            Register_Command(Def_Gen_Ellipse_Contour_Xld());
            Register_Command(Def_Gen_Empty_Region());
            Register_Command(Def_Gen_Filter_Mask());
            Register_Command(Def_Gen_Gabor());
            Register_Command(Def_Gen_Gauss_Filter());
            Register_Command(Def_Gen_Gauss_Pyramid());
            Register_Command(Def_Gen_Grid_Rectification_Map());
            Register_Command(Def_Gen_Grid_Region());
            Register_Command(Def_Gen_Highpass());


            // Gen_Image1
            // Gen_Image1_Extern
            // Gen_Image1_Rect
            // Gen_Image3
            // Gen_Image3_Extern
            Register_Command(Def_Gen_Image_Const());
            Register_Command(Def_Gen_Image_Gray_Ramp());
            // Gen_Image_Interleaved
            Register_Command(Def_Gen_Image_Proto());
            // Gen_Image_Surface_First_Order
            // Gen_Image_Surface_Second_Order
            // Gen_Image_To_World_Plane_Map
            // Gen_Initial_Components
            Register_Command(Def_Gen_Lowpass());
            // Gen_Mean_Filter
            // Gen_Principal_Comp_Trans
            // Gen_Projective_Mosaic
            // Gen_Psf_Defocus
            // Gen_Psf_Motion
            // Gen_Radial_Distortion_Map
            Register_Command(Def_Gen_Parallel_Contour_Xld());
            // Gen_Polygons_Xld
            Register_Command(Def_Gen_Sin_Bandpass());
            // Gen_Spherical_Mosaic
            Register_Command(Def_Gen_Std_Bandpass());
            Register_Command(Def_Gen_Random_Region());
            Register_Command(Def_Gen_Random_Regions());
            Register_Command(Def_Gen_Rectangle1());
            Register_Command(Def_Gen_Rectangle2());
            Register_Command(Def_Gen_Rectangle2_Contour_Xld());
            Register_Command(Def_Gen_Region_Contour_Xld());
            Register_Command(Def_Gen_Region_Histo());
            Register_Command(Def_Gen_Region_Hline());
            Register_Command(Def_Gen_Region_Line());
            Register_Command(Def_Gen_Region_Points());
            Register_Command(Def_Gen_Region_Polygon());
            Register_Command(Def_Gen_Region_Polygon_Filled());
            Register_Command(Def_Gen_Region_Runs());
            Register_Command(Def_Gen_Struct_Elements());
            // Get_1d_Bar_Code
            // Get_1d_Bar_Code
            // Get_1d_Bar_Code_Scanline
            // Get_2d_Bar_Code
            // Get_2d_Bar_Code_Pos
            Register_Command(Def_Get_Contour_Angle_Xld());
            Register_Command(Def_Get_Contour_Attrib_Xld());
            Register_Command(Def_Get_Contour_Global_Attrib_Xld());
            Register_Command(Def_Get_Contour_Xld());
            Register_Command(Def_Get_Domain());
            // Get_Features_Ocr_Class_Knn
            // Get_Features_Ocr_Class_Mlp
            // Get_Features_Ocr_Class_Svm  

            Register_Command(Def_Get_Grayval());
            Register_Command(Def_Get_Grayval_Contour_Xld());
            Register_Command(Def_Get_Grayval_Interpolated());
            // Get_Icon
            Register_Command(Def_Get_Image_Pointer1());
            // Get_Image_Pointer1_Rect
            // Get_Image_Pointer3
            Register_Command(Def_Get_Image_Size());
            // Get_Image_Time
            Register_Command(Def_Get_Image_Type());
            // Get_SheetOfLightResult
            Register_Command(Def_Get_Region_Chain());
            Register_Command(Def_Get_Region_Contour());
            Register_Command(Def_Get_Region_Convex());
            Register_Command(Def_Get_Region_Index());
            Register_Command(Def_Get_Region_Points());
            Register_Command(Def_Get_Region_Polygon());
            Register_Command(Def_Get_Region_Runs());
            Register_Command(Def_Get_Region_Thickness());
            Register_Command(Def_Get_Regress_Params_Xld());

            Register_Command(Def_Get_Shape_Model_Contours());
            Register_Command(Def_Get_Shape_Model_Origin());
            Register_Command(Def_Get_Shape_Model_Params());
            
            // Give_Bg_Esti
            // Gnuplot_Plot_Image
            Register_Command(Def_Golay_Elements());
            // Grab_Data
            // Grab_Data_Async
            // Grab_Image
            // Grab_Image_Async
            Register_Command(Def_Gray_Bothat());
            Register_Command(Def_Gray_Closing());
            Register_Command(Def_Gray_Closing_Rect());
            Register_Command(Def_Gray_Closing_Shape());
            Register_Command(Def_Gray_Dilation());
            Register_Command(Def_Gray_Dilation_Rect());
            Register_Command(Def_Gray_Dilation_Shape());
            Register_Command(Def_Gray_Erosion());
            Register_Command(Def_Gray_Erosion_Rect());
            Register_Command(Def_Gray_Erosion_Shape());
            Register_Command(Def_Gray_Features());
            Register_Command(Def_Gray_Histo());
            Register_Command(Def_Gray_Histo_Abs());
            Register_Command(Def_Gray_Histo_Range());
            Register_Command(Def_Gray_Inside());
            Register_Command(Def_Gray_Opening());
            Register_Command(Def_Gray_Opening_Rect());
            Register_Command(Def_Gray_Opening_Shape());
            Register_Command(Def_Gray_Projections());
            Register_Command(Def_Gray_Range_Rect());
            Register_Command(Def_Gray_Skeleton());
            Register_Command(Def_Gray_Tophat());
            #endregion

            #region H
            Register_Command(Def_Hamming_Change_Region());
            Register_Command(Def_Hamming_Distance());
            Register_Command(Def_Hamming_Distance_Norm());
            Register_Command(Def_Harmonic_Interpolation());
            Register_Command(Def_Highpass_Image());
            Register_Command(Def_Histo_2dim());
            Register_Command(Def_Hit_Or_Miss());
            Register_Command(Def_Hit_Or_Miss_Golay());
            Register_Command(Def_Hit_Or_Miss_Seq());
            Register_Command(Def_Hough_Circles());
            Register_Command(Def_Hough_Circle_Trans());
            Register_Command(Def_Hough_Lines());
            Register_Command(Def_Hough_Lines_Dir());
            Register_Command(Def_Hough_Line_Trans());
            Register_Command(Def_Hough_Line_Trans_Dir());
            Register_Command(Def_Hysteresis_Threshold());
            #endregion

            #region I
            Register_Command(Def_Illuminate());
            Register_Command(Def_Image_To_Channels());
            // Image_To_World_Plane
            Register_Command(Def_Inner_Circle());
            Register_Command(Def_Inner_Rectangle1());
            // Inpainting_Aniso
            // Inpainting_Ced
            // Inpainting_Ct
            // Inpainting_Mcf
            // Inpainting_Texture
            // Inspect_Shape_Model
            Register_Command(Def_Intensity());
            Register_Command(Def_Interjacent());
            Register_Command(Def_Intersection());
            Register_Command(Def_Intersection_Closed_Contours_Xld());
            Register_Command(Def_Invert_Image());
            Register_Command(Def_Isotropic_Diffusion());
            #endregion

            #region J
            Register_Command(Def_Junctions_Skeleton());
            #endregion

            #region K
            Register_Command(Def_Kirsch_Amp());
            Register_Command(Def_Kirsch_Dir());
            #endregion

            #region L
            Register_Command(Def_Label_To_Region());
            Register_Command(Def_Laplace());
            Register_Command(Def_Laplace_Of_Gauss());
            // Learn_Ndim_Box
            // Learn_Ndim_Norm
            Register_Command(Def_Linear_Trans_Color());
            Register_Command(Def_Lines_Color());
            Register_Command(Def_Lines_Facet());
            Register_Command(Def_Lines_Gauss());
            Register_Command(Def_Local_Max());
            // Local_Max_Contours_Xld
            Register_Command(Def_Local_Max_Sub_Pix());

            Register_Command(Def_Local_Min());
            Register_Command(Def_Local_Min_Sub_Pix());
            Register_Command(Def_Log_Image());
            Register_Command(Def_Lowlands());
            Register_Command(Def_Lowlands_Center());
            Register_Command(Def_Lut_Trans());




            #endregion

            #region M
            Register_Command(Def_Map_Image());
            // Match_Essential_Matrix_Ransac
            // Match_Fundamental_Matrix_Distortion_Ransac
            // Match_Fundamental_Matrix_Ransac
            // Match_Rel_Pose_Ransac
            Register_Command(Def_Max_Image());
            Register_Command(Def_Mean_Curvature_Flow());
            Register_Command(Def_Mean_Image());
            Register_Command(Def_Mean_N());
            Register_Command(Def_Mean_Sp());
            Register_Command(Def_Measure_Pairs());
            Register_Command(Def_Measure_Pos());
            // Measure_Profile_Sheet_Of_Light
            // Measure_Projection
            // Measure_Thresh
            Register_Command(Def_Median_Image());
            Register_Command(Def_Median_Rect());
            Register_Command(Def_Median_Separate());
            Register_Command(Def_Median_Weighted());
            // Merge_Cont_Line_Scan_Xld
            // Merge_Regions_Line_Scan
            // Minkowski_Add1
            // Minkowski_Add2
            // Minkowski_Sub1
            // Minkowski_Sub2
            Register_Command(Def_Midrange_Image());
            Register_Command(Def_Min_Image());
            Register_Command(Def_Min_Max_Gray());
            Register_Command(Def_Mirror_Image());
            Register_Command(Def_Mirror_Region());
            Register_Command(Def_Moments_Gray_Plane());
            // Moments_Gray_Plane
            // Moments_Region_2nd
            // Moments_Region_2nd_Invar
            // Moments_Region_2nd_Rel_Invar
            // Moments_Region_3rd
            // Moments_Region_3rd_Invar
            // Moments_Region_Central
            // Moments_Region_Central_Invar
            Register_Command(Def_Monotony());
            Register_Command(Def_Morph_Hat());
            Register_Command(Def_Morph_Skeleton());
            Register_Command(Def_Morph_Skiz());
            Register_Command(Def_Move_Region());
            Register_Command(Def_Mult_Image());
            #endregion

            #region N
            Register_Command(Def_Noise_Distribution_Mean());
            Register_Command(Def_Nonmax_Suppression_Amp());
            Register_Command(Def_Nonmax_Suppression_Dir());
            #endregion
            
            #region O
            Register_Command(Def_Obj_Diff_Image());
            Register_Command(Def_Obj_Diff_Region());
            Register_Command(Def_Obj_Diff_XLD());
            // Ocr_Get_Features
            Register_Command(Def_Opening());
            Register_Command(Def_Opening_Circle());
            Register_Command(Def_Opening_Golay());
            Register_Command(Def_Opening_Rectangle1());
            Register_Command(Def_Opening_Seg());
            // Optical_Flow_Mg
            // Overpaint_Gray, 禁用，改用 PaintGray
            // Overpaint_Region  禁用，改用 PaintRegion   
            Register_Command(Def_Orientation_Region());
            #endregion

            #region P
            Register_Command(Def_Paint_Gray());
            Register_Command(Def_Paint_Region());
            Register_Command(Def_Paint_Xld());
            Register_Command(Def_Partition_Dynamic());
            Register_Command(Def_Partition_Rectangle());
            Register_Command(Def_Phase_Deg());
            Register_Command(Def_Phase_Rad());
            // Phot_Stereo,舊指令,使用, Photometric_Stereo
            Register_Command(Def_Photometric_Stereo());
            Register_Command(Def_Plane_Deviation());
            Register_Command(Def_Plateaus());
            Register_Command(Def_Plateaus_Center());
            Register_Command(Def_Points_Foerstner());
            Register_Command(Def_Points_Harris());
            Register_Command(Def_Points_Harris_Binomial());
            Register_Command(Def_Points_Lepetit());
            Register_Command(Def_Points_Sojka());
            // Polar_Trans_Image,舊指令. 使用Polar_Trans_Image_Ext
            Register_Command(Def_Polar_Trans_Contour_Xld());
            Register_Command(Def_Polar_Trans_Contour_Xld_Inv());
            Register_Command(Def_Polar_Trans_Image_Ext());
            Register_Command(Def_Polar_Trans_Image_Inv());
            Register_Command(Def_Polar_Trans_Region());
            Register_Command(Def_Polar_Trans_Region_Inv());

            Register_Command(Def_Pouring());
            Register_Command(Def_Power_Byte());
            Register_Command(Def_Power_Ln());
            Register_Command(Def_Power_Real());
            Register_Command(Def_Pow_Image());
            Register_Command(Def_Prewitt_Amp());
            Register_Command(Def_Prewitt_Dir());
            // Principal_Comp
            Register_Command(Def_Projective_Trans_Contour_Xld());
            Register_Command(Def_Projective_Trans_Image());
            Register_Command(Def_Projective_Trans_Image_Size());
            Register_Command(Def_Projective_Trans_Region());
            // Protect_Ocr_Trainf
            Register_Command(Def_Pruning());
            // Proj_HomMat_2d_ToPose
            // Proj_Match_Points_Distortion_Ransac
            // Proj_Match_Points_Distortion_Ransac_Guided
            // Proj_Match_Points_Ransac
            // Proj_Match_Points_Ransac_Guided
            #endregion

            #region Q
            // QueryContourAttribsXld
            // QueryContourGlobalAttribsXld
            #endregion

            #region R
            // Radiometric_Self_Calibration
            // Radial_Distortion_Self_Calibration
            Register_Command(Def_Rank_Image());
            Register_Command(Def_Rank_N());
            Register_Command(Def_Rank_Rect());
            Register_Command(Def_Rank_Region());
            // Read_Contour_Xld_Arc_Info(string fileName);
            // Read_Contour_Xld_Dxf
            // Read_Contour_Xld_Dxf
            Register_Command(Def_Read_Gray_Se());
            Register_Command(Def_Read_Image());
            Register_Command(Def_Read_Region());
            Register_Command(Def_Read_Shape_Model());
            Register_Command(Def_Read_Ocr_Trainf());
            Register_Command(Def_Read_Ocr_Trainf_Select());
            // Read_Sequence
            Register_Command(Def_Real_To_Complex());
            Register_Command(Def_Real_To_Vector_Field());
            // Receive_Image
            // Receive_Region
            // Reconstruct_Height_Field_From_Gradient
            Register_Command(Def_Rectangle1_Domain());
            Register_Command(Def_Rectangularity());
            Register_Command(Def_Reduce_Domain());
            Register_Command(Def_Region_Features());
            Register_Command(Def_Region_To_Bin());
            Register_Command(Def_Region_To_Label());
            Register_Command(Def_Region_To_Mean());
            Register_Command(Def_Regiongrowing());
            Register_Command(Def_Regiongrowing_Mean());
            Register_Command(Def_Regiongrowing_N());
            // Regress_Contours_Xld
            Register_Command(Def_Remove_Noise_Region());
            Register_Command(Def_Rft_Generic());
            Register_Command(Def_Rgb1_To_Gray());
            Register_Command(Def_Rgb3_To_Gray());
            Register_Command(Def_Roberts());
            Register_Command(Def_Robinson_Amp());
            Register_Command(Def_Robinson_Dir());
            Register_Command(Def_Rotate_Image());
            Register_Command(Def_Roundness());
            //Run_Bg_Esti
            Register_Command(Def_Runlength_Distribution());
            Register_Command(Def_Runlength_Features());
            #endregion

            #region S
            Register_Command(Def_Saddle_Points_Sub_Pix());
            Register_Command(Def_Scale_Image());
            Register_Command(Def_Scale_Image_Max());
            Register_Command(Def_Segment_Characters());
            Register_Command(Def_Select_Characters());
            Register_Command(Def_Select_Grayvalues_From_Channels());
            // public HRegion SelectGray(HImage image, string features, string operation, double min, double max);
            Register_Command(Def_Select_Matching_Lines());
            Register_Command(Def_Select_Obj_Image());

            Register_Command(Def_Select_Obj_Region());
            Register_Command(Def_Select_Region_Point());
            Register_Command(Def_Select_Region_Spatial());
            Register_Command(Def_Select_Shape());
            Register_Command(Def_Select_Shape_Proto());
            Register_Command(Def_Select_Shape_Std());
            // Send_Image
            // Send_Region
            // Serialize
            // Serialize_Image
            // Serialize_Region
            Register_Command(Def_Set_Grayval());
            // Set_Local_Deformable_Model_Metric
            // Set_Ncc_Model_Param
            // Set_Planar_Calib_Deformable_Model_Metric
            // Set_Planar_Uncalib_Deformable_Model_Metric
            // Set_Profile_Sheet_Of_Light
            Register_Command(Def_Segment_Contours_Xld());
            Register_Command(Def_Select_Contours_Xld());
            Register_Command(Def_Select_Shape_Xld());
            Register_Command(Def_Select_Xld_Point());
            
            Register_Command(Def_Set_Shape_Model_Metric());
            Register_Command(Def_Set_Shape_Model_Origin());
            Register_Command(Def_Set_Shape_Model_Param());           
            Register_Command(Def_Sfs_Mod_Lr());
            Register_Command(Def_Sfs_Orig_Lr());
            Register_Command(Def_Sfs_Pentland());
            Register_Command(Def_Shade_Height_Field());
            Register_Command(Def_Shape_Histo_All());
            Register_Command(Def_Shape_Histo_Point());
            Register_Command(Def_Shape_Trans());
            Register_Command(Def_Shape_Trans_Xld());

            Register_Command(Def_Shock_Filter());
            Register_Command(Def_Sigma_Image());
            // Sim_Caltab
            Register_Command(Def_Simulate_Defocus());
            Register_Command(Def_Simulate_Motion());
            Register_Command(Def_Sin_Image());
            Register_Command(Def_Skeleton());
            Register_Command(Def_Smallest_Circle());
            Register_Command(Def_Smallest_Rectangle1());
            Register_Command(Def_Smallest_Rectangle2());
            Register_Command(Def_Smooth_Contours_Xld());
            Register_Command(Def_Smooth_Image());

            

            Register_Command(Def_Sobel_Amp());
            Register_Command(Def_Sobel_Dir());
            Register_Command(Def_Sort_Contours_Xld());
            Register_Command(Def_Sort_Region());
            Register_Command(Def_Spatial_Relation());
            Register_Command(Def_Split_Skeleton_Lines());
            Register_Command(Def_Split_Skeleton_Region());
            Register_Command(Def_Sqrt_Image());
            Register_Command(Def_Sub_Image());
            Register_Command(Def_Symm_Difference());
            Register_Command(Def_Symm_Difference_Closed_Contours_Xld());

            Register_Command(Def_Symmetry());
            #endregion

            #region T
            Register_Command(Def_Tan_Image());
            // Testd_Ocr_Class_Box
            // Test_Equal_Obj
            // Test_Equal_Region
            Register_Command(Def_Test_Region_Point());
            Register_Command(Def_Text_Line_Orientation());
            Register_Command(Def_Text_Line_Slant());
            Register_Command(Def_Texture_Laws());

            Register_Command(Def_Thickening());
            Register_Command(Def_Thickening_Golay());
            Register_Command(Def_Thickening_Seq());
            Register_Command(Def_Thinning());
            Register_Command(Def_Thinning_Golay());
            Register_Command(Def_Thinning_Seq());
            Register_Command(Def_Threshold());
            Register_Command(Def_Threshold_Sub_Pix());
            Register_Command(Def_Tile_Channels());
            Register_Command(Def_Tile_Images());
            Register_Command(Def_Tile_Images_Offset());
            Register_Command(Def_Top_Hat());
            Register_Command(Def_Topographic_Sketch());
            // Traind_Ocr_Class_Box
            // Traind_Ocv_Proj
            // Train_Model_Components
            // Train_Variation_Model
            Register_Command(Def_Trans_From_Rgb());
            Register_Command(Def_Trans_To_Rgb());
            Register_Command(Def_Transpose_Region());
            Register_Command(Def_Trimmed_Mean());
            #endregion

            #region U
            Register_Command(Def_Union_Adjacent_Contours_Xld());
            Register_Command(Def_Union_Cocircular_Contours_Xld());
            Register_Command(Def_Union_Collinear_Contours_Ext_Xld());
            Register_Command(Def_Union_Collinear_Contours_Xld());
            Register_Command(Def_Union_Cotangential_Contours_Xld());
            //Union_Straight_Contours_Histo_Xld
            Register_Command(Def_Union_Straight_Contours_Xld());
            Register_Command(Def_Union1());
            Register_Command(Def_Union2());
            Register_Command(Def_Union2_Closed_Contours_Xld());
            // Unproject_Coordinates
            // Unwarp_Image_Vector_Field
            // Update_Bg_Esti
            
          

            #endregion

            #region V
            Register_Command(Def_Var_Threshold());
            Register_Command(Def_Vector_Angle_To_Rigid());            
            Register_Command(Def_Vector_Field_Length());
            Register_Command(Def_Vector_Field_To_HomMat2d());
            Register_Command(Def_Vector_Field_To_Real());
            // Vector_To_Pose
            #endregion

            #region W
            Register_Command(Def_Watersheds());
            Register_Command(Def_Watersheds_Threshold());
            Register_Command(Def_Wiener_Filter());
            Register_Command(Def_Wiener_Filter_Ni());
            //Write_Contour_Xld_Arc_Info 
            //Write_Contour_Xld_Dxf 
            Register_Command(Def_Write_Image());
            // Write_Ocr_Trainf
            // Write_Ocr_Trainf_Image
            Register_Command(Def_Write_Region());
            Register_Command(Def_Write_Shape_Model());



            #endregion

            #region Z
            Register_Command(Def_Zero_Crossing());
            Register_Command(Def_Zero_Crossing_Sub_Pix());
            Register_Command(Def_Zoom_Image_Factor());
            Register_Command(Def_Zoom_Image_Size());
            Register_Command(Def_Zoom_Region());
            #endregion
        }
        public void Register_Other_Command()
        {
            Register_Command(Def_Sub_Image_EFC());
            Register_Command(Def_Scale_Image_EFC());
        }
        public void Register_User_Command(TCommand_Define[] User_Commands)
        {
            ArrayList list = new ArrayList();

            Delete_User_Command();
            for (int i = 0; i < User_Commands.Length; i++)
            {
                TCommand_Define cmd = new TCommand_Define();
                cmd.Name = User_Commands[i].Name;
                cmd.User_Define = true;
                for (int j = 0; j < User_Commands[i].In.Values_Count; j++)
                {
                    cmd.In.Add(User_Commands[i].In.Values[j]);
                }
                for (int j = 0; j < User_Commands[i].Out.Values_Count; j++)
                {
                    cmd.Out.Add(User_Commands[i].Out.Values[j]);
                }
                Register_Command(cmd);
            }
        }
        public bool Register_Command(TCommand_Define cmd)
        {
            bool result = false;

            if (Get_Command(cmd.Name) == null)
            {
                Commands_Count++;
                Commands[Commands_Count - 1].Set(cmd);
                result = true;
            }
            return result;
        }
        public TCommand_Define Get_Command(string program_list_str)
        {
            TCommand_Define result = null;
            string cmd_str = "";

            cmd_str = Halcon_Tool.Get_Program_Name(program_list_str);
            for (int i = 0; i < Commands_Count; i++)
            {
                if (cmd_str == Commands[i].Name)
                {
                    result = new TCommand_Define();
                    result.Set(Commands[i]);
                    break;
                }
            }
            return result;
        }
        public void Delete_User_Command()
        {
            TCommand_Define[] tmp_commands = new TCommand_Define[Commands_Count];
            int no = 0;

            for (int i = 0; i < Commands_Count; i++)
            {
                if (!Commands[i].User_Define)
                {
                    tmp_commands[no] = Commands[i];
                    no++;
                }
            }
            Array.Resize(ref tmp_commands, no);
            Commands = tmp_commands;
        }
        public bool Get_Tool_Values(ArrayList list, ref TTool_Values tool_values)
        {
            return Get_Tool_Values(ArrayList_Tool.To_Strings(list), ref tool_values);
        }
        public bool Get_Tool_Values(string[] program_list, ref TTool_Values tool_values)
        {
            bool result = true;
            string[] command_list = null;
            TCommand_Define cmd_define = null;
            string cmd_str = "";
            TCommand_Value value = null;

            for (int i = 0; i < program_list.Length; i++)
            {
                Halcon_Tool.Break_String(program_list[i].ToString(), ref command_list);
                if (command_list.Length > 0)
                {
                    cmd_str = command_list[0].ToString();
                    cmd_define = Get_Command(cmd_str);
                    if (cmd_define != null)
                    {
                        cmd_define.Set_Data(command_list);
                        for (int j = 0; j < cmd_define.Out.Values_Count; j++)
                        {
                            value = cmd_define.Out.Values[j];
                            if (Halcon_Tool.Is_Variable(value.Value))
                            {
                                switch (value.Type)
                                {
                                    case emValue_Type.Region: tool_values.Add_Region(value.Value); break;
                                    case emValue_Type.Image: tool_values.Add_Image(value.Value); break;
                                    case emValue_Type.XLD: tool_values.Add_XLD(value.Value); break;
                                    case emValue_Type.ShapeModel: tool_values.Add_ShapeModel(value.Value); break;
                                    case emValue_Type.HomMat2D: tool_values.Add_HomMat2D(value.Value); break;
                                    case emValue_Type.Measure: tool_values.Add_Measure(value.Value); break;
                                    case emValue_Type.Matrix: tool_values.Add_Matrix(value.Value); break;
                                    case emValue_Type.HTuple: tool_values.Add_HTuple(value.Value); break;

                                    case emValue_Type.String: tool_values.Add_String(value.Value); break;
                                    case emValue_Type.Integer: tool_values.Add_Integer(value.Value); break;
                                    case emValue_Type.Double: tool_values.Add_Double(value.Value); break;
                                }
                            }
                        }
                    }
                }
                else result = false;
                if (!result) break;
            }
            return result;
        }
        public ArrayList Get_Command_List()
        {
            ArrayList result = new ArrayList();

            for (int i = 0; i < Commands.Length; i++) result.Add(Commands[i].Name);
            return result;
        }



        private HTuple Get_Gray_Lut(string str)
        {
            HTuple result = new HTuple();
            string[] lut_str = new string[0];
            int sor_s = 0, sor_e = 0;
            int dis_s = 0, dis_e = 0;
            int sor_gray = 0;
            double dis_gray = 0;
            double d_gray = 1.0;
            int no = 0;

            String_Tool.Break_String(str, "|", ref lut_str);
            int[] lut_sor = new int[lut_str.Length / 2];
            int[] lut_dis = new int[lut_str.Length / 2];

            for (int i = 0; i < lut_str.Length / 2; i++)
            {
                lut_sor[i] = Convert.ToInt32(lut_str[i * 2 + 0]);
                lut_dis[i] = Convert.ToInt32(lut_str[i * 2 + 1]);
            }

            sor_e = lut_sor[0];
            dis_e = lut_dis[0];
            while (sor_gray <= 255)
            {
                if (sor_gray > sor_e)
                {
                    no++;
                    if (no >= lut_sor.Length) break;
                    sor_s = sor_e;
                    dis_s = dis_e;
                    sor_e = lut_sor[no];
                    dis_e = lut_dis[no];
                }
                d_gray = (double)(dis_e - dis_s) / (sor_e - sor_s);
                dis_gray = Math.Round(dis_s + d_gray * (sor_gray - sor_s), 0);
                result.Append((int)dis_gray);
                sor_gray++;
            }
            return result;
        }

        #region Halcon Command
        #region A
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Abs_DiffImage()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "abs_diff_image";
            result.Execute += Execute_Get_Abs_DiffImage;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "Image2", "Image2", "", "", null);
            result.In.Add(emValue_Type.Double, "Mult", "Mult", "", "", null);
            result.Out.Add(emValue_Type.Image, "Image_Out", "Image_Out", "", "", null);
            return result;
        }
        private bool Execute_Get_Abs_DiffImage(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            double in3_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "abs_diff_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {

                        in1_obj.AbsDiffImage(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Abs_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "abs_image";
            result.Execute += Execute_Abs_Image;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.Out.Add(emValue_Type.Image, "Result Image", "Result Image", "", "", null);
            return result;
        }
        private bool Execute_Abs_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Image out_obj = null;

            if (param_list.Length == 3 && param_list[0] == "abs_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = in1_obj.AbsImage();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Access_Channel()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "access_channel";
            result.Execute += Execute_Access_Channel;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Integer, "Channel", "Channel", "", "", null);
            result.Out.Add(emValue_Type.Image, "Image_Out", "Image_Out", "", "", null);
            return result;
        }
        private bool Execute_Access_Channel(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 1;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "access_channel")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.AccessChannel(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Acos_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "acos_image";
            result.Execute += Execute_Acos_Image;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.Out.Add(emValue_Type.Image, "Image_Out", "Image_Out", "", "", null);
            return result;
        }
        private bool Execute_Acos_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 1;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "acos_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.AcosImage();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Add_Channels()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "add_channels";
            result.User_Define = false;
            result.Execute += Execute_Add_Channels;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Out_Image", "Out_Image", "", "", null);
            return result;
        }
        private bool Execute_Add_Channels(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HImage in2_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "add_channels")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.AddChannels(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Add_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "add_image";
            result.Execute += Execute_Add_Image;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "Image2", "Image2", "", "", null);
            result.In.Add(emValue_Type.Double, "Mult", "Mult", "", "0.5", null);
            result.In.Add(emValue_Type.Double, "Add", "Add", "", "0.0", null);
            result.Out.Add(emValue_Type.Image, "Result Image", "Result Image", "", "", null);
            return result;
        }
        private bool Execute_Add_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            TTool_Value_Image out_obj = null;
            double mult = 0.5;
            double add = 0;

            if (param_list.Length == 6 && param_list[0] == "add_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                mult = tool_values.Get_Value_Double(param_list[3]);
                add = tool_values.Get_Value_Double(param_list[4]);

                out_obj =tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && in2_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = in1_obj.AddImage(in2_obj, mult, add);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Add_Noise_White()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "add_noise_white";
            result.Execute += Execute_Add_Noise_White;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Double, "Amp", "Amp", "", "60", null);
            result.Out.Add(emValue_Type.Image, "Result Image", "Result Image", "", "", null);
            return result;
        }
        private bool Execute_Add_Noise_White(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            double in2_obj = 60;
            TTool_Value_Image out_obj = null;

            if (param_list.Length == 4 && param_list[0] == "add_noise_white")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);

                out_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = in1_obj.AddNoiseWhite(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Add_Noise_White_Contour_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "add_noise_white_contour_xld";
            result.Execute += Execute_Add_Noise_White_Contour_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.Integer, "numRegrPoints", "numRegrPoints", "", "5", null);
            result.In.Add(emValue_Type.Double, "amp", "amp", "", "1", null);
            result.Out.Add(emValue_Type.XLD, "Out_XLD", "Out_XLD", "", "", null);
            return result;
        }
        private bool Execute_Add_Noise_White_Contour_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            int in2_obj = 0;
            double in3_obj = 0;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "add_noise_white_contour_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_XLD(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {

                        out1_obj.Value = in1_obj.AddNoiseWhiteContourXld(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Affine_Trans_Contour_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "affine_trans_contour_xld";
            result.Execute += Execute_Affine_Trans_Contour_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.HomMat2D, "homMat2D", "homMat2D", "", "5", null);
            result.Out.Add(emValue_Type.XLD, "Out_XLD", "Out_XLD", "", "", null);
            return result;
        }
        private bool Execute_Affine_Trans_Contour_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            HHomMat2D in2_obj = null;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "affine_trans_contour_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_HomMat2D(param_list[2]);

                out1_obj = tool_values.Add_XLD(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {

                        out1_obj.Value = in1_obj.AffineTransContourXld(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Affine_Trans_Image()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList Interpolation_list = ArrayList_Tool.New_ArrayList(new string[]{
                                           "'bilinear'", 
                                           "'constant'",
                                           "'nearest_neighbor'",
                                           "'weighted'"});

            ArrayList AdaptImageSize_list = ArrayList_Tool.New_ArrayList(new string[]{
                                            "'false'", 
                                            "'true'"});

            result.Name = "affine_trans_image";
            result.Execute += Execute_Affine_Trans_Image;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.HomMat2D, "HomMat2D", "HomMat2D", "", "", null);
            result.In.Add(emValue_Type.String, "Interpolation", "Interpolation", "", "'constant'", Interpolation_list);
            result.In.Add(emValue_Type.String, "AdaptImageSize", "AdaptImageSize", "", "'false'", AdaptImageSize_list);
            result.Out.Add(emValue_Type.Image, "Result Image", "Result Image", "", "", null);
            return result;
        }
        private bool Execute_Affine_Trans_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HHomMat2D in2_obj = null;
            string in3_obj = "";
            string in4_obj = "";
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "affine_trans_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_HomMat2D(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.AffineTransImage(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Affine_Trans_Image_Size()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList Interpolation_list = ArrayList_Tool.New_ArrayList(new string[]{
                                           "'bilinear'", 
                                           "'constant'",
                                           "'nearest_neighbor'",
                                           "'weighted'"});

            result.Name = "affine_trans_image_size";
            result.Execute += Execute_Affine_Trans_Image_Size;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.HomMat2D, "HomMat2D", "HomMat2D", "", "", null);
            result.In.Add(emValue_Type.String, "Interpolation", "Interpolation", "", "'constant'", Interpolation_list);
            result.In.Add(emValue_Type.Integer, "Width", "Width", "", "640", null);
            result.In.Add(emValue_Type.Integer, "Height", "Height", "", "480", null);
            result.Out.Add(emValue_Type.Image, "Result Image", "Result Image", "", "", null);
            return result;
        }
        private bool Execute_Affine_Trans_Image_Size(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HHomMat2D in2_obj = null;
            string in3_obj = "";
            int in4_obj = 0;
            int in5_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "affine_trans_image_size")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_HomMat2D(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.AffineTransImageSize(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Affine_Trans_Region()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList interpolate_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                         "'constant'", 
                                         "'nearest_neighbor'" });


            result.Name = "affine_trans_region";
            result.User_Define = false;
            result.Execute += Execute_Affine_Trans_Region;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.HomMat2D, "HomMat2D", "HomMat2D", "", "", null);
            result.In.Add(emValue_Type.String, "interpolate", "interpolate", "", "'nearest_neighbor'", null);

            result.Out.Add(emValue_Type.Region, "Out_Region", "Out_Region", "", "", null);
            return result;
        }
        private bool Execute_Affine_Trans_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HHomMat2D in2_obj = null;
            string in3_obj = "";

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "affine_trans_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_HomMat2D(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.AffineTransRegion(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Anisotropic_Diffusion()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'parabolic'", 
                                  "'perona-malik'",
                                  "'weickert'"});


            result.Name = "anisotropic_diffusion";
            result.Execute += Execute_Anisotropic_Diffusion;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'weickert'", mode_list);
            result.In.Add(emValue_Type.Double, "contrast", "contrast", "", "5", null);
            result.In.Add(emValue_Type.Double, "theta", "theta", "", "1", null);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "10", null);

            result.Out.Add(emValue_Type.Image, "Result Image", "Result Image", "", "", null);
            return result;
        }
        private bool Execute_Anisotropic_Diffusion(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";
            double in3_obj = 0;
            double in4_obj = 0;
            int in5_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "anisotropic_diffusion")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.AnisotropicDiffusion(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Append_Channel()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "append_channel";
            result.Execute += Execute_Append_Channel;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.Out.Add(emValue_Type.Image, "Result Image", "Result Image", "", "", null);
            return result;
        }
        private bool Execute_Append_Channel(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "append_channel")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.AppendChannel(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Area_Center()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "area_center";
            result.User_Define = false;
            result.Execute += Execute_Area_Center;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "Area", "Area", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Row", "Row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Col", "Col", "", "", null);
            return result;
        }
        private bool Execute_Area_Center(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;

            if (param_list.Length == 5 && param_list[0] == "area_center")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);
                out3_obj = tool_values.Add_HTuple(param_list[4]);
                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.AreaCenter(out out2_obj.Value, out out3_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Area_Center_Gray()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "area_center_gray";
            result.Execute += Execute_Area_Center_Gray;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.Out.Add(emValue_Type.Double, "Area", "Area", "", "", null);
            result.Out.Add(emValue_Type.Double, "Row", "Row", "", "", null);
            result.Out.Add(emValue_Type.Double, "Col", "Col", "", "", null);
            return result;
        }
        private bool Execute_Area_Center_Gray(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HRegion in2_obj = null;
            TTool_Value_Double out1_obj = null;
            TTool_Value_Double out2_obj = null;
            TTool_Value_Double out3_obj = null;

            if (param_list.Length == 6 && param_list[0] == "area_center_gray")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Double(param_list[3]);
                out2_obj = tool_values.Add_Double(param_list[4]);
                out3_obj = tool_values.Add_Double(param_list[5]);
                if (in1_obj != null && in2_obj != null && out1_obj != null && out2_obj != null && out3_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.AreaCenterGray(in2_obj, out out2_obj.Value, out out3_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Area_Holes()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "area_holes";
            result.User_Define = false;
            result.Execute += Execute_Area_Holes;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "Area", "Area", "", "", null);
            return result;
        }
        private bool Execute_Area_Holes(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "area_holes")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.AreaHoles();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Asin_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "asin_image";
            result.Execute += Execute_Asin_Image;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Asin_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "asin_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.AsinImage();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Atan_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "atan_image";
            result.Execute += Execute_Atan_Image;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Atan_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "atan_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.AtanImage();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Atan2_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "atan2_image";
            result.Execute += Execute_Atan2_Image;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "Image2", "Image2", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Atan2_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "atan2_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Atan2Image(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Auto_Threshold()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "auto_threshold";
            result.Execute += Execute_Auto_Threshold;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Double, "sigma", "sigma", "", "2", null);
            result.Out.Add(emValue_Type.Region, "Out Region", "Out Region", "", "", null);
            return result;
        }
        private bool Execute_Auto_Threshold(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            double in2_obj = 0;
            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "auto_threshold")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.AutoThreshold(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region B
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Background_Seg()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "background_seg";
            result.User_Define = false;
            result.Execute += Execute_Background_Seg;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Background_Seg(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "background_seg")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.BackgroundSeg();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Bandpass_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "bandpass_image";
            result.Execute += Execute_Bandpass_Image;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.String, "filterType", "filterType", "", "'lines'", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Bandpass_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "bandpass_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.BandpassImage(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Binomial_Filter()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "binomial_filter";
            result.Execute += Execute_Binomial_Filter;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Integer, "Width", "Width", "", "5", null);
            result.In.Add(emValue_Type.Integer, "Height", "Height", "", "5", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Binomial_Filter(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 5;
            int in3_obj = 5;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "binomial_filter")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.BinomialFilter(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Bin_Threshold()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "bin_threshold";
            result.Execute += Execute_Bin_Threshold;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.Out.Add(emValue_Type.Region, "Out Region", "Out Region", "", "", null);
            return result;
        }
        private bool Execute_Bin_Threshold(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "bin_threshold")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.BinThreshold();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Bit_And()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "bit_and";
            result.Execute += Execute_Bit_And;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image2", "In Image2", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Bit_And(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "bit_and")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.BitAnd(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Bit_L_shift()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "bit_l_shift";
            result.Execute += Execute_Bit_L_shift;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.Integer, "Shift", "Shift", "", "3", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Bit_L_shift(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "bit_l_shift")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.BitLshift(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Bit_Mask()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "bit_mask";
            result.Execute += Execute_Bit_Mask;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.Integer, "Mask", "Mask", "", "3", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Bit_Mask(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "bit_mask")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.BitMask(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Bit_Not()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "bit_not";
            result.Execute += Execute_Bit_Not;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Bit_Not(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "bit_not")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.BitNot();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Bit_Or()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "bit_or";
            result.Execute += Execute_Bit_Or;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image2", "In Image2", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Bit_Or(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "bit_or")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.BitOr(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Bit_R_shift()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "bit_r_shift";
            result.Execute += Execute_Bit_R_shift;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.Integer, "Shift", "Shift", "", "3", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Bit_R_shift(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "bit_r_shift")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.BitRshift(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Bit_Slice()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "bit_slice";
            result.Execute += Execute_Bit_Slice;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.Integer, "Bit", "Bit", "", "3", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Bit_Slice(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "bit_slice")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.BitSlice(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Bit_Xor()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "bit_xor";
            result.Execute += Execute_Bit_Xor;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image2", "In Image2", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Bit_Xor(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "bit_xor")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.BitXor(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Bottom_Hat()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "bottom_hat";
            result.User_Define = false;
            result.Execute += Execute_Bottom_Hat;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Region, "StructElement", "StructElement", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Bottom_Hat(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "bottom_hat")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.BottomHat(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Boundary()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList boundaryType_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                         "'inner'", 
                                         "'inner_filled'",
                                         "'outer'" });

            result.Name = "boundary";
            result.User_Define = false;
            result.Execute += Execute_Boundary;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.String, "boundaryType", "boundaryType", "", "'inner'", boundaryType_list);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Boundary(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            String in2_obj = "";

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "boundary")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Boundary(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region C
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Cfa_To_Rgb()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList CFA_Type_list = ArrayList_Tool.New_ArrayList(new string[] {
                                      "'bayer_bg'", 
                                      "'bayer_gb'", 
                                      "'bayer_gr'", 
                                      "'bayer_rg'" });
            ArrayList Interpolation_list = ArrayList_Tool.New_ArrayList(new string[] {
                                      "'bilinear'", 
                                      "'bilinear_dir'"});

            result.Name = "cfa_to_rgb";
            result.Execute += Execute_Cfa_To_Rgb;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.String, "CFA_Type", "CFA_Type", "", "'bayer_gb'", CFA_Type_list);
            result.In.Add(emValue_Type.String, "Interpolation", "Interpolation", "", "'bilinear'", Interpolation_list);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Cfa_To_Rgb(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";
            string in3_obj = "";
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "cfa_to_rgb")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CfaToRgb(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Change_Domain()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "change_domain";
            result.Execute += Execute_Change_Domain;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.Region, "In Region", "In Region", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Change_Domain(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HRegion in2_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "change_domain")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ChangeDomain(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Change_Format()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "change_format";
            result.Execute += Execute_Change_Format;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.Integer, "Width", "Width", "", "", null);
            result.In.Add(emValue_Type.Integer, "Height", "Height", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Change_Format(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "change_format")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ChangeFormat(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Channels_To_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "channels_to_image";
            result.Execute += Execute_Channels_To_Image;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Channels_To_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "channels_to_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ChannelsToImage();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Char_Threshold()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "char_threshold";
            result.Execute += Execute_Char_Threshold;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.Region, "In Region", "In Region", "", "", null);
            result.In.Add(emValue_Type.Double, "Sigma", "Sigma", "", "2", null);
            result.In.Add(emValue_Type.Double, "Percent", "Percent", "", "95", null);

            result.Out.Add(emValue_Type.Region, "Out Region", "Out Region", "", "", null);
            result.Out.Add(emValue_Type.Integer, "Out Threshold", "Out Threshold", "", "", null);
            return result;
        }
        private bool Execute_Char_Threshold(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HRegion in2_obj = null;
            double in3_obj = 0;
            double in4_obj = 0;
            TTool_Value_Region out1_obj = null;
            TTool_Value_Integer out2_obj = null;

            if (param_list.Length == 7 && param_list[0] == "char_threshold")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);
                out2_obj = tool_values.Add_Integer(param_list[6]);
                if (in1_obj != null && in2_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CharThreshold(in2_obj, in3_obj, in4_obj, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Check_Difference()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "check_difference";
            result.Execute += Execute_Check_Difference;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "Pattern", "Pattern", "", "", null);
            result.In.Add(emValue_Type.String, "Mode", "Mode", "", "2", null);
            result.In.Add(emValue_Type.Integer, "diff Lower Bound", "diff Lower Bound", "", "-5", null);
            result.In.Add(emValue_Type.Integer, "diff Upper Bound", "diff Upper Bound", "", "5", null);
            result.In.Add(emValue_Type.Integer, "Gray Offset", "Gray Offset", "", "0", null);
            result.In.Add(emValue_Type.Integer, "addRow", "addRow", "", "0", null);
            result.In.Add(emValue_Type.Integer, "addCol", "addCol", "", "0", null);

            result.Out.Add(emValue_Type.Region, "Out Region", "Out Region", "", "", null);
            return result;
        }
        private bool Execute_Check_Difference(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            string in3_obj = "";
            int in4_obj = 0;
            int in5_obj = 0;
            int in6_obj = 0;
            int in7_obj = 0;
            int in8_obj = 0;
            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 10 && param_list[0] == "check_difference")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);
                in6_obj = tool_values.Get_Value_Integer(param_list[6]);
                in7_obj = tool_values.Get_Value_Integer(param_list[7]);
                in8_obj = tool_values.Get_Value_Integer(param_list[8]);

                out1_obj = tool_values.Add_Region(param_list[9]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CheckDifference(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj, in8_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Circularity()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "circularity";
            result.User_Define = false;
            result.Execute += Execute_Circularity;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "Circularity", "Circularity", "", "", null);
            return result;
        }
        private bool Execute_Circularity(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "circularity")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Circularity();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }


        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Change_Radial_Distortion_Contours_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "change_radial_distortion_contours_xld";
            result.Execute += Execute_Change_Radial_Distortion_Contours_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.HTuple, "camParamIn", "camParamIn", "", "", null);
            result.In.Add(emValue_Type.HTuple, "camParamOut", "camParamOut", "", "", null);
            result.Out.Add(emValue_Type.XLD, "Out_XLD", "Out_XLD", "", "", null);
            return result;
        }
        private bool Execute_Change_Radial_Distortion_Contours_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            HTuple in2_obj = null;
            HTuple in3_obj = null;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "change_radial_distortion_contours_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_HTuple(param_list[2]);
                in3_obj = tool_values.Get_Value_HTuple(param_list[3]);

                out1_obj = tool_values.Add_XLD(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {

                        out1_obj.Value = in1_obj.ChangeRadialDistortionContoursXld(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Clip_Contours_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "clip_contours_xld";
            result.Execute += Execute_Clip_Contours_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.Integer, "row1", "row1", "", "0", null);
            result.In.Add(emValue_Type.Integer, "col1", "col1", "", "0", null);
            result.In.Add(emValue_Type.Integer, "row2", "row2", "", "100", null);
            result.In.Add(emValue_Type.Integer, "col2", "col2", "", "100", null);
            result.Out.Add(emValue_Type.XLD, "Out_XLD", "Out_XLD", "", "", null);
            return result;
        }
        private bool Execute_Clip_Contours_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;
            int in5_obj = 0;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "clip_contours_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_XLD(param_list[6]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {

                        out1_obj.Value = in1_obj.ClipContoursXld(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Clip_End_Points_Contours_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]
            {
                "'length'", 
                "'num_points'" 
            });

            result.Name = "clip_end_points_contours_xld";
            result.Execute += Execute_Clip_End_Points_Contours_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'length'", mode_list);
            result.In.Add(emValue_Type.Double, "length", "length", "", "3", null);
            result.Out.Add(emValue_Type.XLD, "Out_XLD", "Out_XLD", "", "", null);
            return result;
        }
        private bool Execute_Clip_End_Points_Contours_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            string in2_obj = "";
            double in3_obj = 0;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "clip_end_points_contours_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_XLD(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {

                        out1_obj.Value = in1_obj.ClipEndPointsContoursXld(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Clip_Region()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "clip_region";
            result.User_Define = false;
            result.Execute += Execute_Clip_Region;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "Row1", "Row1", "", "0", null);
            result.In.Add(emValue_Type.Integer, "Col1", "Col1", "", "0", null);
            result.In.Add(emValue_Type.Integer, "Row2", "Row2", "", "256", null);
            result.In.Add(emValue_Type.Integer, "Col2", "Col2", "", "256", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Clip_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "clip_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Region(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ClipRegion(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Clip_Region_Rel()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "clip_region_rel";
            result.User_Define = false;
            result.Execute += Execute_Clip_Region_Rel;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "top", "top", "", "2", null);
            result.In.Add(emValue_Type.Integer, "bottom", "bottom", "", "2", null);
            result.In.Add(emValue_Type.Integer, "left", "left", "", "2", null);
            result.In.Add(emValue_Type.Integer, "right", "right", "", "2", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Clip_Region_Rel(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "clip_region_rel")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Region(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ClipRegionRel(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Close_Contours_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "close_contours_xld";
            result.Execute += Execute_Close_Contours_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.Out.Add(emValue_Type.XLD, "Out_XLD", "Out_XLD", "", "", null);
            return result;
        }
        private bool Execute_Close_Contours_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "close_contours_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                out1_obj = tool_values.Add_XLD(param_list[2]);
                if (in1_obj != null)
                {
                    try
                    {

                        out1_obj.Value = in1_obj.CloseContoursXld();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Close_Edges()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "close_edges";
            result.User_Define = false;
            result.Execute += Execute_Close_Edges;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Image, "edgeImage", "edgeImage", "", "", null);
            result.In.Add(emValue_Type.Integer, "minAmplitude", "minAmplitude", "", "16", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Close_Edges(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HImage in2_obj = null;
            int in3_obj = 0;
            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "close_edges")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CloseEdges(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Close_Edges_Length()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "close_edges_length";
            result.User_Define = false;
            result.Execute += Execute_Close_Edges_Length;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Image, "edgeImage", "edgeImage", "", "", null);
            result.In.Add(emValue_Type.Integer, "minAmplitude", "minAmplitude", "", "16", null);
            result.In.Add(emValue_Type.Integer, "maxGapLength", "maxGapLength", "", "3", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Close_Edges_Length(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HImage in2_obj = null;
            int in3_obj = 0;
            int in4_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "close_edges_length")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CloseEdgesLength(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Closest_Point_Transform()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList metric_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                    "'chamfer-3-4'",
                                    "'chamfer-3-4-unnormalized'",
                                    "'chessboard'",
                                    "'city-block'",
                                    "'euclidean'",
                                    "'octagonal'" });
            ArrayList foreground_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                       "'false'", 
                                       "'true'" });
            ArrayList closestPointMode_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                              "'absolute'",
                                              "'relative'"  });

            result.Name = "closest_point_transform";
            result.User_Define = false;
            result.Execute += Execute_Closest_Point_Transform;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.String, "metric", "metric", "", "'city-block'", null);
            result.In.Add(emValue_Type.String, "foreground", "foreground", "", "'true'", null);
            result.In.Add(emValue_Type.String, "closestPointMode", "closestPointMode", "", "'absolute'", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "640", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "480", null);

            result.Out.Add(emValue_Type.Image, "Image Distances", "Image Distances", "", "", null);
            result.Out.Add(emValue_Type.Image, "Image ClosestPoints", "Image ClosestPoints", "", "", null);
            return result;
        }
        private bool Execute_Closest_Point_Transform(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            string in2_obj = "";
            string in3_obj = "";
            string in4_obj = "";
            int in5_obj = 0;
            int in6_obj = 0;

            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;

            if (param_list.Length == 9 && param_list[0] == "closest_point_transform")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);
                in6_obj = tool_values.Get_Value_Integer(param_list[6]);

                out1_obj = tool_values.Add_Image(param_list[7]);
                out2_obj = tool_values.Add_Image(param_list[8]);

                if (in1_obj != null && in2_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ClosestPointTransform(out out2_obj.Value, in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Closing()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "closing";
            result.User_Define = false;
            result.Execute += Execute_Closing;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Closing(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "closing")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Closing(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Closing_Circle()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "closing_circle";
            result.User_Define = false;
            result.Execute += Execute_Closing_Circle;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Double, "radius", "radius", "", "5", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Closing_Circle(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            double in2_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "closing_circle")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ClosingCircle(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Closing_Golay()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList golayElement_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                          "'c'",
                                          "'d'",
                                          "'e'",
                                          "'f'",
                                          "'f2'",
                                          "'h'",
                                          "'i'",
                                          "'k'",
                                          "'l'", 
                                          "'m'" });

            result.Name = "closing_golay";
            result.User_Define = false;
            result.Execute += Execute_Closing_Golay;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.String, "golayElement", "golayElement", "", "'h'", golayElement_list);
            result.In.Add(emValue_Type.Integer, "rotation", "rotation", "", "0", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Closing_Golay(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "closing_golay")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);

                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ClosingGolay(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Closing_Rectangle1()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "closing_rectangle1";
            result.User_Define = false;
            result.Execute += Execute_Closing_Rectangle1;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "9", null);
            result.In.Add(emValue_Type.Integer, "height", "rotation", "", "9", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Closing_Rectangle1(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "closing_rectangle1")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ClosingRectangle1(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Compactness()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "compactness";
            result.User_Define = false;
            result.Execute += Execute_Compactness;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "Compactness", "Compactness", "", "", null);
            return result;
        }
        private bool Execute_Compactness(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "compactness")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Compactness();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Complement()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "complement";
            result.User_Define = false;
            result.Execute += Execute_Complement;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);

            result.Out.Add(emValue_Type.Region, "Complement", "Complement", "", "", null);
            return result;
        }
        private bool Execute_Complement(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "complement")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Complement();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Complex_To_Real()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "complex_to_real";
            result.Execute += Execute_Complex_To_Real;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image Real", "Out Image Real", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image Imaginary", "Out Image Imaginary", "", "", null);
            return result;
        }
        private bool Execute_Complex_To_Real(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "complex_to_real")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                out2_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ComplexToReal(out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Compose2()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "compose2";
            result.Execute += Execute_Compose2;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image2", "In Image2", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Compose2(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "compose2")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Compose2(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Compose3()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "compose3";
            result.Execute += Execute_Compose3;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image2", "In Image2", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image3", "In Image3", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Compose3(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            HImage in3_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "compose3")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Image(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && in2_obj != null && in3_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Compose3(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Compose4()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "compose4";
            result.Execute += Execute_Compose4;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image2", "In Image2", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image3", "In Image3", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image4", "In Image4", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Compose4(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            HImage in3_obj = null;
            HImage in4_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "compose4")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Image(param_list[3]);
                in4_obj = tool_values.Get_Value_Image(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && in2_obj != null && in3_obj != null && in4_obj != null &&
                    out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Compose4(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Compose5()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "compose5";
            result.Execute += Execute_Compose5;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image2", "In Image2", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image3", "In Image3", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image4", "In Image4", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image5", "In Image5", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Compose5(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            HImage in3_obj = null;
            HImage in4_obj = null;
            HImage in5_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "compose5")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Image(param_list[3]);
                in4_obj = tool_values.Get_Value_Image(param_list[4]);
                in5_obj = tool_values.Get_Value_Image(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);
                if (in1_obj != null && in2_obj != null && in3_obj != null && in4_obj != null &&
                    in5_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Compose5(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Compose6()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "compose6";
            result.Execute += Execute_Compose6;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image2", "In Image2", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image3", "In Image3", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image4", "In Image4", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image5", "In Image5", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image6", "In Image6", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Compose6(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            HImage in3_obj = null;
            HImage in4_obj = null;
            HImage in5_obj = null;
            HImage in6_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 8 && param_list[0] == "compose6")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Image(param_list[3]);
                in4_obj = tool_values.Get_Value_Image(param_list[4]);
                in5_obj = tool_values.Get_Value_Image(param_list[5]);
                in6_obj = tool_values.Get_Value_Image(param_list[6]);

                out1_obj = tool_values.Add_Image(param_list[7]);
                if (in1_obj != null && in2_obj != null && in3_obj != null && in4_obj != null &&
                    in5_obj != null && in6_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Compose6(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Compose7()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "compose7";
            result.Execute += Execute_Compose7;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image2", "In Image2", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image3", "In Image3", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image4", "In Image4", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image5", "In Image5", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image6", "In Image6", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image7", "In Image7", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Compose7(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            HImage in3_obj = null;
            HImage in4_obj = null;
            HImage in5_obj = null;
            HImage in6_obj = null;
            HImage in7_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 9 && param_list[0] == "compose7")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Image(param_list[3]);
                in4_obj = tool_values.Get_Value_Image(param_list[4]);
                in5_obj = tool_values.Get_Value_Image(param_list[5]);
                in6_obj = tool_values.Get_Value_Image(param_list[6]);
                in7_obj = tool_values.Get_Value_Image(param_list[7]);

                out1_obj = tool_values.Add_Image(param_list[8]);
                if (in1_obj != null && in2_obj != null && in3_obj != null && in4_obj != null &&
                    in5_obj != null && in6_obj != null && in7_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Compose7(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Concat_Obj_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "concat_obj_image";
            result.Execute += Execute_Concat_Obj_Image;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "In Image2", "In Image2", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Concat_Obj_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "concat_obj_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ConcatObj(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Concat_Obj_Region()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "concat_obj_region";
            result.User_Define = false;
            result.Execute += Execute_Concat_Obj_Region;
            result.In.Add(emValue_Type.Region, "In_Region1", "In_Region1", "", "", null);
            result.In.Add(emValue_Type.Region, "In_Region2", "In_Region2", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Concat_Obj_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "concat_obj_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ConcatObj(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Concat_Obj_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "concat_obj_xld";
            result.Execute += Execute_Concat_Obj_Xld;
            result.In.Add(emValue_Type.XLD, "XLD1", "XLD1", "", "", null);
            result.In.Add(emValue_Type.XLD, "XLD2", "XLD2", "", "", null);
            result.Out.Add(emValue_Type.XLD, "Out_XLD", "Out_XLD", "", "", null);
            return result;
        }
        private bool Execute_Concat_Obj_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            HXLDCont in2_obj = null;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "concat_obj_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[2]);
                out1_obj = tool_values.Add_XLD(param_list[3]);
                if (in1_obj != null && in2_obj != null)
                {
                    try
                    {

                        out1_obj.Value = in1_obj.ConcatObj(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Connect_And_Holes()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "connect_and_holes";
            result.User_Define = false;
            result.Execute += Execute_Connect_And_Holes;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "Region NumConnected", "Region NumConnected", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Region NumHoles", "Region NumHoles", "", "", null);
            return result;
        }
        private bool Execute_Connect_And_Holes(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "connect_and_holes")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);
                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ConnectAndHoles(out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Connection()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "connection";
            result.User_Define = false;
            result.Execute += Execute_Connection;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Connection(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "connection")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Connection();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Contlength()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "Contlength";
            result.User_Define = false;
            result.Execute += Execute_Contlength;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "ContLength", "ContLength", "", "", null);
            return result;
        }
        private bool Execute_Contlength(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "Contlength")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Contlength();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Contour_Point_Num_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "contour_point_num_xld";
            result.Execute += Execute_Contour_Point_Num_Xld;
            result.In.Add(emValue_Type.XLD, "XLD1", "XLD1", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Length", "Length", "", "", null);
            return result;
        }
        private bool Execute_Contour_Point_Num_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "contour_point_num_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                out1_obj = tool_values.Add_HTuple(param_list[2]);
                if (in1_obj != null)
                {
                    try
                    {

                        out1_obj.Value = in1_obj.ContourPointNumXld();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Convert_Image_Type()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList Type_list = ArrayList_Tool.New_ArrayList(new String[]{
                                  "'int1'", 
                                  "'int2'", 
                                  "'uint2'", 
                                  "'int4'",
                                  "'byte'", 
                                  "'real'", 
                                  "'direction'", 
                                  "'cyclic'",
                                  "'complex'"});


            result.Name = "convert_image_type";
            result.Execute += Execute_Convert_Image_Type;
            result.In.Add(emValue_Type.Image, "In Image1", "In Image1", "", "", null);
            result.In.Add(emValue_Type.String, "Type", "Type", "", "'byte'", Type_list);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Convert_Image_Type(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "convert_image_type")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ConvertImageType(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Convexity()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "convexity";
            result.User_Define = false;
            result.Execute += Execute_Convexity;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "ContLength", "ContLength", "", "", null);
            return result;
        }
        private bool Execute_Convexity(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "convexity")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Convexity();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Convol_Fft()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "convol_fft";
            result.Execute += Execute_Convol_Fft;
            result.In.Add(emValue_Type.Image, "ImageFFT", "ImageFFT", "", "", null);
            result.In.Add(emValue_Type.Image, "ImageFilter", "ImageFilter", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Convol_Fft(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "convol_fft")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ConvolFft(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Convol_Gabor()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "convol_gabor";
            result.Execute += Execute_Convol_Gabor;
            result.In.Add(emValue_Type.Image, "ImageFFT", "ImageFFT", "", "", null);
            result.In.Add(emValue_Type.Image, "ImageFilter", "ImageFilter", "", "", null);
            result.Out.Add(emValue_Type.Image, "ResultGabor", "ResultGabor", "", "", null);
            result.Out.Add(emValue_Type.Image, "ResultHilbert", "ResultHilbert", "", "", null);
            return result;
        }
        private bool Execute_Convol_Gabor(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;

            if (param_list.Length == 5 && param_list[0] == "convol_gabor")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                out2_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ConvolGabor(in2_obj, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Convol_Image()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList Filter_Mask_list = ArrayList_Tool.New_ArrayList(new String[]{
                                         "'sobel'", 
                                         "'laplace4'", 
                                         "'lowpas_3_3'"});
            ArrayList Margin_list = ArrayList_Tool.New_ArrayList(new String[]{
                                    "'mirrored'", 
                                    "'cyclic'", 
                                    "'continued'",
                                    "0",
                                    "30",
                                    "60", 
                                    "90", 
                                    "120", 
                                    "150",
                                    "180", 
                                    "210",
                                    "240",
                                    "255"});

            result.Name = "convol_image";
            result.Execute += Execute_Convol_Image;
            result.In.Add(emValue_Type.Image, "ImageFFT", "ImageFFT", "", "", null);
            result.In.Add(emValue_Type.String, "Filter Mask", "Filter Mask", "", "", Filter_Mask_list);
            result.In.Add(emValue_Type.String, "Margin", "Margin", "", "", Margin_list);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Convol_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";
            string in3_obj = "";
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "convol_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ConvolImage(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Cooc_Feature_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "cooc_feature_image";
            result.Execute += Execute_Cooc_Feature_Image;
            result.In.Add(emValue_Type.Image, "ImageFFT", "ImageFFT", "", "", null);
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "Gray", "Gray", "", "6", null);
            result.In.Add(emValue_Type.Integer, "Direction", "Direction", "", "0", null);

            result.Out.Add(emValue_Type.Double, "Energy", "Energy", "", "", null);
            result.Out.Add(emValue_Type.Double, "Correlation", "Correlation", "", "", null);
            result.Out.Add(emValue_Type.Double, "Homogeneity", "Homogeneity", "", "", null);
            result.Out.Add(emValue_Type.Double, "Contrast", "Contrast", "", "", null);
            return result;
        }
        private bool Execute_Cooc_Feature_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HRegion in2_obj = null;
            int in3_obj = 0;
            int in4_obj = 0;
            TTool_Value_Double out1_obj = null;
            TTool_Value_Double out2_obj = null;
            TTool_Value_Double out3_obj = null;
            TTool_Value_Double out4_obj = null;

            if (param_list.Length == 9 && param_list[0] == "cooc_feature_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Double(param_list[5]);
                out2_obj = tool_values.Add_Double(param_list[6]);
                out3_obj = tool_values.Add_Double(param_list[7]);
                out4_obj = tool_values.Add_Double(param_list[8]);
                if (in1_obj != null && in2_obj != null && out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CoocFeatureImage(in2_obj, in3_obj, in4_obj, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Cooc_Feature_Matrix()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "cooc_feature_matrix";
            result.Execute += Execute_Cooc_Feature_Matrix;
            result.In.Add(emValue_Type.Image, "ImageFFT", "ImageFFT", "", "", null);

            result.Out.Add(emValue_Type.Double, "Energy", "Energy", "", "", null);
            result.Out.Add(emValue_Type.Double, "Correlation", "Correlation", "", "", null);
            result.Out.Add(emValue_Type.Double, "Homogeneity", "Homogeneity", "", "", null);
            result.Out.Add(emValue_Type.Double, "Contrast", "Contrast", "", "", null);
            return result;
        }
        private bool Execute_Cooc_Feature_Matrix(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Double out1_obj = null;
            TTool_Value_Double out2_obj = null;
            TTool_Value_Double out3_obj = null;
            TTool_Value_Double out4_obj = null;

            if (param_list.Length == 6 && param_list[0] == "cooc_feature_matrix")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Double(param_list[2]);
                out2_obj = tool_values.Add_Double(param_list[3]);
                out3_obj = tool_values.Add_Double(param_list[4]);
                out4_obj = tool_values.Add_Double(param_list[5]);
                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CoocFeatureMatrix(out out2_obj.Value, out out3_obj.Value, out out4_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Corner_Response()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "corner_response";
            result.Execute += Execute_Corner_Response;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "Size", "Size", "", "3", null);
            result.In.Add(emValue_Type.Double, "Weight", "Weight", "", "0.04", null);

            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Corner_Response(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            double in3_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "corner_response")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CornerResponse(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Correlation_Fft()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "correlation_fft";
            result.Execute += Execute_Correlation_Fft;
            result.In.Add(emValue_Type.Image, "FFT1 Image", "FFT1 Image", "", "", null);
            result.In.Add(emValue_Type.Image, "FFT2 Image", "FFT2 Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Correlation_Fft(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "correlation_fft")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CorrelationFft(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Cos_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "cos_image";
            result.Execute += Execute_Cos_Image;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Cos_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "cos_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CosImage();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Count_Channels()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "count_channels";
            result.Execute += Execute_Count_Channels;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.Out.Add(emValue_Type.Integer, "Count", "Count", "", "", null);
            return result;
        }
        private bool Execute_Count_Channels(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Integer out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "count_channels")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Integer(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CountChannels();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Create_Aniso_Shape_Model()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList optimization_list = ArrayList_Tool.New_ArrayList(new String[]
            {
                "'auto'", 
                "'no_pregeneration'",
                "'none'", 
                "'point_reduction_high'",
                "'point_reduction_low'", 
                "'point_reduction_medium'",
                "'pregeneration'"
            });
            ArrayList metric_list = ArrayList_Tool.New_ArrayList(new String[]
            {
                "'ignore_color_polarity'",
                "'ignore_global_polarity'", 
                "'ignore_local_polarity'",
                "'use_polarity'" 
            });

            result.Name = "create_aniso_shape_model";
            result.Execute += Execute_Create_Aniso_Shape_Model;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "numLevels", "numLevels", "", "0", null);
            result.In.Add(emValue_Type.Double, "angleStart", "angleStart", "", "-0.39", null);
            result.In.Add(emValue_Type.Double, "angleExtent", "angleExtent", "", "0.79", null);
            result.In.Add(emValue_Type.Double, "angleStep", "angleStep", "", "0", null);
            result.In.Add(emValue_Type.Double, "scale_Rol_Min", "scale_Rol_Min", "", "0.9", null);
            result.In.Add(emValue_Type.Double, "scale_Rol_Max", "scale_Rol_Max", "", "1.1", null);
            result.In.Add(emValue_Type.Double, "scale_Rol_Step", "scale_Rol_Step", "", "0", null);
            result.In.Add(emValue_Type.Double, "scale_Col_Min", "scale_Col_Min", "", "0.9", null);
            result.In.Add(emValue_Type.Double, "scale_Col_Max", "scale_Col_Max", "", "1.1", null);
            result.In.Add(emValue_Type.Double, "scale_Col_Step", "scale_Col_Step", "", "0", null);
            result.In.Add(emValue_Type.String, "optimization", "optimization", "", "'auto'", optimization_list);
            result.In.Add(emValue_Type.String, "metric", "metric", "", "'use_polarity'", metric_list);
            result.In.Add(emValue_Type.Integer, "contrast", "contrast", "", "0", null);
            result.In.Add(emValue_Type.Integer, "minContrast", "minContrast", "", "0", null);

            result.Out.Add(emValue_Type.ShapeModel, "ShapeModel", "ShapeModel", "", "", null);
            return result;
        }
        private bool Execute_Create_Aniso_Shape_Model(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;
            double in7_obj = 0;
            double in8_obj = 0;
            double in9_obj = 0;
            double in10_obj = 0;
            double in11_obj = 0;
            string in12_obj = "";
            string in13_obj = "";
            int in14_obj = 0;
            int in15_obj = 0;
            TTool_Value_ShapeModel out1_obj = null;

            if (param_list.Length == 17 && param_list[0] == "create_aniso_shape_model")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);
                in8_obj = tool_values.Get_Value_Double(param_list[8]);
                in9_obj = tool_values.Get_Value_Double(param_list[9]);
                in10_obj = tool_values.Get_Value_Double(param_list[10]);
                in11_obj = tool_values.Get_Value_Double(param_list[11]);
                in12_obj = tool_values.Get_Value_String(param_list[12]);
                in13_obj = tool_values.Get_Value_String(param_list[13]);
                in14_obj = tool_values.Get_Value_Integer(param_list[14]);
                in15_obj = tool_values.Get_Value_Integer(param_list[15]);

                out1_obj = tool_values.Add_ShapeModel(param_list[16]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CreateAnisoShapeModel(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj,
                                                                       in7_obj, in8_obj, in9_obj, in10_obj, in11_obj, in12_obj,
                                                                       in13_obj, in14_obj, in15_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Create_Aniso_Shape_Model_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList optimization_list = ArrayList_Tool.New_ArrayList(new String[]
            {
                "'auto'", 
                "'no_pregeneration'",
                "'none'", 
                "'point_reduction_high'",
                "'point_reduction_low'", 
                "'point_reduction_medium'",
                "'pregeneration'"
            });
            ArrayList metric_list = ArrayList_Tool.New_ArrayList(new String[]
            {
                "'ignore_color_polarity'",
                "'ignore_global_polarity'", 
                "'ignore_local_polarity'",
                "'use_polarity'" 
            });

            result.Name = "create_aniso_shape_model_xld";
            result.Execute += Execute_Create_Aniso_Shape_Model_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.Integer, "numLevels", "numLevels", "", "'auto'", null);
            result.In.Add(emValue_Type.Double, "angleStart", "angleStart", "", "-0.39", null);
            result.In.Add(emValue_Type.Double, "angleExtent", "angleExtent", "0.79", "", null);
            result.In.Add(emValue_Type.Double, "angleStep", "angleStep", "", "'auto'", null);
            result.In.Add(emValue_Type.Double, "scaleRMin", "scaleRMin", "", "0.9", null);
            result.In.Add(emValue_Type.Double, "scaleRMax", "scaleRMax", "", "1.1", null);
            result.In.Add(emValue_Type.Double, "scaleRStep", "scaleRStep", "", "'auto'", null);
            result.In.Add(emValue_Type.Double, "scaleCMin", "scaleCMin", "", "0.9", null);
            result.In.Add(emValue_Type.Double, "scaleCMax", "scaleCMax", "", "1.1", null);
            result.In.Add(emValue_Type.Double, "scaleCStep", "scaleCStep", "", "'auto'", null);
            result.In.Add(emValue_Type.String, "optimization", "optimization", "", "'auto'", optimization_list);
            result.In.Add(emValue_Type.String, "metric", "metric", "", "'ignore_local_polarity'", metric_list);
            result.In.Add(emValue_Type.Integer, "minContrast", "minContrast", "", "'5'", null);
            result.Out.Add(emValue_Type.ShapeModel, "ShapeModel", "ShapeModel", "", "", null);
            return result;
        }
        private bool Execute_Create_Aniso_Shape_Model_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            int in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;
            double in7_obj = 0;
            double in8_obj = 0;
            double in9_obj = 0;
            double in10_obj = 0;
            double in11_obj = 0;
            string in12_obj = "";
            string in13_obj = "";
            int in14_obj = 0;
            TTool_Value_ShapeModel out1_obj = null;

            if (param_list.Length == 16 && param_list[0] == "create_aniso_shape_model_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);
                in8_obj = tool_values.Get_Value_Double(param_list[8]);
                in9_obj = tool_values.Get_Value_Double(param_list[9]);
                in10_obj = tool_values.Get_Value_Double(param_list[10]);
                in11_obj = tool_values.Get_Value_Double(param_list[11]);
                in12_obj = tool_values.Get_Value_String(param_list[12]);
                in13_obj = tool_values.Get_Value_String(param_list[13]);
                in14_obj = tool_values.Get_Value_Integer(param_list[14]);
                out1_obj = tool_values.Add_ShapeModel(param_list[15]);
                if (in1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CreateAnisoShapeModelXld(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj, in8_obj,
                                                                          in9_obj, in10_obj, in11_obj, in12_obj, in13_obj, in14_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Create_Scaled_Shape_Model()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList optimization_list = ArrayList_Tool.New_ArrayList(new String[]
            {
                "'auto'", 
                "'no_pregeneration'",
                "'none'", 
                "'point_reduction_high'",
                "'point_reduction_low'", 
                "'point_reduction_medium'",
                "'pregeneration'"
            });
            ArrayList metric_list = ArrayList_Tool.New_ArrayList(new String[]
            {
                "'ignore_color_polarity'",
                "'ignore_global_polarity'", 
                "'ignore_local_polarity'",
                "'use_polarity'" 
            });

            result.Name = "create_scaled_shape_model";
            result.Execute += Execute_Create_Scaled_Shape_Model;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "numLevels", "numLevels", "", "0", null);
            result.In.Add(emValue_Type.Double, "angleStart", "angleStart", "", "-0.39", null);
            result.In.Add(emValue_Type.Double, "angleExtent", "angleExtent", "", "0.79", null);
            result.In.Add(emValue_Type.Double, "angleStep", "angleStep", "", "0", null);
            result.In.Add(emValue_Type.Double, "scaleMin", "scaleMin", "", "0.9", null);
            result.In.Add(emValue_Type.Double, "scaleMax", "scaleMax", "", "1.1", null);
            result.In.Add(emValue_Type.Double, "scaleStep", "scaleStep", "", "0", null);
            result.In.Add(emValue_Type.String, "optimization", "optimization", "", "'auto'", optimization_list);
            result.In.Add(emValue_Type.String, "metric", "metric", "", "'use_polarity'", metric_list);
            result.In.Add(emValue_Type.Integer, "contrast", "contrast", "", "0", null);
            result.In.Add(emValue_Type.Integer, "minContrast", "minContrast", "", "0", null);

            result.Out.Add(emValue_Type.ShapeModel, "ShapeModel", "ShapeModel", "", "", null);
            return result;
        }
        private bool Execute_Create_Scaled_Shape_Model(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;
            double in7_obj = 0;
            double in8_obj = 0;
            string in9_obj = "";
            string in10_obj = "";
            int in11_obj = 0;
            int in12_obj = 0;
            TTool_Value_ShapeModel out1_obj = null;

            if (param_list.Length == 14 && param_list[0] == "create_scaled_shape_model")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);
                in8_obj = tool_values.Get_Value_Double(param_list[8]);
                in9_obj = tool_values.Get_Value_String(param_list[9]);
                in10_obj = tool_values.Get_Value_String(param_list[10]);
                in11_obj = tool_values.Get_Value_Integer(param_list[11]);
                in12_obj = tool_values.Get_Value_Integer(param_list[12]);

                out1_obj = tool_values.Add_ShapeModel(param_list[13]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CreateScaledShapeModel(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj,
                                               in7_obj, in8_obj, in9_obj, in10_obj, in11_obj, in12_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Create_Scaled_Shape_Model_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList optimization_list = ArrayList_Tool.New_ArrayList(new String[]
            {
                "'auto'", 
                "'no_pregeneration'",
                "'none'", 
                "'point_reduction_high'",
                "'point_reduction_low'", 
                "'point_reduction_medium'",
                "'pregeneration'"
            });
            ArrayList metric_list = ArrayList_Tool.New_ArrayList(new String[]
            {
                "'ignore_color_polarity'",
                "'ignore_global_polarity'", 
                "'ignore_local_polarity'",
                "'use_polarity'" 
            });

            result.Name = "create_scaled_shape_model_xld";
            result.Execute += Execute_Create_Scaled_Shape_Model_Xld;
            result.In.Add(emValue_Type.XLD, "In XLD", "In XLD", "", "", null);
            result.In.Add(emValue_Type.Integer, "numLevels", "numLevels", "", "0", null);
            result.In.Add(emValue_Type.Double, "angleStart", "angleStart", "", "-0.39", null);
            result.In.Add(emValue_Type.Double, "angleExtent", "angleExtent", "", "0.79", null);
            result.In.Add(emValue_Type.Double, "angleStep", "angleStep", "", "0", null);
            result.In.Add(emValue_Type.Double, "scaleMin", "scaleMin", "", "0.9", null);
            result.In.Add(emValue_Type.Double, "scaleMax", "scaleMax", "", "1.1", null);
            result.In.Add(emValue_Type.Double, "scaleStep", "scaleStep", "", "0", null);
            result.In.Add(emValue_Type.String, "optimization", "optimization", "", "'auto'", optimization_list);
            result.In.Add(emValue_Type.String, "metric", "metric", "", "'use_polarity'", metric_list);
            result.In.Add(emValue_Type.Integer, "minContrast", "minContrast", "", "0", null);

            result.Out.Add(emValue_Type.ShapeModel, "ShapeModel", "ShapeModel", "", "", null);
            return result;
        }
        private bool Execute_Create_Scaled_Shape_Model_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            int in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;
            double in7_obj = 0;
            double in8_obj = 0;
            string in9_obj = "";
            string in10_obj = "";
            int in11_obj = 0;
            TTool_Value_ShapeModel out1_obj = null;

            if (param_list.Length == 13 && param_list[0] == "create_scaled_shape_model_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);
                in8_obj = tool_values.Get_Value_Double(param_list[8]);
                in9_obj = tool_values.Get_Value_String(param_list[9]);
                in10_obj = tool_values.Get_Value_String(param_list[10]);
                in11_obj = tool_values.Get_Value_Integer(param_list[11]);

                out1_obj = tool_values.Add_ShapeModel(param_list[12]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CreateScaledShapeModelXld(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj,
                                               in7_obj, in8_obj, in9_obj, in10_obj, in11_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Create_Shape_Model()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList optimization_list = ArrayList_Tool.New_ArrayList(new String[]
            {
                "'auto'", 
                "'no_pregeneration'",
                "'none'", 
                "'point_reduction_high'",
                "'point_reduction_low'", 
                "'point_reduction_medium'",
                "'pregeneration'"
            });
            ArrayList metric_list = ArrayList_Tool.New_ArrayList(new String[]
            {
                "'ignore_color_polarity'",
                "'ignore_global_polarity'", 
                "'ignore_local_polarity'",
                "'use_polarity'" 
            });

            result.Name = "create_shape_model";
            result.Execute += Execute_Create_Shape_Model;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "numLevels", "numLevels", "", "0", null);
            result.In.Add(emValue_Type.Double, "angleStart", "angleStart", "", "-0.39", null);
            result.In.Add(emValue_Type.Double, "angleExtent", "angleExtent", "", "0.79", null);
            result.In.Add(emValue_Type.Double, "angleStep", "angleStep", "", "0", null);
            result.In.Add(emValue_Type.String, "optimization", "optimization", "", "'auto'", optimization_list);
            result.In.Add(emValue_Type.String, "metric", "metric", "", "'use_polarity'", metric_list);
            result.In.Add(emValue_Type.Integer, "contrast", "contrast", "", "0", null);
            result.In.Add(emValue_Type.Integer, "minContrast", "minContrast", "", "0", null);

            result.Out.Add(emValue_Type.ShapeModel, "ShapeModel", "ShapeModel", "", "", null);
            return result;
        }
        private bool Execute_Create_Shape_Model(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            string in6_obj = "";
            string in7_obj = "";
            int in8_obj = 0;
            int in9_obj = 0;
            TTool_Value_ShapeModel out1_obj = null;

            if (param_list.Length == 11 && param_list[0] == "create_shape_model")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);
                in7_obj = tool_values.Get_Value_String(param_list[7]);
                in8_obj = tool_values.Get_Value_Integer(param_list[8]);
                in9_obj = tool_values.Get_Value_Integer(param_list[9]);

                out1_obj = tool_values.Add_ShapeModel(param_list[10]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CreateShapeModel(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj, in8_obj, in9_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Create_Shape_Model_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList optimization_list = ArrayList_Tool.New_ArrayList(new String[]
            {
                "'auto'", 
                "'no_pregeneration'",
                "'none'", 
                "'point_reduction_high'",
                "'point_reduction_low'", 
                "'point_reduction_medium'",
                "'pregeneration'"
            });
            ArrayList metric_list = ArrayList_Tool.New_ArrayList(new String[]
            {
                "'ignore_color_polarity'",
                "'ignore_global_polarity'", 
                "'ignore_local_polarity'",
                "'use_polarity'" 
            });

            result.Name = "create_shape_model_xld";
            result.Execute += Execute_Create_Shape_Model_Xld;
            result.In.Add(emValue_Type.XLD, "In XLD", "In XLD", "", "", null);
            result.In.Add(emValue_Type.Integer, "numLevels", "numLevels", "", "0", null);
            result.In.Add(emValue_Type.Double, "angleStart", "angleStart", "", "-0.39", null);
            result.In.Add(emValue_Type.Double, "angleExtent", "angleExtent", "", "0.79", null);
            result.In.Add(emValue_Type.Double, "angleStep", "angleStep", "", "0", null);
            result.In.Add(emValue_Type.String, "optimization", "optimization", "", "'auto'", optimization_list);
            result.In.Add(emValue_Type.String, "metric", "metric", "", "'use_polarity'", metric_list);
            result.In.Add(emValue_Type.Integer, "minContrast", "minContrast", "", "0", null);

            result.Out.Add(emValue_Type.ShapeModel, "ShapeModel", "ShapeModel", "", "", null);
            return result;
        }
        private bool Execute_Create_Shape_Model_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            int in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            string in6_obj = "";
            string in7_obj = "";
            int in8_obj = 0;
            TTool_Value_ShapeModel out1_obj = null;

            if (param_list.Length == 10 && param_list[0] == "create_shape_model")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);
                in7_obj = tool_values.Get_Value_String(param_list[7]);
                in8_obj = tool_values.Get_Value_Integer(param_list[8]);

                out1_obj = tool_values.Add_ShapeModel(param_list[9]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CreateShapeModelXld(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj, in8_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Crop_Contours_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList closeContours_list = ArrayList_Tool.New_ArrayList(new String[]
            {
                "'false'",
                "'true'"
            });

            result.Name = "crop_contours_xld";
            result.Execute += Execute_Crop_Contours_Xld;
            result.In.Add(emValue_Type.XLD, "In XLD", "In XLD", "", "", null);
            result.In.Add(emValue_Type.Double, "row1", "row1", "", "0", null);
            result.In.Add(emValue_Type.Double, "col1", "col1", "", "0", null);
            result.In.Add(emValue_Type.Double, "row2", "row2", "", "100", null);
            result.In.Add(emValue_Type.Double, "col2", "col2", "", "100", null);
            result.In.Add(emValue_Type.String, "closeContours", "closeContours", "", "'true'", closeContours_list);

            result.Out.Add(emValue_Type.XLD, "Out_XLD", "Out_XLD", "", "", null);
            return result;
        }
        private bool Execute_Crop_Contours_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            string in6_obj = "";
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 8 && param_list[0] == "crop_contours_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);

                out1_obj = tool_values.Add_XLD(param_list[7]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CropContoursXld(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Crop_Domain()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "crop_domain";
            result.Execute += Execute_Crop_Domain;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Crop_Domain(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "crop_domain")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CropDomain();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Crop_Domain_Rel()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "crop_domain_rel";
            result.Execute += Execute_Crop_Domain_Rel;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "Top", "Top", "", "", null);
            result.In.Add(emValue_Type.Integer, "Left", "Left", "", "", null);
            result.In.Add(emValue_Type.Integer, "Bottom", "Bottom", "", "", null);
            result.In.Add(emValue_Type.Integer, "Right", "Right", "", "", null);

            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Crop_Domain_Rel(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;
            int in5_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "crop_domain_rel")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CropDomainRel(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Crop_Part()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "crop_part";
            result.Execute += Execute_Crop_Part;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "Row", "Row", "", "", null);
            result.In.Add(emValue_Type.Integer, "Col", "Col", "", "", null);
            result.In.Add(emValue_Type.Integer, "Width", "Width", "", "", null);
            result.In.Add(emValue_Type.Integer, "Height", "Height", "", "", null);

            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Crop_Part(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;
            int in5_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "crop_part")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CropPart(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Crop_Rectangle1()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "crop_rectangle1";
            result.Execute += Execute_Crop_Rectangle1;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "Row1", "Row1", "", "", null);
            result.In.Add(emValue_Type.Integer, "Col1", "Col1", "", "", null);
            result.In.Add(emValue_Type.Integer, "Row2", "Row2", "", "", null);
            result.In.Add(emValue_Type.Integer, "Col2", "Col2", "", "", null);

            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Crop_Rectangle1(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;
            int in5_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "crop_rectangle1")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.CropRectangle1(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        #endregion

        #region D
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Decompose2()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "decompose2";
            result.Execute += Execute_Decompose2;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image1", "Out Image1", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image2", "Out Image2", "", "", null);
            return result;
        }
        private bool Execute_Decompose2(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "decompose2")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                out2_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Decompose2(out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Decompose3()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "decompose3";
            result.Execute += Execute_Decompose3;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image1", "Out Image1", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image2", "Out Image2", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image3", "Out Image3", "", "", null);
            return result;
        }
        private bool Execute_Decompose3(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;
            TTool_Value_Image out3_obj = null;

            if (param_list.Length == 5 && param_list[0] == "decompose3")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                out2_obj = tool_values.Add_Image(param_list[3]);
                out3_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Decompose3(out out2_obj.Value, out out3_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Decompose4()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "decompose4";
            result.Execute += Execute_Decompose4;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image1", "Out Image1", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image2", "Out Image2", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image3", "Out Image3", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image4", "Out Image4", "", "", null);
            return result;
        }
        private bool Execute_Decompose4(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;
            TTool_Value_Image out3_obj = null;
            TTool_Value_Image out4_obj = null;

            if (param_list.Length == 6 && param_list[0] == "decompose4")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                out2_obj = tool_values.Add_Image(param_list[3]);
                out3_obj = tool_values.Add_Image(param_list[4]);
                out4_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Decompose4(out out2_obj.Value, out out3_obj.Value, out out4_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Decompose5()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "decompose5";
            result.Execute += Execute_Decompose5;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image1", "Out Image1", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image2", "Out Image2", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image3", "Out Image3", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image4", "Out Image4", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image5", "Out Image5", "", "", null);
            return result;
        }
        private bool Execute_Decompose5(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;
            TTool_Value_Image out3_obj = null;
            TTool_Value_Image out4_obj = null;
            TTool_Value_Image out5_obj = null;

            if (param_list.Length == 7 && param_list[0] == "decompose5")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                out2_obj = tool_values.Add_Image(param_list[3]);
                out3_obj = tool_values.Add_Image(param_list[4]);
                out4_obj = tool_values.Add_Image(param_list[5]);
                out5_obj = tool_values.Add_Image(param_list[6]);
                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null
                    && out5_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Decompose5(out out2_obj.Value, out out3_obj.Value, out out4_obj.Value, out out5_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Decompose6()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "decompose6";
            result.Execute += Execute_Decompose6;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image1", "Out Image1", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image2", "Out Image2", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image3", "Out Image3", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image4", "Out Image4", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image5", "Out Image5", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image6", "Out Image6", "", "", null);
            return result;
        }
        private bool Execute_Decompose6(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;
            TTool_Value_Image out3_obj = null;
            TTool_Value_Image out4_obj = null;
            TTool_Value_Image out5_obj = null;
            TTool_Value_Image out6_obj = null;

            if (param_list.Length == 8 && param_list[0] == "decompose6")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                out2_obj = tool_values.Add_Image(param_list[3]);
                out3_obj = tool_values.Add_Image(param_list[4]);
                out4_obj = tool_values.Add_Image(param_list[5]);
                out5_obj = tool_values.Add_Image(param_list[6]);
                out6_obj = tool_values.Add_Image(param_list[7]);
                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null
                    && out5_obj != null && out6_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Decompose6(out out2_obj.Value, out out3_obj.Value, out out4_obj.Value, out out5_obj.Value, out out6_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Decompose7()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "decompose7";
            result.Execute += Execute_Decompose7;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image1", "Out Image1", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image2", "Out Image2", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image3", "Out Image3", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image4", "Out Image4", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image5", "Out Image5", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image6", "Out Image6", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image7", "Out Image7", "", "", null);
            return result;
        }
        private bool Execute_Decompose7(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;
            TTool_Value_Image out3_obj = null;
            TTool_Value_Image out4_obj = null;
            TTool_Value_Image out5_obj = null;
            TTool_Value_Image out6_obj = null;
            TTool_Value_Image out7_obj = null;

            if (param_list.Length == 9 && param_list[0] == "decompose7")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                out2_obj = tool_values.Add_Image(param_list[3]);
                out3_obj = tool_values.Add_Image(param_list[4]);
                out4_obj = tool_values.Add_Image(param_list[5]);
                out5_obj = tool_values.Add_Image(param_list[6]);
                out6_obj = tool_values.Add_Image(param_list[7]);
                out7_obj = tool_values.Add_Image(param_list[8]);
                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null
                    && out5_obj != null && out6_obj != null && out7_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Decompose7(out out2_obj.Value, out out3_obj.Value, out out4_obj.Value, out out5_obj.Value, out out6_obj.Value, out out7_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Depth_From_Focus()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList Filter_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'highpass'", 
                                    "'bandpass'",
                                    "3",
                                    "5",
                                    "7",
                                    "9" });
            ArrayList Selection_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'local'", 
                                       "'next_maximum'"});

            result.Name = "depth_from_focus";
            result.Execute += Execute_Depth_From_Focus;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.In.Add(emValue_Type.String, "Filter", "Filter", "", "highpass", Filter_list);
            result.In.Add(emValue_Type.String, "Selection", "Selection", "", "next_maximum", Selection_list);

            result.Out.Add(emValue_Type.Image, "Out Image Depth", "Out Image Depth", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image Confidence", "Out Image Confidence", "", "", null);
            return result;
        }
        private bool Execute_Depth_From_Focus(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = null;
            string in3_obj = null;
            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;

            if (param_list.Length == 6 && param_list[0] == "depth_from_focus")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                out2_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.DepthFromFocus(out out2_obj.Value, in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Derivate_Gauss()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList component_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'2nd_ddg'",
                                       "'area'", 
                                       "'de_saint_venant'",
                                       "'det'",
                                       "'eigenvalue1'", 
                                       "'eigenvalue2'", 
                                       "'eigenvec_dir'", 
                                       "'gauss_curvature'",
                                       "'gradient'",
                                       "'gradient_dir'", 
                                       "'kitchen_rosenfeld'",
                                       "'laplace'",
                                       "'main1_curvature'",
                                       "'main2_curvature'",
                                       "'mean_curvature'",
                                       "'none'", 
                                       "'x'",
                                       "'xx'",
                                       "'xxx'", 
                                       "'xxy'", 
                                       "'xy'",
                                       "'xyy'", 
                                       "'y'", 
                                       "'yy'", 
                                       "'yyy'",
                                       "'zuniga_haralick'" });

            result.Name = "derivate_gauss";
            result.Execute += Execute_Derivate_Gauss;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.In.Add(emValue_Type.Double, "Sigma", "Sigma", "", "1", null);
            result.In.Add(emValue_Type.String, "component", "component", "", "'x'", component_list);

            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Derivate_Gauss(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            double in2_obj = 0;
            string in3_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "derivate_gauss")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.DerivateGauss(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Derivate_Vector_Field()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList component_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'curl'", 
                                       "'divergence'", 
                                       "'gauss_curvature'", 
                                       "'mean_curvature'" });

            result.Name = "derivate_vector_field";
            result.Execute += Execute_Derivate_Vector_Field;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.In.Add(emValue_Type.Double, "Sigma", "Sigma", "", "1", null);
            result.In.Add(emValue_Type.String, "component", "component", "", "'mean_curvature'", component_list);

            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Derivate_Vector_Field(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            double in2_obj = 0;
            string in3_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "derivate_vector_field")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.DerivateVectorField(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Deviation_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "deviation_image";
            result.Execute += Execute_Deviation_Image;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "Width", "Width", "", "640", null);
            result.In.Add(emValue_Type.Integer, "Height", "Height", "", "480", null);

            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Deviation_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "deviation_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.DeviationImage(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Deviation_N()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "deviation_n";
            result.Execute += Execute_Deviation_N;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Deviation_N(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "deviation_n")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.DeviationN();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Diameter_Region()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "diameter_region";
            result.User_Define = false;
            result.Execute += Execute_Diameter_Region;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "row1", "row1", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "column1", "column1", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "row2", "row2", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "column2", "column2", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "diameter", "diameter", "", "", null);
            return result;
        }
        private bool Execute_Diameter_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;
            TTool_Value_HTuple out5_obj = null;

            if (param_list.Length == 7 && param_list[0] == "diameter_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);
                out3_obj = tool_values.Add_HTuple(param_list[4]);
                out4_obj = tool_values.Add_HTuple(param_list[5]);
                out5_obj = tool_values.Add_HTuple(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        in1_obj.DiameterRegion(out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value, out out5_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Difference()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "difference";
            result.User_Define = false;
            result.Execute += Execute_Difference;
            result.In.Add(emValue_Type.Region, "In_Region1", "In_Region1", "", "", null);
            result.In.Add(emValue_Type.Region, "In_Region2", "In_Region2", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Difference(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "difference")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Difference(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Difference_Closed_Contours_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "difference_closed_contours_xld";
            result.Execute += Execute_Difference_Closed_Contours_Xld;
            result.In.Add(emValue_Type.XLD, "In XLD1", "In XLD1", "", "", null);
            result.In.Add(emValue_Type.XLD, "In XLD2", "In XLD2", "", "", null);
            result.Out.Add(emValue_Type.XLD, "Out_XLD", "Out_XLD", "", "", null);
            return result;
        }
        private bool Execute_Difference_Closed_Contours_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            HXLDCont in2_obj = null;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "difference_closed_contours_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[2]);
                out1_obj = tool_values.Add_XLD(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.DifferenceClosedContoursXld(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Diff_Of_Gauss()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "diff_of_gauss";
            result.Execute += Execute_Diff_Of_Gauss;
            result.In.Add(emValue_Type.Image, "In Image", "In Image", "", "", null);
            result.In.Add(emValue_Type.Double, "Sigma", "Sigma", "", "3", null);
            result.In.Add(emValue_Type.Double, "sigFactor", "sigFactor", "", "1.6", null);

            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Diff_Of_Gauss(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "diff_of_gauss")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.DiffOfGauss(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Dilation1()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "dilation1";
            result.User_Define = false;
            result.Execute += Execute_Dilation1;
            result.In.Add(emValue_Type.Region, "In_Region1", "In_Region1", "", "", null);
            result.In.Add(emValue_Type.Region, "In_Region2", "In_Region2", "", "", null);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "1", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Dilation1(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "dilation1")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Dilation1(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Dilation2()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "dilation2";
            result.User_Define = false;
            result.Execute += Execute_Dilation2;
            result.In.Add(emValue_Type.Region, "In_Region1", "In_Region1", "", "", null);
            result.In.Add(emValue_Type.Region, "In_Region2", "In_Region2", "", "", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "", null);
            result.In.Add(emValue_Type.Integer, "column", "column", "", "", null);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "1", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Dilation2(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;
            int in3_obj = 0;
            int in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "dilation2")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Region(param_list[6]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Dilation2(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Dilation_Circle()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "dilation_circle";
            result.User_Define = false;
            result.Execute += Execute_Dilation_Circle;
            result.In.Add(emValue_Type.Region, "In_Region1", "In_Region1", "", "", null);
            result.In.Add(emValue_Type.Double, "radius", "radius", "", "3.5", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Dilation_Circle(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            double in2_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "dilation_circle")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.DilationCircle(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Dilation_Golay()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList golayElement_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                          "'c'",
                                          "'d'",
                                          "'e'",
                                          "'f'",
                                          "'f2'",
                                          "'h'",
                                          "'i'",
                                          "'k'",
                                          "'l'", 
                                          "'m'" });

            result.Name = "dilation_golay";
            result.User_Define = false;
            result.Execute += Execute_Dilation_Golay;
            result.In.Add(emValue_Type.Region, "In_Region1", "In_Region1", "", "", null);
            result.In.Add(emValue_Type.String, "golayElement", "golayElement", "", "'h'", golayElement_list);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "1", null);
            result.In.Add(emValue_Type.Integer, "rotation", "rotation", "", "0", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Dilation_Golay(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;
            int in4_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "dilation_golay")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.DilationGolay(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Dilation_Rectangle1()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "dilation_rectangle1";
            result.User_Define = false;
            result.Execute += Execute_Dilation_Rectangle1;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "9", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "9", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Dilation_Rectangle1(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "dilation_rectangle1")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.DilationRectangle1(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Dilation_Seq()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList golayElement_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                          "'c'",
                                          "'d'",
                                          "'f'",
                                          "'h'",
                                          "'i'",
                                          "'k'",
                                          "'l'" });

            result.Name = "dilation_seq";
            result.User_Define = false;
            result.Execute += Execute_Dilation_Seq;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.String, "golayElement", "golayElement", "", "'h'", golayElement_list);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "1", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Dilation_Seq(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "dilation_seq")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.DilationSeq(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Distance_Lr()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "distance_lr";
            result.User_Define = false;
            result.Execute += Execute_Distance_Lr;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Double, "row1", "row1", "", "", null);
            result.In.Add(emValue_Type.Double, "col1", "col1", "", "", null);
            result.In.Add(emValue_Type.Double, "row2", "row2", "", "", null);
            result.In.Add(emValue_Type.Double, "col2", "col2", "", "", null);

            result.Out.Add(emValue_Type.Double, "distanceMin", "distanceMin", "", "", null);
            result.Out.Add(emValue_Type.Double, "distanceMax", "distanceMax", "", "", null);
            return result;
        }
        private bool Execute_Distance_Lr(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;

            TTool_Value_Double out1_obj = null;
            TTool_Value_Double out2_obj = null;

            if (param_list.Length == 8 && param_list[0] == "distance_lr")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);

                out1_obj = tool_values.Add_Double(param_list[6]);
                out2_obj = tool_values.Add_Double(param_list[7]);

                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        in1_obj.DistanceLr(in2_obj, in3_obj, in4_obj, in5_obj, out out1_obj.Value, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Distance_Pr()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "distance_pr";
            result.User_Define = false;
            result.Execute += Execute_Distance_Pr;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Double, "row", "row", "", "", null);
            result.In.Add(emValue_Type.Double, "col", "col", "", "", null);

            result.Out.Add(emValue_Type.Double, "distanceMin", "distanceMin", "", "", null);
            result.Out.Add(emValue_Type.Double, "distanceMax", "distanceMax", "", "", null);
            return result;
        }
        private bool Execute_Distance_Pr(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;

            TTool_Value_Double out1_obj = null;
            TTool_Value_Double out2_obj = null;

            if (param_list.Length == 6 && param_list[0] == "distance_pr")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_Double(param_list[4]);
                out2_obj = tool_values.Add_Double(param_list[5]);

                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        in1_obj.DistancePr(in2_obj, in3_obj, out out1_obj.Value, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Distance_Rr_Min()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "distance_rr_min";
            result.User_Define = false;
            result.Execute += Execute_Distance_Rr_Min;
            result.In.Add(emValue_Type.Region, "In_Region1", "In_Region1", "", "", null);
            result.In.Add(emValue_Type.Region, "In_Region2", "In_Region2", "", "", null);

            result.Out.Add(emValue_Type.Double, "MinDistance", "MinDistance", "", "", null);
            result.Out.Add(emValue_Type.Integer, "row1", "row1", "", "", null);
            result.Out.Add(emValue_Type.Integer, "col1", "col1", "", "", null);
            result.Out.Add(emValue_Type.Integer, "row2", "row2", "", "", null);
            result.Out.Add(emValue_Type.Integer, "col2", "col2", "", "", null);
            return result;
        }
        private bool Execute_Distance_Rr_Min(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Double out1_obj = null;
            TTool_Value_Integer out2_obj = null;
            TTool_Value_Integer out3_obj = null;
            TTool_Value_Integer out4_obj = null;
            TTool_Value_Integer out5_obj = null;

            if (param_list.Length == 8 && param_list[0] == "distance_rr_min")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Double(param_list[3]);
                out2_obj = tool_values.Add_Integer(param_list[4]);
                out3_obj = tool_values.Add_Integer(param_list[5]);
                out4_obj = tool_values.Add_Integer(param_list[6]);
                out5_obj = tool_values.Add_Integer(param_list[7]);

                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null && out5_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.DistanceRrMin(in2_obj, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value, out out5_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Distance_Rr_Min_Dil()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "distance_rr_min_dil";
            result.User_Define = false;
            result.Execute += Execute_Distance_Rr_Min_Dil;
            result.In.Add(emValue_Type.Region, "In_Region1", "In_Region1", "", "", null);
            result.In.Add(emValue_Type.Region, "In_Region2", "In_Region2", "", "", null);

            result.Out.Add(emValue_Type.Double, "MinDistance", "MinDistance", "", "", null);
            return result;
        }
        private bool Execute_Distance_Rr_Min_Dil(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Double out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "distance_rr_min_dil")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Double(param_list[3]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.DistanceRrMinDil(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Distance_Sr()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "distance_sr";
            result.User_Define = false;
            result.Execute += Execute_Distance_Sr;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Double, "row1", "row1", "", "", null);
            result.In.Add(emValue_Type.Double, "col1", "col1", "", "", null);
            result.In.Add(emValue_Type.Double, "row2", "row2", "", "", null);
            result.In.Add(emValue_Type.Double, "col2", "col2", "", "", null);

            result.Out.Add(emValue_Type.Double, "distanceMin", "distanceMin", "", "", null);
            result.Out.Add(emValue_Type.Double, "distanceMax", "distanceMax", "", "", null);
            return result;
        }
        private bool Execute_Distance_Sr(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;

            TTool_Value_Double out1_obj = null;
            TTool_Value_Double out2_obj = null;

            if (param_list.Length == 8 && param_list[0] == "distance_sr")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);

                out1_obj = tool_values.Add_Double(param_list[6]);
                out2_obj = tool_values.Add_Double(param_list[7]);

                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        in1_obj.DistanceSr(in2_obj, in3_obj, in4_obj, in5_obj, out out1_obj.Value, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Distance_Transform()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList metric_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                    "'chamfer-3-4'",
                                    "'chamfer-3-4-unnormalized'",
                                    "'chessboard'",
                                    "'city-block'",
                                    "'euclidean'",
                                    "'octagonal'" });
            ArrayList foreground_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                     "'false'",
                                     "'true'" });

            result.Name = "distance_transform";
            result.User_Define = false;
            result.Execute += Execute_Distance_Transform;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.String, "metric", "metric", "", "'city-block'", metric_list);
            result.In.Add(emValue_Type.String, "foreground", "foreground", "", "'true'", foreground_list);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "640", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "480", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Distance_Transform(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            string in2_obj = "";
            string in3_obj = "";
            int in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "distance_transform")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.DistanceTransform(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Div_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "div_image";
            result.Execute += Execute_Div_Image;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "Image2", "Image2", "", "", null);
            result.In.Add(emValue_Type.Double, "Mult", "Mult", "", "255.0", null);
            result.In.Add(emValue_Type.Double, "Add", "Add", "", "0.0", null);
            result.Out.Add(emValue_Type.Image, "Result Image", "Result Image", "", "", null);
            return result;
        }
        private bool Execute_Div_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            double in3_obj = 0;
            double in4_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "div_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.DivImage(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Dots_Image()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList Filter_Type_list = ArrayList_Tool.New_ArrayList(new string[] { "'all'", "'dark'", "'light'" });

            result.Name = "dots_image";
            result.Execute += Execute_Dots_Image;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Integer, "Diameter", "Diameter", "", "5", null);
            result.In.Add(emValue_Type.String, "Filter Type", "Filter Type", "", "'light'", Filter_Type_list);
            result.In.Add(emValue_Type.Integer, "Pixel Shift", "Pixel Shift", "", "0", null);
            result.Out.Add(emValue_Type.Image, "Result Image", "Result Image", "", "", null);
            return result;
        }
        private bool Execute_Dots_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            string in3_obj = "";
            int in4_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "dots_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.DotsImage(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Dual_Rank()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList maskType_list = ArrayList_Tool.New_ArrayList(new string[] {
                                      "'circle'", 
                                      "'circle'" });
            ArrayList margin_list = ArrayList_Tool.New_ArrayList(new string[] {
                                    "'mirrored'", 
                                    "'cyclic'", 
                                    "'continued'",
                                    "0",
                                    "30",
                                    "60",
                                    "90", 
                                    "120",
                                    "150", 
                                    "180", 
                                    "210", 
                                    "240",
                                    "255" });

            result.Name = "dual_rank";
            result.Execute += Execute_Dual_Rank;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.String, "maskType", "maskType", "", "'circle'", maskType_list);
            result.In.Add(emValue_Type.Integer, "radius", "radius", "", "1", null);
            result.In.Add(emValue_Type.Integer, "modePercent", "modePercent", "", "10", null);
            result.In.Add(emValue_Type.String, "margin", "margin", "", "'mirrored'", margin_list);
            result.Out.Add(emValue_Type.Image, "Result Image", "Result Image", "", "", null);
            return result;
        }
        private bool Execute_Dual_Rank(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;
            int in4_obj = 0;
            string in5_obj = "";
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "dual_rank")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_String(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.DualRank(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Dual_Threshold()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "dual_threshold";
            result.Execute += Execute_Dual_Threshold;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Integer, "minSize", "minSize", "", "20", null);
            result.In.Add(emValue_Type.Double, "minGray", "minGray", "", "5", null);
            result.In.Add(emValue_Type.Double, "threshold", "threshold", "", "2", null);

            result.Out.Add(emValue_Type.Region, "Out Region", "Out Region", "", "", null);
            return result;
        }
        private bool Execute_Dual_Threshold(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "dual_threshold")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.DualThreshold(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Dyn_Threshold()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList lightDark_list = ArrayList_Tool.New_ArrayList(new string[] {
                                       "'dark'", 
                                       "'equal'", 
                                       "'light'", 
                                       "'not_equal'" });

            result.Name = "dyn_threshold";
            result.Execute += Execute_Dyn_Threshold;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "ThresholdImage", "ThresholdImage", "", "", null);
            result.In.Add(emValue_Type.Double, "offset", "offset", "", "5", null);
            result.In.Add(emValue_Type.String, "lightDark", "lightDark", "", "'light'", lightDark_list);

            result.Out.Add(emValue_Type.Region, "Out Region", "Out Region", "", "", null);
            return result;
        }
        private bool Execute_Dyn_Threshold(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            double in3_obj = 0;
            string in4_obj = "";
            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "dyn_threshold")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.DynThreshold(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region E
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Eccentricity()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "eccentricity";
            result.User_Define = false;
            result.Execute += Execute_Eccentricity;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "Anisometry", "Anisometry", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Bulkiness", "Bulkiness", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "StructureFactor", "StructureFactor", "", "", null);
            return result;
        }
        private bool Execute_Eccentricity(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;

            if (param_list.Length == 5 && param_list[0] == "eccentricity")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);
                out3_obj = tool_values.Add_HTuple(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Eccentricity(out out2_obj.Value, out out3_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Edges_Color()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList filter_list = ArrayList_Tool.New_ArrayList(new string[] {
                                    "'canny'",
                                    "'deriche1'",
                                    "'deriche2'",
                                    "'shen'", 
                                    "'sobel_fast'" });
            ArrayList NMS_list = ArrayList_Tool.New_ArrayList(new string[] {
                                    "'hvnms'",
                                    "'inms'",
                                    "'nms'",
                                    "'none'" });

            result.Name = "edges_color";
            result.Execute += Execute_Edges_Color;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.String, "filter", "filter", "", "'canny'", filter_list);
            result.In.Add(emValue_Type.Double, "alpha", "alpha", "", "1", null);
            result.In.Add(emValue_Type.String, "NMS", "NMS", "", "'nms'", NMS_list);
            result.In.Add(emValue_Type.Integer, "low", "low", "", "20", null);
            result.In.Add(emValue_Type.Integer, "high", "high", "", "40", null);

            result.Out.Add(emValue_Type.Image, "Out Image Amp", "Out Image Amp", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image Dir", "Out Image Dir", "", "", null);
            return result;
        }
        private bool Execute_Edges_Color(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";
            double in3_obj = 0;
            string in4_obj = "";
            int in5_obj = 0;
            int in6_obj = 0;
            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;

            if (param_list.Length == 9 && param_list[0] == "edges_color")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);
                in6_obj = tool_values.Get_Value_Integer(param_list[6]);

                out1_obj = tool_values.Add_Image(param_list[7]);
                out2_obj = tool_values.Add_Image(param_list[8]);
                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.EdgesColor(out out2_obj.Value, in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Edges_Color_Sub_Pix()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList filter_list = ArrayList_Tool.New_ArrayList(new string[] {
                                    "'canny'",
                                    "'canny_junctions'",
                                    "'deriche1'",
                                    "'deriche1_junctions'",
                                    "'deriche2'",
                                    "'deriche2_junctions'",
                                    "'shen'",
                                    "'shen_junctions'",
                                    "'sobel_fast'" });

            result.Name = "edges_color_sub_pix";
            result.Execute += Execute_Edges_Color_Sub_Pix;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.String, "filter", "filter", "", "'canny'", filter_list);
            result.In.Add(emValue_Type.Double, "alpha", "alpha", "", "1", null);
            result.In.Add(emValue_Type.Double, "low", "low", "", "20", null);
            result.In.Add(emValue_Type.Double, "high", "high", "", "40", null);

            result.Out.Add(emValue_Type.XLD, "Out XLD", "Out XLD", "", "", null);
            return result;
        }
        private bool Execute_Edges_Color_Sub_Pix(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "edges_color_sub_pix")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);

                out1_obj = tool_values.Add_XLD(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.EdgesColorSubPix(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Eliminate_Min_Max()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "eliminate_min_max";
            result.Execute += Execute_Eliminate_Min_Max;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Integer, "maskWidth", "maskWidth", "", "'3'", null);
            result.In.Add(emValue_Type.Integer, "maskHeight", "maskHeight", "", "3", null);
            result.In.Add(emValue_Type.Double, "gap", "gap", "", "1", null);
            result.In.Add(emValue_Type.Integer, "mode", "mode", "", "3", null);

            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Eliminate_Min_Max(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            double in4_obj = 0;
            int in5_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "eliminate_min_max")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.EliminateMinMax(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Eliminate_Sp()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "eliminate_sp";
            result.Execute += Execute_Eliminate_Sp;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Integer, "maskWidth", "maskWidth", "", "'3'", null);
            result.In.Add(emValue_Type.Integer, "maskHeight", "maskHeight", "", "3", null);
            result.In.Add(emValue_Type.Integer, "minThresh", "minThresh", "", "1", null);
            result.In.Add(emValue_Type.Integer, "maxThresh", "maxThresh", "", "254", null);

            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Eliminate_Sp(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;
            int in5_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "eliminate_sp")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.EliminateSp(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Eliminate_Runs()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "eliminate_runs";
            result.User_Define = false;
            result.Execute += Execute_Eliminate_Runs;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "elimShorter", "elimShorter", "", "3", null);
            result.In.Add(emValue_Type.Integer, "elimLonger", "elimLonger", "", "1000", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Eliminate_Runs(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "eliminate_runs")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.EliminateRuns(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Elliptic_Axis()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "elliptic_axis";
            result.User_Define = false;
            result.Execute += Execute_Elliptic_Axis;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "ra", "ra", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "rb", "rb", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "phi", "phi", "", "", null);
            return result;
        }
        private bool Execute_Elliptic_Axis(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;

            if (param_list.Length == 5 && param_list[0] == "elliptic_axis")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);
                out3_obj = tool_values.Add_HTuple(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.EllipticAxis(out out2_obj.Value, out out3_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Elliptic_Axis_Gray()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "elliptic_axis_gray";
            result.Execute += Execute_Elliptic_Axis_Gray;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.Double, "Out ra", "Out ra", "", "", null);
            result.Out.Add(emValue_Type.Double, "Out rb", "Out rb", "", "", null);
            result.Out.Add(emValue_Type.Double, "Out phi", "Out phi", "", "", null);
            return result;
        }
        private bool Execute_Elliptic_Axis_Gray(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HRegion in2_obj = null;
            TTool_Value_Double out1_obj = null;
            TTool_Value_Double out2_obj = null;
            TTool_Value_Double out3_obj = null;

            if (param_list.Length == 6 && param_list[0] == "elliptic_axis_gray")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Double(param_list[3]);
                out2_obj = tool_values.Add_Double(param_list[4]);
                out3_obj = tool_values.Add_Double(param_list[5]);
                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.EllipticAxisGray(in2_obj, out out1_obj.Value, out out1_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Emphasize()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "emphasize";
            result.Execute += Execute_Emphasize;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Integer, "Mask Width", "Mask Width", "", "7", null);
            result.In.Add(emValue_Type.Integer, "Mask Height", "Mask Height", "", "7", null);
            result.In.Add(emValue_Type.Double, "Factor", "Factor", "", "1", null);
            result.Out.Add(emValue_Type.Image, "Result Image", "Result Image", "", "", null);
            return result;
        }
        private bool Execute_Emphasize(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 7;
            int in3_obj = 7;
            double in4_obj = 1;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "emphasize")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Emphasize(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Energy_Gabor()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "energy_gabor";
            result.Execute += Execute_Energy_Gabor;
            result.In.Add(emValue_Type.Image, "ImageGabor", "ImageGabor", "", "", null);
            result.In.Add(emValue_Type.Image, "ImageHilbert", "ImageHilbert", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Energy_Gabor(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "energy_gabor")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.EnergyGabor(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
 
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Entropy_Gray()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "entropy_gray";
            result.Execute += Execute_Entropy_Gray;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.Out.Add(emValue_Type.Double, "Out Entropy", "Out Entropy", "", "", null);
            result.Out.Add(emValue_Type.Double, "Out Anisotropy", "Out Anisotropy", "", "", null);
            return result;
        }
        private bool Execute_Entropy_Gray(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HRegion in2_obj = null;
            TTool_Value_Double out1_obj = null;
            TTool_Value_Double out2_obj = null;

            if (param_list.Length == 5 && param_list[0] == "entropy_gray")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Double(param_list[3]);
                out2_obj = tool_values.Add_Double(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.EntropyGray(in2_obj, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Entropy_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "entropy_image";
            result.Execute += Execute_Entropy_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "Width", "Width", "", "", null);
            result.In.Add(emValue_Type.Integer, "Height", "Height", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Entropy_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "entropy_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.EntropyImage(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Equ_Histo_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "equ_histo_image";
            result.Execute += Execute_Equ_Histo_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Equ_Histo_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "equ_histo_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.EquHistoImage();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Erosion1()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "erosion1";
            result.User_Define = false;
            result.Execute += Execute_Erosion1;
            result.In.Add(emValue_Type.Region, "In_Region1", "In_Region1", "", "", null);
            result.In.Add(emValue_Type.Region, "In_Region2", "In_Region2", "", "", null);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "1", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Erosion1(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "erosion1")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Erosion1(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Erosion2()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "erosion2";
            result.User_Define = false;
            result.Execute += Execute_Erosion2;
            result.In.Add(emValue_Type.Region, "In_Region1", "In_Region1", "", "", null);
            result.In.Add(emValue_Type.Region, "In_Region2", "In_Region2", "", "", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "", null);
            result.In.Add(emValue_Type.Integer, "column", "column", "", "", null);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "1", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Erosion2(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;
            int in3_obj = 0;
            int in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "erosion2")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Region(param_list[6]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Erosion2(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Erosion_Circle()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "erosion_circle";
            result.User_Define = false;
            result.Execute += Execute_Erosion_Circle;
            result.In.Add(emValue_Type.Region, "In_Region1", "In_Region1", "", "", null);
            result.In.Add(emValue_Type.Double, "radius", "radius", "", "3.5", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Erosion_Circle(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            double in2_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "erosion_circle")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ErosionCircle(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Erosion_Golay()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList golayElement_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                          "'c'",
                                          "'d'",
                                          "'e'",
                                          "'f'",
                                          "'f2'",
                                          "'h'",
                                          "'i'",
                                          "'k'",
                                          "'l'", 
                                          "'m'" });

            result.Name = "erosion_golay";
            result.User_Define = false;
            result.Execute += Execute_Erosion_Golay;
            result.In.Add(emValue_Type.Region, "In_Region1", "In_Region1", "", "", null);
            result.In.Add(emValue_Type.String, "golayElement", "golayElement", "", "'h'", golayElement_list);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "1", null);
            result.In.Add(emValue_Type.Integer, "rotation", "rotation", "", "0", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Erosion_Golay(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;
            int in4_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "erosion_golay")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ErosionGolay(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Erosion_Rectangle1()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "erosion_rectangle1";
            result.User_Define = false;
            result.Execute += Execute_Erosion_Rectangle1;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "9", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "9", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Erosion_Rectangle1(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "erosion_rectangle1")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ErosionRectangle1(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Erosion_Seq()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList golayElement_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                          "'c'",
                                          "'d'",
                                          "'f'",
                                          "'h'",
                                          "'i'",
                                          "'k'",
                                          "'l'" });

            result.Name = "erosion_seq";
            result.User_Define = false;
            result.Execute += Execute_Erosion_Seq;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.String, "golayElement", "golayElement", "", "'h'", golayElement_list);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "1", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Erosion_Seq(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "erosion_seq")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ErosionSeq(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Estimate_Al_Am()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "estimate_al_am";
            result.Execute += Execute_Estimate_Al_Am;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.Out.Add(emValue_Type.Double, "Out Albedo", "Out Albedo", "", "", null);
            result.Out.Add(emValue_Type.Double, "Out Ambient", "Out Ambient", "", "", null);
            return result;
        }
        private bool Execute_Estimate_Al_Am(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Double out1_obj = null;
            TTool_Value_Double out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "estimate_al_am")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Double(param_list[2]);
                out2_obj = tool_values.Add_Double(param_list[3]);
                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.EstimateAlAm(out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Estimate_Noise()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList method_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'foerstner'", 
                                    "'immerkaer'", 
                                    "'least_squares'", 
                                    "'mean'" });

            result.Name = "estimate_noise";
            result.Execute += Execute_Estimate_Noise;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "method", "method", "", "'foerstner'", method_list);
            result.In.Add(emValue_Type.Double, "percent", "percent", "", "20", null);
            result.Out.Add(emValue_Type.Double, "Out Sigma", "Out Sigma", "", "", null);
            return result;
        }
        private bool Execute_Estimate_Noise(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";
            double in3_obj = 0;
            TTool_Value_Double out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "estimate_noise")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_Double(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.EstimateNoise(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Estimate_Sl_Al_Lr()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "estimate_sl_al_lr";
            result.Execute += Execute_Estimate_Sl_Al_Lr;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.Out.Add(emValue_Type.Double, "Out Albedo", "Out Albedo", "", "", null);
            result.Out.Add(emValue_Type.Double, "Out Ambient", "Out Ambient", "", "", null);
            return result;
        }
        private bool Execute_Estimate_Sl_Al_Lr(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Double out1_obj = null;
            TTool_Value_Double out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "estimate_sl_al_lr")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Double(param_list[2]);
                out2_obj = tool_values.Add_Double(param_list[3]);
                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.EstimateSlAlLr(out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Estimate_Sl_Al_Zc()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "estimate_sl_al_zc";
            result.Execute += Execute_Estimate_Sl_Al_Zc;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.Out.Add(emValue_Type.Double, "Out Albedo", "Out Albedo", "", "", null);
            result.Out.Add(emValue_Type.Double, "Out Ambient", "Out Ambient", "", "", null);
            return result;
        }
        private bool Execute_Estimate_Sl_Al_Zc(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Double out1_obj = null;
            TTool_Value_Double out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "estimate_sl_al_zc")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Double(param_list[2]);
                out2_obj = tool_values.Add_Double(param_list[3]);
                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.EstimateSlAlZc(out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Estimate_Tilt_Lr()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "estimate_tilt_lr";
            result.Execute += Execute_Estimate_Tilt_Lr;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.Out.Add(emValue_Type.Double, "Out Tilt", "Out Tilt", "", "", null);
            return result;
        }
        private bool Execute_Estimate_Tilt_Lr(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Double out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "estimate_tilt_lr")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Double(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.EstimateTiltLr();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Estimate_Tilt_Zc()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "estimate_tilt_zc";
            result.Execute += Execute_Estimate_Tilt_Zc;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.Out.Add(emValue_Type.Double, "Out Tilt", "Out Tilt", "", "", null);
            return result;
        }
        private bool Execute_Estimate_Tilt_Zc(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Double out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "estimate_tilt_zc")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Double(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.EstimateTiltZc();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Euler_Number()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "euler_number";
            result.User_Define = false;
            result.Execute += Execute_Euler_Number;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "Euler_Number", "Euler_Number", "", "", null);
            return result;
        }
        private bool Execute_Euler_Number(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "euler_number")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.EulerNumber();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Exhaustive_Match()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList Mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                 "'dfd'", 
                                 "'norm_correlation'" });

            result.Name = "exhaustive_match";
            result.Execute += Execute_Exhaustive_Match;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Region, "Region Of Interest", "Region Of Interest", "", "", null);
            result.In.Add(emValue_Type.Image, "Image Template", "Image Template", "", "", null);
            result.In.Add(emValue_Type.String, "Mode", "Mode", "", "'dfd'", Mode_list);

            result.Out.Add(emValue_Type.Image, "Out Image Match", "Out Image Match", "", "", null);
            return result;
        }
        private bool Execute_Exhaustive_Match(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HRegion in2_obj = null;
            HImage in3_obj = null;
            String in4_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "exhaustive_match")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Image(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && in2_obj != null && in3_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ExhaustiveMatch(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Exhaustive_Match_Mg()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList Mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                 "'dfd'", 
                                 "'norm_correlation'" });


            result.Name = "exhaustive_match_mg";
            result.Execute += Execute_Exhaustive_Match_Mg;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Image, "Image Template", "Image Template", "", "", null);
            result.In.Add(emValue_Type.String, "Mode", "Mode", "", "'dfd'", Mode_list);
            result.In.Add(emValue_Type.Integer, "level", "level", "", "'1'", null);
            result.In.Add(emValue_Type.Integer, "threshold", "threshold", "", "30", null);

            result.Out.Add(emValue_Type.Image, "Out Image Match", "Out Image Match", "", "", null);
            return result;
        }
        private bool Execute_Exhaustive_Match_Mg(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            String in3_obj = "";
            int in4_obj = 0;
            int in5_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "exhaustive_match_mg")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ExhaustiveMatchMg(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Exp_Image()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList Base_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'e'", 
                                  "2",
                                  "10" });

            result.Name = "exp_image";
            result.Execute += Execute_Exp_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "Base", "Base", "", "'e'", Base_list);

            result.Out.Add(emValue_Type.Region, "Out Region", "Out Region", "", "", null);
            return result;
        }
        private bool Execute_Exp_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "exp_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ExpImage(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Expand_Domain_Gray()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "expand_domain_gray";
            result.Execute += Execute_Expand_Domain_Gray;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "Expansion Range", "Expansion Range", "", "2", null);

            result.Out.Add(emValue_Type.Image, "Out Expanded Image", "Out Expanded Image", "", "", null);
            return result;
        }
        private bool Execute_Expand_Domain_Gray(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "expand_domain_gray")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ExpandDomainGray(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Expand_Gray()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList iterations_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "1",
                                        "2",
                                        "3",
                                        "4",
                                        "5",
                                        "6",
                                        "7",
                                        "8",
                                        "9",
                                        "10",
                                        "'maximal'" });
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'image'",
                                  "'region'" });

            result.Name = "Expand_gray";
            result.Execute += Execute_Expand_Gray;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Region, "regions", "regions", "", "", null);
            result.In.Add(emValue_Type.Region, "forbiddenArea", "forbiddenArea", "", "", null);
            result.In.Add(emValue_Type.String, "iterations", "iterations", "", "'maximal'", iterations_list);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'image'", mode_list);
            result.In.Add(emValue_Type.Integer, "threshold", "threshold", "", "32", null);

            result.Out.Add(emValue_Type.Region, "Out Region", "Out Region", "", "", null);
            return result;
        }
        private bool Execute_Expand_Gray(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HRegion in2_obj = null;
            HRegion in3_obj = null;
            string in4_obj = "";
            string in5_obj = "";
            int in6_obj = 0;
            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 8 && param_list[0] == "Expand_gray")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Region(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);
                in5_obj = tool_values.Get_Value_String(param_list[5]);
                in6_obj = tool_values.Get_Value_Integer(param_list[6]);

                out1_obj = tool_values.Add_Region(param_list[7]);
                if (in1_obj != null && in2_obj != null && in3_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ExpandGray(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Expand_Gray_Ref()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList iterations_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "1",
                                        "2",
                                        "3",
                                        "4",
                                        "5",
                                        "6",
                                        "7",
                                        "8",
                                        "9",
                                        "10",
                                        "'maximal'" });
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'image'",
                                  "'region'" });

            result.Name = "Expand_Gray_Ref";
            result.Execute += Execute_Expand_Gray_Ref;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Region, "regions", "regions", "", "", null);
            result.In.Add(emValue_Type.Region, "forbiddenArea", "forbiddenArea", "", "", null);
            result.In.Add(emValue_Type.String, "iterations", "iterations", "", "'maximal'", iterations_list);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'image'", mode_list);
            result.In.Add(emValue_Type.Integer, "ref Gray", "ref Gray", "", "128", null);
            result.In.Add(emValue_Type.Integer, "threshold", "threshold", "", "32", null);

            result.Out.Add(emValue_Type.Region, "Out Region", "Out Region", "", "", null);
            return result;
        }
        private bool Execute_Expand_Gray_Ref(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HRegion in2_obj = null;
            HRegion in3_obj = null;
            string in4_obj = "";
            string in5_obj = "";
            int in6_obj = 0;
            int in7_obj = 0;
            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 9 && param_list[0] == "Expand_Gray_Ref")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Region(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);
                in5_obj = tool_values.Get_Value_String(param_list[5]);
                in6_obj = tool_values.Get_Value_Integer(param_list[6]);
                in6_obj = tool_values.Get_Value_Integer(param_list[7]);

                out1_obj = tool_values.Add_Region(param_list[8]);
                if (in1_obj != null && in2_obj != null && in3_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ExpandGrayRef(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Expand_Line()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList expandType_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "'gradient'", 
                                        "'mean'"  });
            ArrayList rowColumn_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'column'",
                                       "'row'"  });




            result.Name = "expand_line";
            result.Execute += Execute_Expand_Line;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "coordinate", "coordinate", "", "256", null);
            result.In.Add(emValue_Type.String, "expandType", "expandType", "", "'gradient'", expandType_list);
            result.In.Add(emValue_Type.String, "rowColumn", "rowColumn", "", "'row'", rowColumn_list);
            result.In.Add(emValue_Type.Double, "threshold", "threshold", "", "3", null);

            result.Out.Add(emValue_Type.Region, "Out Region", "Out Region", "", "", null);
            return result;
        }
        private bool Execute_Expand_Line(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            string in3_obj = "";
            string in4_obj = "";
            double in5_obj = 0;
            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "expand_line")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);

                out1_obj = tool_values.Add_Region(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ExpandLine(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Expand_Region()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList iterations_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                        "'maximal'",
                                        "0",
                                        "1",
                                        "2",
                                        "3", 
                                        "5", 
                                        "7", 
                                        "10",
                                        "15", 
                                        "20", 
                                        "30", 
                                        "50", 
                                        "70", 
                                        "100", 
                                        "200" });
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                  "'image'",
                                  "'region'" });

            result.Name = "expand_region";
            result.User_Define = false;
            result.Execute += Execute_Expand_Region;
            result.In.Add(emValue_Type.Region, "In_Region1", "In_Region1", "", "", null);
            result.In.Add(emValue_Type.Region, "In_Region2", "In_Region2", "", "", null);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "'maximal'", iterations_list);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'image'", mode_list);

            result.Out.Add(emValue_Type.HTuple, "Euler_Number", "Euler_Number", "", "", null);
            return result;
        }
        private bool Execute_Expand_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;
            int in3_obj = 0;
            string in4_obj = "";

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "expand_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);

                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ExpandRegion(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region F
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Fast_Threshold()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "fast_threshold";
            result.Execute += Execute_Fast_Threshold;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "minGray", "minGray", "", "128", null);
            result.In.Add(emValue_Type.Double, "maxGray", "maxGray", "", "255", null);
            result.In.Add(emValue_Type.Integer, "minSize", "minSize", "", "20", null);

            result.Out.Add(emValue_Type.Region, "Out Region", "Out Region", "", "", null);
            return result;
        }
        private bool Execute_Fast_Threshold(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            int in4_obj = 0;
            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "fast_threshold")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.FastThreshold(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Fft_Generic()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList direction_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'from_freq'",
                                       "'to_freq'" });
            ArrayList norm_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'n'", 
                                  "'none'",
                                  "'sqrt'"  });
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'dc_center'",
                                  "'dc_edge'"  });
            ArrayList Type_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'byte'",
                                  "'complex'",
                                  "'cyclic'",
                                  "'direction'",
                                  "'int1'",
                                  "'int2'",
                                  "'int4'",
                                  "'real'",
                                  "'uint2'"  });


            result.Name = "fft_generic";
            result.Execute += Execute_Fft_Generic;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "direction", "direction", "", "'to_freq'", direction_list);
            result.In.Add(emValue_Type.Integer, "exponent", "exponent", "", "-1", null);
            result.In.Add(emValue_Type.String, "norm", "norm", "", "'sqrt'", norm_list);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'dc_center'", mode_list);
            result.In.Add(emValue_Type.String, "resultType", "resultType", "", "'complex'", Type_list);

            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Fft_Generic(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;
            string in4_obj = "";
            string in5_obj = "";
            string in6_obj = "";
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 8 && param_list[0] == "fft_generic")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);
                in5_obj = tool_values.Get_Value_String(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);

                out1_obj = tool_values.Add_Image(param_list[7]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.FftGeneric(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Fft_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "fft_image";
            result.Execute += Execute_Fft_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Fft_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "fft_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.FftImage();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Fft_Image_Inv()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "fft_image_inv";
            result.Execute += Execute_Fft_Image_Inv;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Fft_Image_Inv(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "fft_image_inv")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.FftImageInv();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Fill_Interlace()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'even'",
                                  "'odd'",
                                  "'rmeven'",
                                  "'rmodd'",
                                  "'switch'" });

            result.Name = "fill_interlace";
            result.Execute += Execute_Fill_Interlace;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'odd'", mode_list);

            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Fill_Interlace(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            string in2_obj = "";
            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "fill_interlace")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.FillInterlace(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Fill_Up()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "fill_up";
            result.User_Define = false;
            result.Execute += Execute_Fill_Up;
            result.In.Add(emValue_Type.Region, "In_Region1", "In_Region1", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Fill_Up(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "fill_up")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.FillUp();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Fill_Up_Shape()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList feature_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                     "'anisometry'", 
                                     "'area'",
                                     "'compactness'", 
                                     "'convexity'", 
                                     "'inner_circle'", 
                                     "'outer_circle'", 
                                     "'phi'", 
                                     "'ra'", 
                                     "'rb'" });

            result.Name = "fill_up_shape";
            result.User_Define = false;
            result.Execute += Execute_Fill_Up_Shape;
            result.In.Add(emValue_Type.Region, "In_Region1", "In_Region1", "", "", null);
            result.In.Add(emValue_Type.String, "feature", "feature", "", "'area'", feature_list);
            result.In.Add(emValue_Type.Double, "min", "min", "", "1", null);
            result.In.Add(emValue_Type.Double, "max", "max", "", "100", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Fill_Up_Shape(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            string in2_obj = "";
            double in3_obj = 0;
            double in4_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "fill_up_shape")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.FillUpShape(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Find_Caltab()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList TabDescrFile_list = ArrayList_Tool.New_ArrayList(new string[]{
                                          "'caltab.descr'",
                                          "'caltab_100mm.descr'",
                                          "'caltab_10mm.descr'",
                                          "'caltab_200mm.descr'",
                                          "'caltab_30mm.descr'" });

            result.Name = "find_caltab";
            result.Execute += Execute_Find_Caltab;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "calTabDescrFile", "calTabDescrFile", "", "'caltab.descr'", TabDescrFile_list);
            result.In.Add(emValue_Type.Integer, "sizeGauss", "sizeGauss", "", "3", null);
            result.In.Add(emValue_Type.Integer, "markThresh", "markThresh", "", "112", null);
            result.In.Add(emValue_Type.Integer, "minDiamMarks", "minDiamMarks", "", "5", null);

            result.Out.Add(emValue_Type.Region, "Out Region", "Out Region", "", "", null);
            return result;
        }
        private bool Execute_Find_Caltab(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;
            int in4_obj = 0;
            int in5_obj = 0;
            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "find_caltab")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Region(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.FindCaltab(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Find_Neighbors()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "find_neighbors";
            result.User_Define = false;
            result.Execute += Execute_Find_Neighbors;
            result.In.Add(emValue_Type.Region, "In_Region1", "In_Region1", "", "", null);
            result.In.Add(emValue_Type.Region, "In_Region2", "In_Region2", "", "", null);
            result.In.Add(emValue_Type.Integer, "maxDistance", "maxDistance", "", "1", null);

            result.Out.Add(emValue_Type.HTuple, "regionIndex1", "regionIndex1", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "regionIndex2", "regionIndex2", "", "", null);
            return result;
        }
        private bool Execute_Find_Neighbors(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;
            int in3_obj = 0;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 6 && param_list[0] == "find_neighbors")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_HTuple(param_list[4]);
                out2_obj = tool_values.Add_HTuple(param_list[5]);

                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.FindNeighbors(in2_obj, in3_obj, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Find_Scaled_Shape_Model()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList angleStart_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "-3.14",
                                        "-1.57",
                                        "-0.78",
                                        "-0.39",
                                        "-0.20",
                                        "0.0"  });
            ArrayList angleExtent_list = ArrayList_Tool.New_ArrayList(new string[]{
                                         "6.29",
                                         "3.14",
                                         "1.57",
                                         "0.78",
                                         "0.39",
                                         "0.0" });
            ArrayList scaleMin_list = ArrayList_Tool.New_ArrayList(new string[]{
                                      "0.5",
                                      "0.6",
                                      "0.7",
                                      "0.8",
                                      "0.9",
                                      "1.0" });
            ArrayList scaleMax_list = ArrayList_Tool.New_ArrayList(new string[]{
                                      "1.0",
                                      "1.1",
                                      "1.2",
                                      "1.3",
                                      "1.4",
                                      "1.5" });
            ArrayList minScore_list = ArrayList_Tool.New_ArrayList(new string[]{
                                      "0.3",
                                      "0.4",
                                      "0.5",
                                      "0.6",
                                      "0.7",
                                      "0.8",
                                      "0.9",
                                      "1.0" });
            ArrayList maxOverlap_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "0.0",
                                        "0.1",
                                        "0.2", 
                                        "0.3", 
                                        "0.4",
                                        "0.5",
                                        "0.6",
                                        "0.7",
                                        "0.8", 
                                        "0.9", 
                                        "1.0" });
            ArrayList subPixel_list = ArrayList_Tool.New_ArrayList(new string[]{
                                      "'interpolation'",
                                      "'least_squares'",
                                      "'least_squares_high'",
                                      "'least_squares_very_high'",
                                      "'max_deformation 1'",
                                      "'max_deformation 2'",
                                      "'max_deformation 3'", 
                                      "'max_deformation 4'", 
                                      "'max_deformation 5'",
                                      "'max_deformation 6'",
                                      "'none'"  });
            ArrayList numLevels_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "0",
                                       "1",
                                       "2",
                                       "3", 
                                       "4", 
                                       "5", 
                                       "6", 
                                       "7", 
                                       "8", 
                                       "9", 
                                       "10"  });
            ArrayList greediness_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "0.0",
                                        "0.1",
                                        "0.2",
                                        "0.3",
                                        "0.4", 
                                        "0.5", 
                                        "0.6", 
                                        "0.7", 
                                        "0.8",
                                        "0.9", 
                                        "1.0" });




            result.Name = "find_scaled_shape_model";
            result.Execute += Execute_Find_Scaled_Shape_Model;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.ShapeModel, "modelID", "modelID", "", "", null);
            result.In.Add(emValue_Type.Double, "angleStart", "angleStart", "", "-0.39", angleStart_list);
            result.In.Add(emValue_Type.Double, "angleExtent", "angleExtent", "", "0.78", angleExtent_list);
            result.In.Add(emValue_Type.Double, "scaleMin", "scaleMin", "", "0.9", scaleMin_list);
            result.In.Add(emValue_Type.Double, "scaleMax", "scaleMax", "", "1.1", scaleMax_list);
            result.In.Add(emValue_Type.Double, "minScore", "minScore", "", "0.5", minScore_list);
            result.In.Add(emValue_Type.Integer, "numMatches", "numMatches", "", "1", null);
            result.In.Add(emValue_Type.Double, "maxOverlap", "maxOverlap", "", "0.5", maxOverlap_list);
            result.In.Add(emValue_Type.String, "subPixel", "subPixel", "", "'least_squares'", subPixel_list);
            result.In.Add(emValue_Type.Integer, "numLevels", "numLevels", "", "0", numLevels_list);
            result.In.Add(emValue_Type.Double, "greediness", "greediness", "", "0.9", greediness_list);

            result.Out.Add(emValue_Type.HTuple, "Out Row", "Out Row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out Col", "Out Col", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out Angle", "Out Angle", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out Scale", "Out Scale", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out Score", "Out Score", "", "", null);
            return result;
        }
        private bool Execute_Find_Scaled_Shape_Model(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HShapeModel in2_obj = null;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;
            double in7_obj = 0;
            int in8_obj = 0;
            double in9_obj = 0;
            string in10_obj = "";
            int in11_obj = 0;
            double in12_obj = 0;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;
            TTool_Value_HTuple out5_obj = null;

            if (param_list.Length == 18 && param_list[0] == "find_scaled_shape_model")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_ShapeModel(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);
                in8_obj = tool_values.Get_Value_Integer(param_list[8]);
                in9_obj = tool_values.Get_Value_Double(param_list[9]);
                in10_obj = tool_values.Get_Value_String(param_list[10]);
                in11_obj = tool_values.Get_Value_Integer(param_list[11]);
                in12_obj = tool_values.Get_Value_Double(param_list[12]);

                out1_obj = tool_values.Add_HTuple(param_list[13]);
                out2_obj = tool_values.Add_HTuple(param_list[14]);
                out3_obj = tool_values.Add_HTuple(param_list[15]);
                out4_obj = tool_values.Add_HTuple(param_list[16]);
                out5_obj = tool_values.Add_HTuple(param_list[17]);
                if (in1_obj != null && in2_obj != null &&
                    out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null && out5_obj != null)
                {
                    try
                    {
                        in1_obj.FindScaledShapeModel(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj,
                                                                      in7_obj, in8_obj, in9_obj, in10_obj, in11_obj, in12_obj,
                                                                      out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value, out out5_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Find_Scaled_Shape_Models()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList angleStart_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "-3.14",
                                        "-1.57",
                                        "-0.78",
                                        "-0.39",
                                        "-0.20",
                                        "0.0"  });
            ArrayList angleExtent_list = ArrayList_Tool.New_ArrayList(new string[]{
                                         "6.29",
                                         "3.14",
                                         "1.57",
                                         "0.78",
                                         "0.39",
                                         "0.0" });
            ArrayList scaleMin_list = ArrayList_Tool.New_ArrayList(new string[]{
                                      "0.5",
                                      "0.6",
                                      "0.7",
                                      "0.8",
                                      "0.9",
                                      "1.0" });
            ArrayList scaleMax_list = ArrayList_Tool.New_ArrayList(new string[]{
                                      "1.0",
                                      "1.1",
                                      "1.2",
                                      "1.3",
                                      "1.4",
                                      "1.5" });
            ArrayList minScore_list = ArrayList_Tool.New_ArrayList(new string[]{
                                      "0.3",
                                      "0.4",
                                      "0.5",
                                      "0.6",
                                      "0.7",
                                      "0.8",
                                      "0.9",
                                      "1.0" });
            ArrayList maxOverlap_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "0.0",
                                        "0.1",
                                        "0.2", 
                                        "0.3", 
                                        "0.4",
                                        "0.5",
                                        "0.6",
                                        "0.7",
                                        "0.8", 
                                        "0.9", 
                                        "1.0" });
            ArrayList subPixel_list = ArrayList_Tool.New_ArrayList(new string[]{
                                      "'interpolation'",
                                      "'least_squares'",
                                      "'least_squares_high'",
                                      "'least_squares_very_high'",
                                      "'max_deformation 1'",
                                      "'max_deformation 2'",
                                      "'max_deformation 3'", 
                                      "'max_deformation 4'", 
                                      "'max_deformation 5'",
                                      "'max_deformation 6'",
                                      "'none'"  });
            ArrayList numLevels_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "0",
                                       "1",
                                       "2",
                                       "3", 
                                       "4", 
                                       "5", 
                                       "6", 
                                       "7", 
                                       "8", 
                                       "9", 
                                       "10"  });
            ArrayList greediness_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "0.0",
                                        "0.1",
                                        "0.2",
                                        "0.3",
                                        "0.4", 
                                        "0.5", 
                                        "0.6", 
                                        "0.7", 
                                        "0.8",
                                        "0.9", 
                                        "1.0" });




            result.Name = "find_scaled_shape_models";
            result.Execute += Execute_Find_Scaled_Shape_Models;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.ShapeModel, "modelID", "modelID", "", "", null);
            result.In.Add(emValue_Type.Double, "angleStart", "angleStart", "", "-0.39", angleStart_list);
            result.In.Add(emValue_Type.Double, "angleExtent", "angleExtent", "", "0.78", angleExtent_list);
            result.In.Add(emValue_Type.Double, "scaleMin", "scaleMin", "", "0.9", scaleMin_list);
            result.In.Add(emValue_Type.Double, "scaleMax", "scaleMax", "", "1.1", scaleMax_list);
            result.In.Add(emValue_Type.Double, "minScore", "minScore", "", "0.5", minScore_list);
            result.In.Add(emValue_Type.Integer, "numMatches", "numMatches", "", "1", null);
            result.In.Add(emValue_Type.Double, "maxOverlap", "maxOverlap", "", "0.5", maxOverlap_list);
            result.In.Add(emValue_Type.String, "subPixel", "subPixel", "", "'least_squares'", subPixel_list);
            result.In.Add(emValue_Type.Integer, "numLevels", "numLevels", "", "0", numLevels_list);
            result.In.Add(emValue_Type.Double, "greediness", "greediness", "", "0.9", greediness_list);

            result.Out.Add(emValue_Type.HTuple, "Out Row", "Out Row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out Col", "Out Col", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out Angle", "Out Angle", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out Scale", "Out Scale", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out Score", "Out Score", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out Model", "Out Model", "", "", null);
            return result;
        }
        private bool Execute_Find_Scaled_Shape_Models(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HShapeModel in2_obj = null;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;
            double in7_obj = 0;
            int in8_obj = 0;
            double in9_obj = 0;
            string in10_obj = "";
            int in11_obj = 0;
            double in12_obj = 0;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;
            TTool_Value_HTuple out5_obj = null;
            TTool_Value_HTuple out6_obj = null;

            if (param_list.Length == 19 && param_list[0] == "find_scaled_shape_models")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_ShapeModel(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);
                in8_obj = tool_values.Get_Value_Integer(param_list[8]);
                in9_obj = tool_values.Get_Value_Double(param_list[9]);
                in10_obj = tool_values.Get_Value_String(param_list[10]);
                in11_obj = tool_values.Get_Value_Integer(param_list[11]);
                in12_obj = tool_values.Get_Value_Double(param_list[12]);

                out1_obj = tool_values.Add_HTuple(param_list[13]);
                out2_obj = tool_values.Add_HTuple(param_list[14]);
                out3_obj = tool_values.Add_HTuple(param_list[15]);
                out4_obj = tool_values.Add_HTuple(param_list[16]);
                out5_obj = tool_values.Add_HTuple(param_list[17]);
                out6_obj = tool_values.Add_HTuple(param_list[18]);
                if (in1_obj != null && in2_obj != null &&
                    out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null && out5_obj != null)
                {
                    try
                    {
                        in1_obj.FindScaledShapeModels(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj,
                                                      in7_obj, in8_obj, in9_obj, in10_obj, in11_obj, in12_obj,
                                                      out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value, out out5_obj.Value, out out6_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Find_Shape_Model()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList angleStart_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "-3.14",
                                        "-1.57",
                                        "-0.78",
                                        "-0.39",
                                        "-0.20",
                                        "0.0"  });
            ArrayList angleExtent_list = ArrayList_Tool.New_ArrayList(new string[]{
                                         "6.29",
                                         "3.14",
                                         "1.57",
                                         "0.78",
                                         "0.39",
                                         "0.0" });
            ArrayList minScore_list = ArrayList_Tool.New_ArrayList(new string[]{
                                      "0.3",
                                      "0.4",
                                      "0.5",
                                      "0.6",
                                      "0.7",
                                      "0.8",
                                      "0.9",
                                      "1.0" });
            ArrayList maxOverlap_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "0.0",
                                        "0.1",
                                        "0.2", 
                                        "0.3", 
                                        "0.4",
                                        "0.5",
                                        "0.6",
                                        "0.7",
                                        "0.8", 
                                        "0.9", 
                                        "1.0" });
            ArrayList subPixel_list = ArrayList_Tool.New_ArrayList(new string[]{
                                      "'interpolation'",
                                      "'least_squares'",
                                      "'least_squares_high'",
                                      "'least_squares_very_high'",
                                      "'max_deformation 1'",
                                      "'max_deformation 2'",
                                      "'max_deformation 3'", 
                                      "'max_deformation 4'", 
                                      "'max_deformation 5'",
                                      "'max_deformation 6'",
                                      "'none'"  });
            ArrayList numLevels_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "0",
                                       "1",
                                       "2",
                                       "3", 
                                       "4", 
                                       "5", 
                                       "6", 
                                       "7", 
                                       "8", 
                                       "9", 
                                       "10"  });
            ArrayList greediness_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "0.0",
                                        "0.1",
                                        "0.2",
                                        "0.3",
                                        "0.4", 
                                        "0.5", 
                                        "0.6", 
                                        "0.7", 
                                        "0.8",
                                        "0.9", 
                                        "1.0" });


            result.Name = "find_shape_model";
            result.Execute += Execute_Find_Shape_Model;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.ShapeModel, "modelID", "modelID", "", "", null);
            result.In.Add(emValue_Type.Double, "angleStart", "angleStart", "", "-0.39", angleStart_list);
            result.In.Add(emValue_Type.Double, "angleExtent", "angleExtent", "", "0.78", angleExtent_list);
            result.In.Add(emValue_Type.Double, "minScore", "minScore", "", "0.5", minScore_list);
            result.In.Add(emValue_Type.Integer, "numMatches", "numMatches", "", "1", null);
            result.In.Add(emValue_Type.Double, "maxOverlap", "maxOverlap", "", "0.5", maxOverlap_list);
            result.In.Add(emValue_Type.String, "subPixel", "subPixel", "", "'least_squares'", subPixel_list);
            result.In.Add(emValue_Type.Integer, "numLevels", "numLevels", "", "0", numLevels_list);
            result.In.Add(emValue_Type.Double, "greediness", "greediness", "", "0.9", greediness_list);

            result.Out.Add(emValue_Type.HTuple, "Out Row", "Out Row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out Col", "Out Col", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out Angle", "Out Angle", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out Score", "Out Score", "", "", null);
            return result;
        }
        private bool Execute_Find_Shape_Model(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HShapeModel in2_obj = null;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            int in6_obj = 0;
            double in7_obj = 0;
            string in8_obj = "";
            int in9_obj = 0;
            double in10_obj = 0;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;

            if (param_list.Length == 15 && param_list[0] == "find_shape_model")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_ShapeModel(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Integer(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);
                in8_obj = tool_values.Get_Value_String(param_list[8]);
                in9_obj = tool_values.Get_Value_Integer(param_list[9]);
                in10_obj = tool_values.Get_Value_Double(param_list[10]);

                out1_obj = tool_values.Add_HTuple(param_list[11]);
                out2_obj = tool_values.Add_HTuple(param_list[12]);
                out3_obj = tool_values.Add_HTuple(param_list[13]);
                out4_obj = tool_values.Add_HTuple(param_list[14]);
                if (in1_obj != null && in2_obj != null &&
                    out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null)
                {
                    try
                    {
                        in1_obj.FindShapeModel(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj,
                                               in7_obj, in8_obj, in9_obj, in10_obj,
                                               out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Find_Shape_Models()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList angleStart_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "-3.14",
                                        "-1.57",
                                        "-0.78",
                                        "-0.39",
                                        "-0.20",
                                        "0.0"  });
            ArrayList angleExtent_list = ArrayList_Tool.New_ArrayList(new string[]{
                                         "6.29",
                                         "3.14",
                                         "1.57",
                                         "0.78",
                                         "0.39",
                                         "0.0" });
            ArrayList minScore_list = ArrayList_Tool.New_ArrayList(new string[]{
                                      "0.3",
                                      "0.4",
                                      "0.5",
                                      "0.6",
                                      "0.7",
                                      "0.8",
                                      "0.9",
                                      "1.0" });
            ArrayList maxOverlap_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "0.0",
                                        "0.1",
                                        "0.2", 
                                        "0.3", 
                                        "0.4",
                                        "0.5",
                                        "0.6",
                                        "0.7",
                                        "0.8", 
                                        "0.9", 
                                        "1.0" });
            ArrayList subPixel_list = ArrayList_Tool.New_ArrayList(new string[]{
                                      "'interpolation'",
                                      "'least_squares'",
                                      "'least_squares_high'",
                                      "'least_squares_very_high'",
                                      "'max_deformation 1'",
                                      "'max_deformation 2'",
                                      "'max_deformation 3'", 
                                      "'max_deformation 4'", 
                                      "'max_deformation 5'",
                                      "'max_deformation 6'",
                                      "'none'"  });
            ArrayList numLevels_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "0",
                                       "1",
                                       "2",
                                       "3", 
                                       "4", 
                                       "5", 
                                       "6", 
                                       "7", 
                                       "8", 
                                       "9", 
                                       "10"  });
            ArrayList greediness_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "0.0",
                                        "0.1",
                                        "0.2",
                                        "0.3",
                                        "0.4", 
                                        "0.5", 
                                        "0.6", 
                                        "0.7", 
                                        "0.8",
                                        "0.9", 
                                        "1.0" });


            result.Name = "find_shape_models";
            result.Execute += Execute_Find_Shape_Models;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.ShapeModel, "modelID", "modelID", "", "", null);
            result.In.Add(emValue_Type.Double, "angleStart", "angleStart", "", "-0.39", angleStart_list);
            result.In.Add(emValue_Type.Double, "angleExtent", "angleExtent", "", "0.78", angleExtent_list);
            result.In.Add(emValue_Type.Double, "minScore", "minScore", "", "0.5", minScore_list);
            result.In.Add(emValue_Type.Integer, "numMatches", "numMatches", "", "1", null);
            result.In.Add(emValue_Type.Double, "maxOverlap", "maxOverlap", "", "0.5", maxOverlap_list);
            result.In.Add(emValue_Type.String, "subPixel", "subPixel", "", "'least_squares'", subPixel_list);
            result.In.Add(emValue_Type.Integer, "numLevels", "numLevels", "", "0", numLevels_list);
            result.In.Add(emValue_Type.Double, "greediness", "greediness", "", "0.9", greediness_list);

            result.Out.Add(emValue_Type.HTuple, "Out Row", "Out Row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out Col", "Out Col", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out Angle", "Out Angle", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out Score", "Out Score", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out Model", "Out Model", "", "", null);
            return result;
        }
        private bool Execute_Find_Shape_Models(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HShapeModel in2_obj = null;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            int in6_obj = 0;
            double in7_obj = 0;
            string in8_obj = "";
            int in9_obj = 0;
            double in10_obj = 0;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;
            TTool_Value_HTuple out5_obj = null;

            if (param_list.Length == 16 && param_list[0] == "find_shape_models")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_ShapeModel(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Integer(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);
                in8_obj = tool_values.Get_Value_String(param_list[8]);
                in9_obj = tool_values.Get_Value_Integer(param_list[9]);
                in10_obj = tool_values.Get_Value_Double(param_list[10]);

                out1_obj = tool_values.Add_HTuple(param_list[11]);
                out2_obj = tool_values.Add_HTuple(param_list[12]);
                out3_obj = tool_values.Add_HTuple(param_list[13]);
                out4_obj = tool_values.Add_HTuple(param_list[14]);
                out5_obj = tool_values.Add_HTuple(param_list[15]);
                if (in1_obj != null && in2_obj != null &&
                    out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null && out5_obj != null)
                {
                    try
                    {
                        in1_obj.FindShapeModels(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj,
                                               in7_obj, in8_obj, in9_obj, in10_obj,
                                               out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value, out out5_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Fit_Circle_Contour_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList algorithm_list = ArrayList_Tool.New_ArrayList(new string[]
            {
                "'ahuber'", 
                "'algebraic'", 
                "'atukey'", 
                "'geohuber'", 
                "'geometric'", 
                "'geotukey'" 
            });

            result.Name = "fit_circle_contour_xld";
            result.Execute += Execute_Fit_Circle_Contour_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.String, "algorithm", "algorithm", "", "'algebraic'", algorithm_list);
            result.In.Add(emValue_Type.Integer, "maxNumPoints", "maxNumPoints", "", "-1", null);
            result.In.Add(emValue_Type.Double, "maxClosureDist", "maxClosureDist", "", "0", null);
            result.In.Add(emValue_Type.Integer, "clippingEndPoints", "clippingEndPoints", "", "0", null);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "3", null);
            result.In.Add(emValue_Type.Double, "clippingFactor", "clippingFactor", "", "2", null);

            result.Out.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "col", "col", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "radius", "radius", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "startPhi", "startPhi", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "endPhi", "endPhi", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "pointOrder", "pointOrder", "", "", null);
            return result;
        }
        private bool Execute_Fit_Circle_Contour_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;
            double in4_obj = 0;
            int in5_obj = 0;
            int in6_obj = 0;
            double in7_obj = 0;
            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;
            TTool_Value_HTuple out5_obj = null;
            TTool_Value_HTuple out6_obj = null;

            if (param_list.Length == 14 && param_list[0] == "fit_circle_contour_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);
                in6_obj = tool_values.Get_Value_Integer(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);

                out1_obj = tool_values.Add_HTuple(param_list[8]);
                out2_obj = tool_values.Add_HTuple(param_list[9]);
                out3_obj = tool_values.Add_HTuple(param_list[10]);
                out4_obj = tool_values.Add_HTuple(param_list[11]);
                out5_obj = tool_values.Add_HTuple(param_list[12]);
                out6_obj = tool_values.Add_HTuple(param_list[13]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        in1_obj.FitCircleContourXld(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj,
                                                    out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value, out out5_obj.Value, out out6_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Fit_Ellipse_Contour_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList algorithm_list = ArrayList_Tool.New_ArrayList(new string[]
            {
                "'ahuber'", 
                "'algebraic'", 
                "'atukey'", 
                "'geohuber'", 
                "'geometric'", 
                "'geotukey'" 
            });

            result.Name = "fit_ellipse_contour_xld";
            result.Execute += Execute_Fit_Ellipse_Contour_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.String, "algorithm", "algorithm", "", "", null);
            result.In.Add(emValue_Type.Integer, "maxNumPoints", "maxNumPoints", "", "", null);
            result.In.Add(emValue_Type.Double, "maxClosureDist", "maxClosureDist", "", "", null);
            result.In.Add(emValue_Type.Integer, "clippingEndPoints", "clippingEndPoints", "", "", null);
            result.In.Add(emValue_Type.Integer, "vossTabSize", "vossTabSize", "", "", null);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "", null);
            result.In.Add(emValue_Type.Double, "clippingFactor", "clippingFactor", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "col", "col", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "phi", "phi", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "radius1", "radius1", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "radius2", "radius2", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "startPhi", "startPhi", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "endPhi", "endPhi", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "pointOrder", "pointOrder", "", "", null);
            return result;
        }
        private bool Execute_Fit_Ellipse_Contour_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;
            double in4_obj = 0;
            int in5_obj = 0;
            int in6_obj = 0;
            int in7_obj = 0;
            double in8_obj = 0;
            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;
            TTool_Value_HTuple out5_obj = null;
            TTool_Value_HTuple out6_obj = null;
            TTool_Value_HTuple out7_obj = null;
            TTool_Value_HTuple out8_obj = null;

            if (param_list.Length == 17 && param_list[0] == "fit_ellipse_contour_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);
                in6_obj = tool_values.Get_Value_Integer(param_list[6]);
                in7_obj = tool_values.Get_Value_Integer(param_list[7]);
                in8_obj = tool_values.Get_Value_Double(param_list[8]);

                out1_obj = tool_values.Add_HTuple(param_list[9]);
                out2_obj = tool_values.Add_HTuple(param_list[10]);
                out3_obj = tool_values.Add_HTuple(param_list[11]);
                out4_obj = tool_values.Add_HTuple(param_list[12]);
                out5_obj = tool_values.Add_HTuple(param_list[13]);
                out6_obj = tool_values.Add_HTuple(param_list[14]);
                out7_obj = tool_values.Add_HTuple(param_list[15]);
                out8_obj = tool_values.Add_HTuple(param_list[16]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        in1_obj.FitEllipseContourXld(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj, in8_obj,
                                                    out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value,
                                                    out out5_obj.Value, out out6_obj.Value, out out7_obj.Value, out out8_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Fit_Line_Contour_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList algorithm_list = ArrayList_Tool.New_ArrayList(new string[]
            {
                "'ahuber'", 
                "'algebraic'", 
                "'atukey'", 
                "'geohuber'", 
                "'geometric'", 
                "'geotukey'" 
            });

            result.Name = "fit_line_contour_xld";
            result.Execute += Execute_Fit_Line_Contour_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.String, "algorithm", "algorithm", "", "", null);
            result.In.Add(emValue_Type.Integer, "maxNumPoints", "maxNumPoints", "", "", null);
            result.In.Add(emValue_Type.Integer, "clippingEndPoints", "clippingEndPoints", "", "", null);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "", null);
            result.In.Add(emValue_Type.Double, "clippingFactor", "clippingFactor", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "rowBegin", "rowBegin", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "colBegin", "colBegin", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "rowEnd", "rowEnd", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "colEnd", "colEnd", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "nr", "nr", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "nc", "nc", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "dist", "dist", "", "", null);
            return result;
        }
        private bool Execute_Fit_Line_Contour_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;
            int in4_obj = 0;
            int in5_obj = 0;
            double in6_obj = 0;
            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;
            TTool_Value_HTuple out5_obj = null;
            TTool_Value_HTuple out6_obj = null;
            TTool_Value_HTuple out7_obj = null;

            if (param_list.Length == 14 && param_list[0] == "fit_line_contour_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);

                out1_obj = tool_values.Add_HTuple(param_list[7]);
                out2_obj = tool_values.Add_HTuple(param_list[8]);
                out3_obj = tool_values.Add_HTuple(param_list[9]);
                out4_obj = tool_values.Add_HTuple(param_list[10]);
                out5_obj = tool_values.Add_HTuple(param_list[11]);
                out6_obj = tool_values.Add_HTuple(param_list[12]);
                out7_obj = tool_values.Add_HTuple(param_list[13]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        in1_obj.FitLineContourXld(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj,
                                                    out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value,
                                                    out out5_obj.Value, out out6_obj.Value, out out7_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Fit_Rectangle2_Contour_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList algorithm_list = ArrayList_Tool.New_ArrayList(new string[]
            {
                "'ahuber'", 
                "'algebraic'", 
                "'atukey'", 
                "'geohuber'", 
                "'geometric'", 
                "'geotukey'" 
            });

            result.Name = "fit_rectangle2_contour_xld";
            result.Execute += Execute_Fit_Rectangle2_Contour_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.String, "algorithm", "algorithm", "", "", null);
            result.In.Add(emValue_Type.Integer, "maxNumPoints", "maxNumPoints", "", "", null);
            result.In.Add(emValue_Type.Double, "maxClosureDist", "maxClosureDist", "", "", null);
            result.In.Add(emValue_Type.Integer, "clippingEndPoints", "clippingEndPoints", "", "", null);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "", null);
            result.In.Add(emValue_Type.Double, "clippingFactor", "clippingFactor", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "col", "col", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "phi", "phi", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "length1", "length1", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "length2", "length2", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "pointOrder", "pointOrder", "", "", null);
            return result;
        }
        private bool Execute_Fit_Rectangle2_Contour_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;
            double in4_obj = 0;
            int in5_obj = 0;
            int in6_obj = 0;
            double in7_obj = 0;
            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;
            TTool_Value_HTuple out5_obj = null;
            TTool_Value_HTuple out6_obj = null;

            if (param_list.Length == 14 && param_list[0] == "fit_rectangle2_contour_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);
                in6_obj = tool_values.Get_Value_Integer(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);

                out1_obj = tool_values.Add_HTuple(param_list[8]);
                out2_obj = tool_values.Add_HTuple(param_list[9]);
                out3_obj = tool_values.Add_HTuple(param_list[10]);
                out4_obj = tool_values.Add_HTuple(param_list[11]);
                out5_obj = tool_values.Add_HTuple(param_list[12]);
                out6_obj = tool_values.Add_HTuple(param_list[13]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        in1_obj.FitRectangle2ContourXld(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj,
                                                    out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value,
                                                    out out5_obj.Value, out out6_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Fit_Surface_First_Order()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList algorithm_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'huber'", 
                                       "'regression'",
                                       "'tukey'"  });

            result.Name = "fit_surface_first_order";
            result.Execute += Execute_Fit_Surface_First_Order;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.String, "algorithm", "algorithm", "", "'regression'", algorithm_list);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "5", null);
            result.In.Add(emValue_Type.Double, "clippingFactor", "clippingFactor", "", "2", null);

            result.Out.Add(emValue_Type.Double, "Out Alpha", "Out Alpha", "", "", null);
            result.Out.Add(emValue_Type.Double, "Out Beta", "Out Beta", "", "", null);
            result.Out.Add(emValue_Type.Double, "Out Gamma", "Out Gamma", "", "", null);

            return result;
        }
        private bool Execute_Fit_Surface_First_Order(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HRegion in2_obj = null;
            string in3_obj = "";
            int in4_obj = 0;
            double in5_obj = 0;

            TTool_Value_Double out1_obj = null;
            TTool_Value_Double out2_obj = null;
            TTool_Value_Double out3_obj = null;

            if (param_list.Length == 9 && param_list[0] == "fit_surface_first_order")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);

                out1_obj = tool_values.Add_Double(param_list[6]);
                out2_obj = tool_values.Add_Double(param_list[7]);
                out3_obj = tool_values.Add_Double(param_list[8]);
                if (in1_obj != null && in2_obj != null &&
                    out1_obj != null && out2_obj != null && out3_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.FitSurfaceFirstOrder(in2_obj, in3_obj, in4_obj, in5_obj, out out2_obj.Value, out out3_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Fit_Surface_Second_Order()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList algorithm_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'huber'", 
                                       "'regression'",
                                       "'tukey'"  });

            result.Name = "fit_surface_second_order";
            result.Execute += Execute_Fit_Surface_Second_Order;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.String, "algorithm", "algorithm", "", "'regression'", algorithm_list);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "5", null);
            result.In.Add(emValue_Type.Double, "clippingFactor", "clippingFactor", "", "2", null);

            result.Out.Add(emValue_Type.Double, "Out Alpha", "Out Alpha", "", "", null);
            result.Out.Add(emValue_Type.Double, "Out Beta", "Out Beta", "", "", null);
            result.Out.Add(emValue_Type.Double, "Out Gamma", "Out Gamma", "", "", null);
            result.Out.Add(emValue_Type.Double, "Out Delta", "Out Delta", "", "", null);
            result.Out.Add(emValue_Type.Double, "Out Epsilon", "Out Epsilon", "", "", null);
            result.Out.Add(emValue_Type.Double, "Out Zeta", "Out Zeta", "", "", null);
            return result;
        }
        private bool Execute_Fit_Surface_Second_Order(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HRegion in2_obj = null;
            string in3_obj = "";
            int in4_obj = 0;
            double in5_obj = 0;

            TTool_Value_Double out1_obj = null;
            TTool_Value_Double out2_obj = null;
            TTool_Value_Double out3_obj = null;
            TTool_Value_Double out4_obj = null;
            TTool_Value_Double out5_obj = null;
            TTool_Value_Double out6_obj = null;

            if (param_list.Length == 12 && param_list[0] == "fit_surface_first_order")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);

                out1_obj = tool_values.Add_Double(param_list[6]);
                out2_obj = tool_values.Add_Double(param_list[7]);
                out3_obj = tool_values.Add_Double(param_list[8]);
                out4_obj = tool_values.Add_Double(param_list[9]);
                out5_obj = tool_values.Add_Double(param_list[10]);
                out6_obj = tool_values.Add_Double(param_list[11]);
                if (in1_obj != null && in2_obj != null &&
                    out1_obj != null && out2_obj != null && out3_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.FitSurfaceSecondOrder(in2_obj, in3_obj, in4_obj, in5_obj,
                                                                       out out2_obj.Value, out out3_obj.Value, out out4_obj.Value, out out5_obj.Value, out out6_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Fitting()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "fitting";
            result.User_Define = false;
            result.Execute += Execute_Fitting;
            result.In.Add(emValue_Type.Region, "In_Region1", "In_Region1", "", "", null);
            result.In.Add(emValue_Type.Region, "In_Region2", "In_Region2", "", "", null);


            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Fitting(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "fitting")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Fitting(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Frei_Amp()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "frei_amp";
            result.Execute += Execute_Frei_Amp;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Frei_Amp(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "frei_amp")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.FreiAmp();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Frei_Dir()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "frei_dir";
            result.Execute += Execute_Frei_Dir;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Out Image Amp", "Out Image Amp", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out Image Dir", "Out Image Dir", "", "", null);
            return result;
        }
        private bool Execute_Frei_Dir(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "frei_dir")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                out2_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.FreiDir(out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Full_Domain()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "full_domain";
            result.Execute += Execute_Full_Domain;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Full_Domain(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;
            if (param_list.Length == 3 && param_list[0] == "full_domain")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.FullDomain();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Fuzzy_Entropy()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "fuzzy_entropy";
            result.Execute += Execute_Fuzzy_Entropy;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Region, "regions", "regions", "", "", null);
            result.In.Add(emValue_Type.Integer, "apar", "apar", "", "", null);
            result.In.Add(emValue_Type.Integer, "cpar", "cpar", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "Out Entropy", "Out Entropy", "", "", null);
            return result;
        }
        private bool Execute_Fuzzy_Entropy(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HRegion in2_obj = null;
            int in3_obj = 0;
            int in4_obj = 0;

            TTool_Value_HTuple out1_obj = null;
            if (param_list.Length == 6 && param_list[0] == "fuzzy_entropy")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_HTuple(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.FuzzyEntropy(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Fuzzy_Measure_Pairing()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList transition_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "'all'", 
                                        "'negative'", 
                                        "'positive'"  });

            result.Name = "fuzzy_measure_pairing";
            result.Execute += Execute_Fuzzy_Measure_Pairing;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Measure, "Measure", "Measure", "", "", null);
            result.In.Add(emValue_Type.Double, "sigma", "sigma", "", "1", null);
            result.In.Add(emValue_Type.Double, "ampThresh", "ampThresh", "", "30", null);
            result.In.Add(emValue_Type.Double, "fuzzyThresh", "fuzzyThresh", "", "0.5", null);
            result.In.Add(emValue_Type.String, "transition", "transition", "", "'all'", transition_list);
            result.In.Add(emValue_Type.String, "pairing", "pairing", "", "'no_restriction'", null);
            result.In.Add(emValue_Type.Integer, "numPairs", "numPairs", "", "10", null);

            result.Out.Add(emValue_Type.HTuple, "Out rowEdgeFirst", "Out rowEdgeFirst", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out columnEdgeFirst", "Out columnEdgeFirst", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out amplitudeFirst", "Out amplitudeFirst", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out rowEdgeSecond", "Out rowEdgeSecond", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out columnEdgeSecond", "Out columnEdgeSecond", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out amplitudeSecond", "Out amplitudeSecond", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out rowPairCenter", "Out rowPairCenter", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out columnPairCenter", "Out columnPairCenter", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out fuzzyScore", "Out fuzzyScore", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out intraDistance", "Out intraDistance", "", "", null);
            return result;
        }
        private bool Execute_Fuzzy_Measure_Pairing(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HMeasure in2_obj = null;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            string in6_obj = "";
            string in7_obj = "";
            int in8_obj = 0;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;
            TTool_Value_HTuple out5_obj = null;
            TTool_Value_HTuple out6_obj = null;
            TTool_Value_HTuple out7_obj = null;
            TTool_Value_HTuple out8_obj = null;
            TTool_Value_HTuple out9_obj = null;
            TTool_Value_HTuple out10_obj = null;

            if (param_list.Length == 19 && param_list[0] == "fuzzy_measure_pairing")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Measure(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);
                in7_obj = tool_values.Get_Value_String(param_list[7]);
                in8_obj = tool_values.Get_Value_Integer(param_list[8]);

                out1_obj = tool_values.Add_HTuple(param_list[9]);
                out2_obj = tool_values.Add_HTuple(param_list[10]);
                out3_obj = tool_values.Add_HTuple(param_list[11]);
                out4_obj = tool_values.Add_HTuple(param_list[12]);
                out5_obj = tool_values.Add_HTuple(param_list[13]);
                out6_obj = tool_values.Add_HTuple(param_list[14]);
                out7_obj = tool_values.Add_HTuple(param_list[15]);
                out8_obj = tool_values.Add_HTuple(param_list[16]);
                out9_obj = tool_values.Add_HTuple(param_list[17]);
                out10_obj = tool_values.Add_HTuple(param_list[18]);
                if (in1_obj != null && in2_obj != null &&
                    out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null && out5_obj != null &&
                    out6_obj != null && out7_obj != null && out8_obj != null && out9_obj != null && out10_obj != null)
                {
                    try
                    {
                        in1_obj.FuzzyMeasurePairing(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj, in8_obj,
                                                    out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value, out out5_obj.Value,
                                                    out out6_obj.Value, out out7_obj.Value, out out8_obj.Value, out out9_obj.Value, out out10_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Fuzzy_Measure_Pairs()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList transition_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "'all'", 
                                        "'negative'", 
                                        "'positive'"  });


            result.Name = "fuzzy_measure_pairs";
            result.Execute += Execute_Fuzzy_Measure_Pairs;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Measure, "Measure", "Measure", "", "", null);
            result.In.Add(emValue_Type.Double, "sigma", "sigma", "", "1", null);
            result.In.Add(emValue_Type.Double, "ampThresh", "ampThresh", "", "30", null);
            result.In.Add(emValue_Type.Double, "fuzzyThresh", "fuzzyThresh", "", "0.5", null);
            result.In.Add(emValue_Type.String, "transition", "transition", "", "'all'", transition_list);


            result.Out.Add(emValue_Type.HTuple, "Out rowEdgeFirst", "Out rowEdgeFirst", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out columnEdgeFirst", "Out columnEdgeFirst", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out amplitudeFirst", "Out amplitudeFirst", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out rowEdgeSecond", "Out rowEdgeSecond", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out columnEdgeSecond", "Out columnEdgeSecond", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out amplitudeSecond", "Out amplitudeSecond", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out rowEdgeCenter", "Out rowEdgeCenter", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out columnEdgeCenter", "Out columnEdgeCenter", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out fuzzyScore", "Out fuzzyScore", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out intraDistance", "Out intraDistance", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Out interDistance", "Out interDistance", "", "", null);
            return result;
        }
        private bool Execute_Fuzzy_Measure_Pairs(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HMeasure in2_obj = null;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            string in6_obj = "";

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;
            TTool_Value_HTuple out5_obj = null;
            TTool_Value_HTuple out6_obj = null;
            TTool_Value_HTuple out7_obj = null;
            TTool_Value_HTuple out8_obj = null;
            TTool_Value_HTuple out9_obj = null;
            TTool_Value_HTuple out10_obj = null;
            TTool_Value_HTuple out11_obj = null;

            if (param_list.Length == 18 && param_list[0] == "fuzzy_measure_pairs")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Measure(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);

                out1_obj = tool_values.Add_HTuple(param_list[7]);
                out2_obj = tool_values.Add_HTuple(param_list[8]);
                out3_obj = tool_values.Add_HTuple(param_list[9]);
                out4_obj = tool_values.Add_HTuple(param_list[10]);
                out5_obj = tool_values.Add_HTuple(param_list[11]);
                out6_obj = tool_values.Add_HTuple(param_list[12]);
                out7_obj = tool_values.Add_HTuple(param_list[13]);
                out8_obj = tool_values.Add_HTuple(param_list[14]);
                out9_obj = tool_values.Add_HTuple(param_list[15]);
                out10_obj = tool_values.Add_HTuple(param_list[16]);
                out11_obj = tool_values.Add_HTuple(param_list[17]);
                if (in1_obj != null && in2_obj != null &&
                    out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null && out5_obj != null &&
                    out6_obj != null && out7_obj != null && out8_obj != null && out9_obj != null && out10_obj != null &&
                    out11_obj != null)
                {
                    try
                    {
                        in1_obj.FuzzyMeasurePairs(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj,
                                                    out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value, out out5_obj.Value,
                                                    out out6_obj.Value, out out7_obj.Value, out out8_obj.Value, out out9_obj.Value, out out10_obj.Value, out out11_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Fuzzy_Perimeter()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "fuzzy_perimeter";
            result.Execute += Execute_Fuzzy_Perimeter;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "apar", "apar", "", "0", null);
            result.In.Add(emValue_Type.Integer, "cpar", "cpar", "", "255", null);

            result.Out.Add(emValue_Type.HTuple, "Out Perimeter", "Out Perimeter", "", "", null);
            return result;
        }
        private bool Execute_Fuzzy_Perimeter(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HRegion in2_obj = null;
            int in3_obj = 0;
            int in4_obj = 0;

            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "fuzzy_perimeter")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_HTuple(param_list[5]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        in1_obj.FuzzyPerimeter(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region G
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gamma_Image()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList encode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'false'", 
                                    "'true'" });

            result.Name = "gamma_image";
            result.Execute += Execute_Gamma_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "gamma", "gamma", "", "0.416667", null);
            result.In.Add(emValue_Type.Double, "offset", "offset", "", "0.055", null);
            result.In.Add(emValue_Type.Double, "threshold", "threshold", "", "0.0031308", null);
            result.In.Add(emValue_Type.Double, "maxGray", "maxGray", "", "255", null);
            result.In.Add(emValue_Type.String, "encode", "encode", "", "'true'", encode_list);

            result.Out.Add(emValue_Type.Image, "Out GammaImage", "Out GammaImage", "", "", null);
            return result;
        }
        private bool Execute_Gamma_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            string in6_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 8 && param_list[0] == "gamma_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);

                out1_obj = tool_values.Add_Image(param_list[7]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        in1_obj.GammaImage(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gauss_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gauss_image";
            result.Execute += Execute_Gauss_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "size", "size", "", "5", null);

            result.Out.Add(emValue_Type.Image, "Out Image", "Out Image", "", "", null);
            return result;
        }
        private bool Execute_Gauss_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;

            TTool_Value_Image out1_obj = null;
            if (param_list.Length == 4 && param_list[0] == "gauss_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        in1_obj.GaussImage(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Bandfilter()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList norm_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'n'", 
                                    "'none'"  });
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'dc_center'",
                                  "'dc_edge'",
                                  "'rft'"  });

            result.Name = "gen_bandfilter";
            result.Execute += Execute_Gen_Bandfilter;
            result.In.Add(emValue_Type.Double, "minFrequency", "minFrequency", "", "0.1", null);
            result.In.Add(emValue_Type.Double, "maxFrequency", "maxFrequency", "", "0.2", null);
            result.In.Add(emValue_Type.String, "norm", "norm", "", "'none'", norm_list);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'dc_center'", mode_list);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gen_Bandfilter(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            double in1_obj = 0;
            double in2_obj = 0;
            string in3_obj = "";
            string in4_obj = "";
            int in5_obj = 0;
            int in6_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 8 && param_list[0] == "gen_bandfilter")
            {
                in1_obj = tool_values.Get_Value_Double(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);
                in6_obj = tool_values.Get_Value_Integer(param_list[6]);

                out1_obj = tool_values.Add_Image(param_list[7]);
                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenBandfilter(in1_obj, in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Bandpass()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList norm_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'n'", 
                                    "'none'"  });
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'dc_center'",
                                  "'dc_edge'",
                                  "'rft'"  });

            result.Name = "gen_bandpass";
            result.Execute += Execute_Gen_Bandpass;
            result.In.Add(emValue_Type.Double, "minFrequency", "minFrequency", "", "0.1", null);
            result.In.Add(emValue_Type.Double, "maxFrequency", "maxFrequency", "", "0.2", null);
            result.In.Add(emValue_Type.String, "norm", "norm", "", "'none'", norm_list);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'dc_center'", mode_list);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gen_Bandpass(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            double in1_obj = 0;
            double in2_obj = 0;
            string in3_obj = "";
            string in4_obj = "";
            int in5_obj = 0;
            int in6_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 8 && param_list[0] == "gen_bandpass")
            {
                in1_obj = tool_values.Get_Value_Double(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);
                in6_obj = tool_values.Get_Value_Integer(param_list[6]);

                out1_obj = tool_values.Add_Image(param_list[7]);
                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenBandpass(in1_obj, in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Checker_Region()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_checker_region";
            result.User_Define = false;
            result.Execute += Execute_Gen_Checker_Region;
            result.In.Add(emValue_Type.Integer, "widthRegion", "widthRegion", "", "511", null);
            result.In.Add(emValue_Type.Integer, "heightRegion", "heightRegion", "", "511", null);
            result.In.Add(emValue_Type.Integer, "widthPattern", "widthPattern", "", "64", null);
            result.In.Add(emValue_Type.Integer, "heightPattern", "heightPattern", "", "64", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Gen_Checker_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            int in1_obj = 0;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "gen_checker_region")
            {
                in1_obj = tool_values.Get_Value_Integer(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);

                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenCheckerRegion(in1_obj, in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Circle()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_circle";
            result.User_Define = false;
            result.Execute += Execute_Gen_Circle;
            result.In.Add(emValue_Type.Double, "row", "row", "", "200", null);
            result.In.Add(emValue_Type.Double, "col", "col", "", "200", null);
            result.In.Add(emValue_Type.Double, "radius", "radius", "", "100", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Gen_Circle(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            double in1_obj = 0;
            double in2_obj = 0;
            double in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "gen_circle")
            {
                in1_obj = tool_values.Get_Value_Double(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);

                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenCircle(in1_obj, in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Circle_Contour_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_circle_contour_xld";
            result.Execute += Execute_Gen_Circle_Contour_Xld;
            result.In.Add(emValue_Type.Double, "row", "row", "", "", null);
            result.In.Add(emValue_Type.Double, "column", "column", "", "", null);
            result.In.Add(emValue_Type.Double, "radius", "radius", "", "", null);
            result.In.Add(emValue_Type.Double, "startPhi", "startPhi", "", "", null);
            result.In.Add(emValue_Type.Double, "endPhi", "endPhi", "", "", null);
            result.In.Add(emValue_Type.String, "pointOrder", "pointOrder", "", "", null);
            result.In.Add(emValue_Type.Double, "resolution", "resolution", "", "", null);

            result.Out.Add(emValue_Type.XLD, "Out_XLD", "Out_XLD", "", "", null);
            return result;
        }
        private bool Execute_Gen_Circle_Contour_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            double in1_obj = 0;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            string in6_obj = "";
            double in7_obj = 0;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 9 && param_list[0] == "gen_circle_contour_xld")
            {
                in1_obj = tool_values.Get_Value_Double(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);

                out1_obj = tool_values.Add_XLD(param_list[8]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        ((HXLDCont)out1_obj.Value).GenCircleContourXld(in1_obj, in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Contour_Nurbs_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_contour_nurbs_xld";
            result.Execute += Execute_Gen_Contour_Nurbs_Xld;
            result.In.Add(emValue_Type.HTuple, "rows", "rows", "", "", null);
            result.In.Add(emValue_Type.HTuple, "cols", "cols", "", "", null);
            result.In.Add(emValue_Type.HTuple, "knots", "knots", "", "", null);
            result.In.Add(emValue_Type.HTuple, "weights", "weights", "", "", null);
            result.In.Add(emValue_Type.Integer, "degree", "degree", "", "", null);
            result.In.Add(emValue_Type.HTuple, "maxError", "maxError", "", "", null);
            result.In.Add(emValue_Type.HTuple, "maxDistance", "maxDistance", "", "", null);

            result.Out.Add(emValue_Type.XLD, "Out_XLD", "Out_XLD", "", "", null);
            return result;
        }
        private bool Execute_Gen_Contour_Nurbs_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HTuple in1_obj = null;
            HTuple in2_obj = null;
            HTuple in3_obj = null;
            HTuple in4_obj = null;
            int in5_obj = 0;
            HTuple in6_obj = null;
            HTuple in7_obj = null;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 9 && param_list[0] == "gen_contour_nurbs_xld")
            {
                in1_obj = tool_values.Get_Value_HTuple(param_list[1]);
                in2_obj = tool_values.Get_Value_HTuple(param_list[2]);
                in3_obj = tool_values.Get_Value_HTuple(param_list[3]);
                in4_obj = tool_values.Get_Value_HTuple(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);
                in6_obj = tool_values.Get_Value_HTuple(param_list[6]);
                in7_obj = tool_values.Get_Value_HTuple(param_list[7]);

                out1_obj = tool_values.Add_XLD(param_list[8]);

                if (in1_obj != null && in2_obj != null && in3_obj != null && in4_obj != null && in5_obj != null && in5_obj != null && in6_obj != null && out1_obj != null)
                {
                    try
                    {
                        ((HXLDCont)out1_obj.Value).GenContourNurbsXld(in1_obj, in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Contour_Polygon_Rounded_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_contour_polygon_rounded_xld";
            result.Execute += Execute_Gen_Contour_Polygon_Rounded_Xld;
            result.In.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.In.Add(emValue_Type.HTuple, "col", "col", "", "", null);
            result.In.Add(emValue_Type.HTuple, "radius", "radius", "", "", null);
            result.In.Add(emValue_Type.HTuple, "samplingInterval", "samplingInterval", "", "", null);

            result.Out.Add(emValue_Type.XLD, "Out_XLD", "Out_XLD", "", "", null);
            return result;
        }
        private bool Execute_Gen_Contour_Polygon_Rounded_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HTuple in1_obj = null;
            HTuple in2_obj = null;
            HTuple in3_obj = null;
            HTuple in4_obj = null;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "gen_contour_polygon_rounded_xld")
            {
                in1_obj = tool_values.Get_Value_HTuple(param_list[1]);
                in2_obj = tool_values.Get_Value_HTuple(param_list[2]);
                in3_obj = tool_values.Get_Value_HTuple(param_list[3]);
                in4_obj = tool_values.Get_Value_HTuple(param_list[4]);

                out1_obj = tool_values.Add_XLD(param_list[5]);

                if (in1_obj != null && in2_obj != null && in3_obj != null && in4_obj != null && out1_obj != null)
                {
                    try
                    {
                        ((HXLDCont)out1_obj.Value).GenContourPolygonRoundedXld(in1_obj, in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Contour_Polygon_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_contour_polygon_xld";
            result.Execute += Execute_Gen_Contour_Polygon_Xld;
            result.In.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.In.Add(emValue_Type.HTuple, "col", "col", "", "", null);

            result.Out.Add(emValue_Type.XLD, "Out_XLD", "Out_XLD", "", "", null);
            return result;
        }
        private bool Execute_Gen_Contour_Polygon_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HTuple in1_obj = null;
            HTuple in2_obj = null;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "gen_contour_polygon_xld")
            {
                in1_obj = tool_values.Get_Value_HTuple(param_list[1]);
                in2_obj = tool_values.Get_Value_HTuple(param_list[2]);

                out1_obj = tool_values.Add_XLD(param_list[3]);

                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        ((HXLDCont)out1_obj.Value).GenPolygonsXld(in1_obj, in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Cross_Contour_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_cross_contour_xld";
            result.Execute += Execute_Gen_Cross_Contour_Xld;
            result.In.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.In.Add(emValue_Type.HTuple, "col", "col", "", "", null);
            result.In.Add(emValue_Type.HTuple, "size", "size", "", "", null);
            result.In.Add(emValue_Type.HTuple, "angle", "angle", "", "", null);

            result.Out.Add(emValue_Type.XLD, "Out_XLD", "Out_XLD", "", "", null);
            return result;
        }
        private bool Execute_Gen_Cross_Contour_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HTuple in1_obj = null;
            HTuple in2_obj = null;
            HTuple in3_obj = null;
            HTuple in4_obj = null;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "gen_cross_contour_xld")
            {
                in1_obj = tool_values.Get_Value_HTuple(param_list[1]);
                in2_obj = tool_values.Get_Value_HTuple(param_list[2]);
                in3_obj = tool_values.Get_Value_HTuple(param_list[3]);
                in4_obj = tool_values.Get_Value_HTuple(param_list[4]);

                out1_obj = tool_values.Add_XLD(param_list[5]);

                if (in1_obj != null && in2_obj != null && in3_obj != null && in4_obj != null && out1_obj != null)
                {
                    try
                    {
                        ((HXLDCont)out1_obj.Value).GenCrossContourXld(in1_obj, in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Contour_Region_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'border'",
                                  "'border_holes'",
                                  "'center'" });

            result.Name = "gen_contour_region_xld";
            result.User_Define = false;
            result.Execute += Execute_Gen_Contour_Region_Xld;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'border'", mode_list);

            result.Out.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            return result;
        }
        private bool Execute_Gen_Contour_Region_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            string in2_obj = "";

            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "gen_contour_region_xld")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                out1_obj = tool_values.Add_XLD(param_list[3]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GenContourRegionXld(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Contours_Skeleton_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'filter'",
                                  "'generalize1'",
                                  "'generalize2'" });

            result.Name = "gen_contours_skeleton_xld";
            result.User_Define = false;
            result.Execute += Execute_Gen_Contours_Skeleton_Xld;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "length", "length", "", "1", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'filter'", mode_list);

            result.Out.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            return result;
        }
        private bool Execute_Gen_Contours_Skeleton_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            int in2_obj = 0;
            string in3_obj = "";

            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "gen_contours_skeleton_xld")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_XLD(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GenContoursSkeletonXld(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Derivative_Filter()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList derivative_list = ArrayList_Tool.New_ArrayList(new String[]{
                                        "'x'", 
                                        "'y'",
                                        "'xx'",
                                        "'xy'",
                                        "'yy'",
                                        "'xxx'",
                                        "'xxy'", 
                                        "'xyy'",
                                        "'yyy'"  });
            ArrayList norm_list = ArrayList_Tool.New_ArrayList(new String[]{
                                  "'n'", 
                                  "'none'"  });
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new String[]{
                                  "'dc_center'",
                                  "'dc_edge'", 
                                  "'rft'"  });


            result.Name = "gen_derivative_filter";
            result.User_Define = false;
            result.Execute += Execute_Gen_Derivative_Filter;
            result.In.Add(emValue_Type.String, "derivative", "derivative", "", "'x'", derivative_list);
            result.In.Add(emValue_Type.Integer, "exponent", "exponent", "", "1", null);
            result.In.Add(emValue_Type.String, "norm", "norm", "", "'none'", norm_list);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'dc_center'", mode_list);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gen_Derivative_Filter(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            string in1_obj = "";
            int in2_obj = 0;
            string in3_obj = "";
            string in4_obj = "";
            int in5_obj = 0;
            int in6_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 9 && param_list[0] == "gen_derivative_filter")
            {
                in1_obj = tool_values.Get_Value_String(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[5]);
                in5_obj = tool_values.Get_Value_Integer(param_list[6]);
                in6_obj = tool_values.Get_Value_Integer(param_list[7]);

                out1_obj = tool_values.Add_Image(param_list[8]);

                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenDerivativeFilter(in1_obj, in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Disc_Se()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList type_list = ArrayList_Tool.New_ArrayList(new String[]{
                                  "'byte'", 
                                  "'real'",
                                  "'uint2'" });

            result.Name = "gen_disc_se";
            result.User_Define = false;
            result.Execute += Execute_Gen_Disc_Se;
            result.In.Add(emValue_Type.String, "type", "type", "", "'byte'", type_list);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "5", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "5", null);
            result.In.Add(emValue_Type.Double, "smax", "smax", "", "0", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gen_Disc_Se(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            string in1_obj = "";
            int in2_obj = 0;
            int in3_obj = 0;
            double in4_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "gen_disc_se")
            {
                in1_obj = tool_values.Get_Value_String(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);

                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenDiscSe(in1_obj, in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Ellipse()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_ellipse";
            result.User_Define = false;
            result.Execute += Execute_Gen_Ellipse;
            result.In.Add(emValue_Type.Double, "row", "row", "", "200", null);
            result.In.Add(emValue_Type.Double, "col", "col", "", "200", null);
            result.In.Add(emValue_Type.Double, "phi", "phi", "", "0", null);
            result.In.Add(emValue_Type.Double, "radius1", "radius1", "", "100", null);
            result.In.Add(emValue_Type.Double, "radius2", "radius2", "", "60", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Gen_Ellipse(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            double in1_obj = 0;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "gen_ellipse")
            {
                in1_obj = tool_values.Get_Value_Double(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);

                out1_obj = tool_values.Add_Region(param_list[6]);

                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenEllipse(in1_obj, in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Ellipse_Contour_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_ellipse_contour_xld";
            result.Execute += Execute_Gen_Ellipse_Contour_Xld;
            result.In.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.In.Add(emValue_Type.HTuple, "col", "col", "", "", null);
            result.In.Add(emValue_Type.HTuple, "phi", "phi", "", "", null);
            result.In.Add(emValue_Type.HTuple, "radius1", "radius1", "", "", null);
            result.In.Add(emValue_Type.HTuple, "radius2", "radius2", "", "", null);
            result.In.Add(emValue_Type.HTuple, "startPhi", "startPhi", "", "", null);
            result.In.Add(emValue_Type.HTuple, "endPhi", "endPhi", "", "", null);
            result.In.Add(emValue_Type.HTuple, "pointOrder", "pointOrder", "", "", null);
            result.In.Add(emValue_Type.Double, "resolution", "resolution", "", "", null);

            result.Out.Add(emValue_Type.XLD, "Out_XLD", "Out_XLD", "", "", null);
            return result;
        }
        private bool Execute_Gen_Ellipse_Contour_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HTuple in1_obj = null;
            HTuple in2_obj = null;
            HTuple in3_obj = null;
            HTuple in4_obj = null;
            HTuple in5_obj = null;
            HTuple in6_obj = null;
            HTuple in7_obj = null;
            HTuple in8_obj = null;
            double in9_obj = 0;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 11 && param_list[0] == "gen_ellipse_contour_xld")
            {
                in1_obj = tool_values.Get_Value_HTuple(param_list[1]);
                in2_obj = tool_values.Get_Value_HTuple(param_list[2]);
                in3_obj = tool_values.Get_Value_HTuple(param_list[3]);
                in4_obj = tool_values.Get_Value_HTuple(param_list[4]);
                in5_obj = tool_values.Get_Value_HTuple(param_list[5]);
                in6_obj = tool_values.Get_Value_HTuple(param_list[6]);
                in7_obj = tool_values.Get_Value_HTuple(param_list[7]);
                in8_obj = tool_values.Get_Value_HTuple(param_list[8]);
                in9_obj = tool_values.Get_Value_Double(param_list[9]);

                out1_obj = tool_values.Add_XLD(param_list[10]);

                if (in1_obj != null && in2_obj != null && in3_obj != null && in4_obj != null &&
                    in5_obj != null && in6_obj != null && in7_obj != null && in8_obj != null && in9_obj != null && out1_obj != null)
                {
                    try
                    {
                        ((HXLDCont)out1_obj.Value).GenEllipseContourXld(in1_obj, in2_obj, in3_obj, in4_obj, in5_obj,
                                                                        in6_obj, in7_obj, in8_obj, in9_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Empty_Region()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_empty_region";
            result.User_Define = false;
            result.Execute += Execute_Gen_Empty_Region;

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Gen_Empty_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 2 && param_list[0] == "gen_empty_region")
            {
                out1_obj = tool_values.Add_Region(param_list[1]);

                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenEmptyRegion();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Filter_Mask()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList filterMask_list = ArrayList_Tool.New_ArrayList(new String[]{
                                        "'gauss'", 
                                        "'laplace4'", 
                                        "'laplace8'",
                                        "'lowpas_3_3'", 
                                        "'lowpas_5_5'",
                                        "'lowpas_7_7'",
                                        "'lowpas_9_9'", 
                                        "'sobel_c'",
                                        "'sobel_l'" });

            result.Name = "gen_filter_mask";
            result.User_Define = false;
            result.Execute += Execute_Gen_Filter_Mask;
            result.In.Add(emValue_Type.String, "filterMask", "filterMask", "", "'gauss'", filterMask_list);
            result.In.Add(emValue_Type.Double, "scale", "scale", "", "1", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gen_Filter_Mask(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            string in1_obj = "";
            double in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "gen_filter_mask")
            {
                in1_obj = tool_values.Get_Value_String(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);

                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenFilterMask(in1_obj, in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Gabor()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList norm_list = ArrayList_Tool.New_ArrayList(new String[]{
                                  "'n'", 
                                  "'none'"  });
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new String[]{
                                  "'dc_center'", 
                                  "'dc_edge'"  });

            result.Name = "gen_gabor";
            result.User_Define = false;
            result.Execute += Execute_Gen_Gabor;
            result.In.Add(emValue_Type.Double, "angle", "angle", "", "1.4", null);
            result.In.Add(emValue_Type.Double, "frequency", "frequency", "", "0.4", null);
            result.In.Add(emValue_Type.Double, "bandwidth", "bandwidth", "", "1", null);
            result.In.Add(emValue_Type.Double, "orientation", "orientation", "", "1.5", null);
            result.In.Add(emValue_Type.String, "norm", "norm", "", "'none'", norm_list);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'dc_center'", mode_list);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gen_Gabor(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            double in1_obj = 0;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            string in5_obj = "";
            string in6_obj = "";
            int in7_obj = 0;
            int in8_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 10 && param_list[0] == "gen_gabor")
            {
                in1_obj = tool_values.Get_Value_Double(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_String(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);
                in7_obj = tool_values.Get_Value_Integer(param_list[7]);
                in8_obj = tool_values.Get_Value_Integer(param_list[8]);

                out1_obj = tool_values.Add_Image(param_list[9]);

                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenGabor(in1_obj, in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj, in8_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Gauss_Filter()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList norm_list = ArrayList_Tool.New_ArrayList(new String[]
            {
                "'n'", 
                "'none'"  
            });
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new String[]
            {
                "'dc_center'", 
                "'dc_edge'", 
                "'rft'"
            });

            result.Name = "gen_gauss_filter";
            result.User_Define = false;
            result.Execute += Execute_Gen_Gauss_Filter;
            result.In.Add(emValue_Type.Double, "sigma1", "sigma1", "", "1", null);
            result.In.Add(emValue_Type.Double, "sigma2", "sigma2", "", "1", null);
            result.In.Add(emValue_Type.Double, "phi", "phi", "", "0", null);
            result.In.Add(emValue_Type.String, "norm", "norm", "", "'none'", norm_list);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'dc_center'", mode_list);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gen_Gauss_Filter(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            double in1_obj = 0;
            double in2_obj = 0;
            double in3_obj = 0;
            string in4_obj = "";
            string in5_obj = "";
            int in6_obj = 0;
            int in7_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 9 && param_list[0] == "gen_gauss_filter")
            {
                in1_obj = tool_values.Get_Value_Double(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);
                in5_obj = tool_values.Get_Value_String(param_list[5]);
                in6_obj = tool_values.Get_Value_Integer(param_list[6]);
                in7_obj = tool_values.Get_Value_Integer(param_list[7]);

                out1_obj = tool_values.Add_Image(param_list[8]);

                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenGaussFilter(in1_obj, in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Gauss_Pyramid()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new String[]{
                                  "'constant'",
                                  "'max'",
                                  "'min'", 
                                  "'nearest_neighbor'",
                                  "'weighted'" });

            result.Name = "gen_gauss_pyramid";
            result.User_Define = false;
            result.Execute += Execute_Gen_Gauss_Pyramid;
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'weighted'", mode_list);
            result.In.Add(emValue_Type.Double, "scale", "scale", "", "0.5", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gen_Gauss_Pyramid(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            string in1_obj = "";
            double in2_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "gen_gauss_pyramid")
            {
                in1_obj = tool_values.Get_Value_String(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);

                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenGaussPyramid(in1_obj, in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Grid_Rectification_Map()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList rotation_list = ArrayList_Tool.New_ArrayList(new String[]{
                                      "0",
                                      "90",
                                      "180",
                                      "270",
                                      "'auto'"  });
            ArrayList mapType_list = ArrayList_Tool.New_ArrayList(new String[]{
                                     "'bilinear'",
                                     "'coord_map_sub_pix'" });

            result.Name = "gen_grid_rectification_map";
            result.User_Define = false;
            result.Execute += Execute_Gen_Grid_Rectification_Map;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.XLD, "connectingLines", "connectingLines", "", "", null);
            result.In.Add(emValue_Type.Integer, "gridSpacing", "gridSpacing", "", "", null);
            result.In.Add(emValue_Type.String, "rotation", "rotation", "", "'auto'", rotation_list);
            result.In.Add(emValue_Type.HTuple, "row", "row", "", "512", null);
            result.In.Add(emValue_Type.HTuple, "col", "col", "", "512", null);
            result.In.Add(emValue_Type.String, "mapType", "mapType", "", "'bilinear'", mapType_list);

            result.Out.Add(emValue_Type.Image, "Map", "Map", "", "", null);
            result.Out.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            return result;
        }
        private bool Execute_Gen_Grid_Rectification_Map(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HXLD in2_obj = null;
            int in3_obj = 0;
            string in4_obj = "";
            HTuple in5_obj = null;
            HTuple in6_obj = null;
            string in7_obj = "";

            TTool_Value_Image out1_obj = null;
            TTool_Value_XLD out2_obj = null;

            if (param_list.Length == 10 && param_list[0] == "gen_grid_rectification_map")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_XLD(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);
                in5_obj = tool_values.Get_Value_HTuple(param_list[5]);
                in6_obj = tool_values.Get_Value_HTuple(param_list[6]);
                in7_obj = tool_values.Get_Value_String(param_list[7]);

                out1_obj = tool_values.Add_Image(param_list[8]);
                out2_obj = tool_values.Add_XLD(param_list[9]);

                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GenGridRectificationMap(in2_obj, out out2_obj.Value, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Grid_Region()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList type_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                  "'lines'", "'points'" });

            result.Name = "gen_grid_region";
            result.User_Define = false;
            result.Execute += Execute_Gen_Grid_Region;
            result.In.Add(emValue_Type.Integer, "rowSteps", "rowSteps", "", "10", null);
            result.In.Add(emValue_Type.Integer, "columnSteps", "columnSteps", "", "10", null);
            result.In.Add(emValue_Type.String, "type", "type", "", "'lines'", type_list);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Gen_Grid_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            int in1_obj = 0;
            int in2_obj = 0;
            string in3_obj = "";
            int in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "gen_grid_region")
            {
                in1_obj = tool_values.Get_Value_Integer(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Region(param_list[6]);

                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenGridRegion(in1_obj, in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Highpass()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList norm_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'n'", 
                                    "'none'"  });
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'dc_center'",
                                  "'dc_edge'",
                                  "'rft'"  });

            result.Name = "gen_highpass";
            result.Execute += Execute_Gen_Highpass;
            result.In.Add(emValue_Type.Double, "frequency", "frequency", "", "0.1", null);
            result.In.Add(emValue_Type.String, "norm", "norm", "", "'none'", norm_list);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'dc_center'", mode_list);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gen_Highpass(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            double in1_obj = 0;
            string in2_obj = "";
            string in3_obj = "";
            int in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "gen_highpass")
            {
                in1_obj = tool_values.Get_Value_Double(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);
                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenHighpass(in1_obj, in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Image_Const()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList type_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'byte'", 
                                  "'complex'", 
                                  "'cyclic'", 
                                  "'direction'", 
                                  "'int1'", 
                                  "'int2'", 
                                  "'int4'", 
                                  "'int8'", 
                                  "'real'",
                                  "'uint2'",
                                  "'vector_field_absolute'",
                                  "'vector_field_relative'" });

            result.Name = "gen_image_const";
            result.Execute += Execute_Gen_Image_Const;
            result.In.Add(emValue_Type.String, "type", "type", "", "'byte'", type_list);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gen_Image_Const(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            string in1_obj = "";
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "gen_image_const")
            {
                in1_obj = tool_values.Get_Value_String(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenImageConst(in1_obj, in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Image_Gray_Ramp()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_image_gray_ramp";
            result.Execute += Execute_Gen_Image_Gray_Ramp;
            result.In.Add(emValue_Type.Double, "alpha", "alpha", "", "'1", null);
            result.In.Add(emValue_Type.Double, "beta", "beta", "", "1", null);
            result.In.Add(emValue_Type.Double, "mean", "mean", "", "'128", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "256", null);
            result.In.Add(emValue_Type.Integer, "col", "col", "", "256", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gen_Image_Gray_Ramp(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            double in1_obj = 0;
            double in2_obj = 0;
            double in3_obj = 0;
            int in4_obj = 0;
            int in5_obj = 0;
            int in6_obj = 0;
            int in7_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 9 && param_list[0] == "gen_image_gray_ramp")
            {
                in1_obj = tool_values.Get_Value_Double(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);
                in6_obj = tool_values.Get_Value_Integer(param_list[6]);
                in7_obj = tool_values.Get_Value_Integer(param_list[7]);

                out1_obj = tool_values.Add_Image(param_list[8]);
                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenImageGrayRamp(in1_obj, in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Image_Proto()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_image_proto";
            result.Execute += Execute_Gen_Image_Proto;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "grayval", "grayval", "", "0", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gen_Image_Proto(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            double in2_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "gen_image_proto")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GenImageProto(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Lowpass()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList norm_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'n'", 
                                    "'none'"  });
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'dc_center'",
                                  "'dc_edge'",
                                  "'rft'"  });

            result.Name = "gen_lowpass";
            result.Execute += Execute_Gen_Lowpass;
            result.In.Add(emValue_Type.Double, "frequency", "frequency", "", "0.1", null);
            result.In.Add(emValue_Type.String, "norm", "norm", "", "'none'", norm_list);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'dc_center'", mode_list);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gen_Lowpass(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            double in1_obj = 0;
            string in2_obj = "";
            string in3_obj = "";
            int in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "gen_lowpass")
            {
                in1_obj = tool_values.Get_Value_Double(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);
                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenLowpass(in1_obj, in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Parallel_Contour_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]
            {
                "'gradient'",
                "'contour_normal'", 
                "'regression_normal'"  
            });


            result.Name = "gen_parallel_contour_xld";
            result.Execute += Execute_Gen_Parallel_Contour_Xld;
            result.In.Add(emValue_Type.XLD, "In_XLD", "In_XLD", "", "", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'regression_normal'", mode_list);
            result.In.Add(emValue_Type.Double, "distance", "distance", "", "1", null);

            result.Out.Add(emValue_Type.XLD, "Out_XLD", "Out_XLD", "", "", null);
            return result;
        }
        private bool Execute_Gen_Parallel_Contour_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            string in2_obj = "";
            double in3_obj = 0;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "gen_parallel_contour_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_XLD(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GenParallelContourXld(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Sin_Bandpass()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList norm_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'n'", 
                                    "'none'"  });
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'dc_center'",
                                  "'dc_edge'",
                                  "'rft'"  });

            result.Name = "gen_sin_bandpass";
            result.Execute += Execute_Gen_Sin_Bandpass;
            result.In.Add(emValue_Type.Double, "frequency", "frequency", "", "0.1", null);
            result.In.Add(emValue_Type.String, "norm", "norm", "", "'none'", norm_list);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'dc_center'", mode_list);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gen_Sin_Bandpass(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            double in1_obj = 0;
            string in2_obj = "";
            string in3_obj = "";
            int in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "gen_sin_bandpass")
            {
                in1_obj = tool_values.Get_Value_Double(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);
                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenSinBandpass(in1_obj, in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Std_Bandpass()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList type_list = ArrayList_Tool.New_ArrayList(new string[]{
                                 "'gauss'", 
                                 "'sin'"  });
            ArrayList norm_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'n'", 
                                    "'none'"  });
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'dc_center'",
                                  "'dc_edge'",
                                  "'rft'"  });

            result.Name = "gen_std_bandpass";
            result.Execute += Execute_Gen_Std_Bandpass;
            result.In.Add(emValue_Type.Double, "frequency", "frequency", "", "0.1", null);
            result.In.Add(emValue_Type.Double, "sigma", "sigma", "", "0.1", null);
            result.In.Add(emValue_Type.String, "type", "type", "", "'sin'", type_list);
            result.In.Add(emValue_Type.String, "norm", "norm", "", "'none'", norm_list);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'dc_center'", mode_list);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gen_Std_Bandpass(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            double in1_obj = 0;
            double in2_obj = 0;
            string in3_obj = "";
            string in4_obj = "";
            string in5_obj = "";
            int in6_obj = 0;
            int in7_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 9 && param_list[0] == "gen_std_bandpass")
            {
                in1_obj = tool_values.Get_Value_Double(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);
                in5_obj = tool_values.Get_Value_String(param_list[5]);
                in6_obj = tool_values.Get_Value_Integer(param_list[6]);
                in7_obj = tool_values.Get_Value_Integer(param_list[7]);

                out1_obj = tool_values.Add_Image(param_list[8]);
                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenStdBandpass(in1_obj, in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Random_Region()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_random_region";
            result.User_Define = false;
            result.Execute += Execute_Gen_Random_Region;
            result.In.Add(emValue_Type.Integer, "width", "width", "", "10", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "10", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Gen_Random_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            int in1_obj = 0;
            int in2_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "gen_random_region")
            {
                in1_obj = tool_values.Get_Value_Integer(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if ( out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenRandomRegion(in1_obj, in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Random_Regions()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList type_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                  "'circle'",
                                  "'ellipse'",
                                  "'rectangle1'",
                                  "'rectangle2'",
                                  "'ring'"  });

            result.Name = "gen_random_regions";
            result.User_Define = false;
            result.Execute += Execute_Gen_Random_Regions;
            result.In.Add(emValue_Type.String, "type", "type", "", "'circle'", type_list);
            result.In.Add(emValue_Type.Double, "widthMin", "widthMin", "", "10", null);
            result.In.Add(emValue_Type.Double, "widthMax", "widthMax", "", "20", null);
            result.In.Add(emValue_Type.Double, "heightMin", "heightMin", "", "10", null);
            result.In.Add(emValue_Type.Double, "heightMax", "heightMax", "", "30", null);
            result.In.Add(emValue_Type.Double, "phiMin", "phiMin", "", "-0.7854", null);
            result.In.Add(emValue_Type.Double, "phiMax", "phiMax", "", "0.7854", null);
            result.In.Add(emValue_Type.Integer, "numRegions", "numRegions", "", "100", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Gen_Random_Regions(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            string in1_obj = "";
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;
            double in7_obj = 0;
            int in8_obj = 0;
            int in9_obj = 0;
            int in10_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 12 && param_list[0] == "gen_random_regions")
            {
                in1_obj = tool_values.Get_Value_String(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);
                in8_obj = tool_values.Get_Value_Integer(param_list[8]);
                in9_obj = tool_values.Get_Value_Integer(param_list[9]);
                in10_obj = tool_values.Get_Value_Integer(param_list[10]);

                out1_obj = tool_values.Add_Region(param_list[11]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenRandomRegions(in1_obj, in2_obj, in3_obj, in4_obj, in5_obj,
                                                        in6_obj, in7_obj, in8_obj, in9_obj, in10_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Rectangle1()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_rectangle1";
            result.User_Define = false;
            result.Execute += Execute_Gen_Rectangle1;
            result.In.Add(emValue_Type.Double, "row1", "row1", "", "10", null);
            result.In.Add(emValue_Type.Double, "col1", "col1", "", "10", null);
            result.In.Add(emValue_Type.Double, "row2", "row2", "", "20", null);
            result.In.Add(emValue_Type.Double, "col2", "col2", "", "20", null);


            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Gen_Rectangle1(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            double in1_obj = 0;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;


            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "gen_rectangle1")
            {
                in1_obj = tool_values.Get_Value_Double(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);

                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenRectangle1(in1_obj, in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Rectangle2()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_rectangle2";
            result.User_Define = false;
            result.Execute += Execute_Gen_Rectangle2;
            result.In.Add(emValue_Type.Double, "row", "row", "", "10", null);
            result.In.Add(emValue_Type.Double, "col", "col", "", "10", null);
            result.In.Add(emValue_Type.Double, "phi", "phi", "", "0", null);
            result.In.Add(emValue_Type.Double, "length1", "length1", "", "100", null);
            result.In.Add(emValue_Type.Double, "length2", "length2", "", "20", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Gen_Rectangle2(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            double in1_obj = 0;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;


            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "gen_rectangle2")
            {
                in1_obj = tool_values.Get_Value_Double(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);

                out1_obj = tool_values.Add_Region(param_list[6]);

                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenRectangle2(in1_obj, in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Rectangle2_Contour_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_rectangle2_contour_xld";
            result.Execute += Execute_Gen_Rectangle2_Contour_Xld;
            result.In.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.In.Add(emValue_Type.HTuple, "col", "col", "", "", null);
            result.In.Add(emValue_Type.HTuple, "phi", "phi", "", "", null);
            result.In.Add(emValue_Type.HTuple, "length1", "length1", "", "", null);
            result.In.Add(emValue_Type.HTuple, "length2", "length2", "", "", null);

            result.Out.Add(emValue_Type.XLD, "Out_XLD", "Out_XLD", "", "", null);
            return result;
        }
        private bool Execute_Gen_Rectangle2_Contour_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HTuple in1_obj = null;
            HTuple in2_obj = null;
            HTuple in3_obj = null;
            HTuple in4_obj = null;
            HTuple in5_obj = null;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "gen_rectangle2_contour_xld")
            {
                in1_obj = tool_values.Get_Value_HTuple(param_list[1]);
                in2_obj = tool_values.Get_Value_HTuple(param_list[2]);
                in3_obj = tool_values.Get_Value_HTuple(param_list[3]);
                in4_obj = tool_values.Get_Value_HTuple(param_list[4]);
                in5_obj = tool_values.Get_Value_HTuple(param_list[5]);

                out1_obj = tool_values.Add_XLD(param_list[6]);

                if (in1_obj != null && in2_obj != null && in3_obj != null && in4_obj != null && in5_obj != null && out1_obj != null)
                {
                    try
                    {
                        ((HXLDCont)out1_obj.Value).GenRectangle2ContourXld(in1_obj, in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Region_Contour_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]
            {
                "'filled'", 
                "'margin'" 
            });
            result.Name = "gen_region_contour_xld";
            result.Execute += Execute_Gen_Region_Contour_Xld;
            result.In.Add(emValue_Type.XLD, "In_XLD", "In_XLD", "", "", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'filled'", null);

            result.Out.Add(emValue_Type.Region, "Out_Region", "Out_Region", "", "", null);
            return result;
        }
        private bool Execute_Gen_Region_Contour_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            string in2_obj = "";
            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "gen_region_contour_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GenRegionContourXld(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Region_Histo()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_region_histo";
            result.User_Define = false;
            result.Execute += Execute_Gen_Region_Histo;
            result.In.Add(emValue_Type.HTuple, "histogram", "histogram", "", "", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "255", null);
            result.In.Add(emValue_Type.Integer, "col", "col", "", "255", null);
            result.In.Add(emValue_Type.Integer, "scale", "scale", "", "1", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Gen_Region_Histo(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HTuple in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;


            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "gen_region_histo")
            {
                in1_obj = tool_values.Get_Value_HTuple(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenRegionHisto(in1_obj, in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Region_Hline()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_region_hline";
            result.User_Define = false;
            result.Execute += Execute_Gen_Region_Hline;
            result.In.Add(emValue_Type.Double, "orientation", "orientation", "", "0", null);
            result.In.Add(emValue_Type.Double, "distance", "distance", "", "200", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Gen_Region_Hline(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            double in1_obj = 0;
            double in2_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "gen_region_hline")
            {
                in1_obj = tool_values.Get_Value_Double(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenRegionHline(in1_obj, in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Region_Line()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_region_line";
            result.User_Define = false;
            result.Execute += Execute_Gen_Region_Line;
            result.In.Add(emValue_Type.HTuple, "beginRow", "beginRow", "", "0", null);
            result.In.Add(emValue_Type.HTuple, "beginCol", "beginCol", "", "0", null);
            result.In.Add(emValue_Type.HTuple, "endRow", "endRow", "", "100", null);
            result.In.Add(emValue_Type.HTuple, "endCol", "endCol", "", "100", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Gen_Region_Line(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HTuple in1_obj = null;
            HTuple in2_obj = null;
            HTuple in3_obj = null;
            HTuple in4_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "gen_region_line")
            {
                in1_obj = tool_values.Get_Value_HTuple(param_list[1]);
                in2_obj = tool_values.Get_Value_HTuple(param_list[2]);
                in3_obj = tool_values.Get_Value_HTuple(param_list[3]);
                in4_obj = tool_values.Get_Value_HTuple(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenRegionLine(in1_obj, in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Region_Points()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_region_points";
            result.User_Define = false;
            result.Execute += Execute_Gen_Region_Points;
            result.In.Add(emValue_Type.HTuple, "Row", "Row", "", "0", null);
            result.In.Add(emValue_Type.HTuple, "Col", "Col", "", "0", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Gen_Region_Points(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HTuple in1_obj = null;
            HTuple in2_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "gen_region_points")
            {
                in1_obj = tool_values.Get_Value_HTuple(param_list[1]);
                in2_obj = tool_values.Get_Value_HTuple(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenRegionPoints(in1_obj, in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Region_Polygon()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_region_polygon";
            result.User_Define = false;
            result.Execute += Execute_Gen_Region_Polygon;
            result.In.Add(emValue_Type.HTuple, "Row", "Row", "", "0", null);
            result.In.Add(emValue_Type.HTuple, "Col", "Col", "", "0", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Gen_Region_Polygon(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HTuple in1_obj = null;
            HTuple in2_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "gen_region_polygon")
            {
                in1_obj = tool_values.Get_Value_HTuple(param_list[1]);
                in2_obj = tool_values.Get_Value_HTuple(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenRegionPolygon(in1_obj, in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Region_Polygon_Filled()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_region_polygon_filled";
            result.User_Define = false;
            result.Execute += Execute_Gen_Region_Polygon_Filled;
            result.In.Add(emValue_Type.HTuple, "Row", "Row", "", "0", null);
            result.In.Add(emValue_Type.HTuple, "Col", "Col", "", "0", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Gen_Region_Polygon_Filled(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HTuple in1_obj = null;
            HTuple in2_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "gen_region_polygon_filled")
            {
                in1_obj = tool_values.Get_Value_HTuple(param_list[1]);
                in2_obj = tool_values.Get_Value_HTuple(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenRegionPolygonFilled(in1_obj, in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Region_Runs()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_region_runs";
            result.User_Define = false;
            result.Execute += Execute_Gen_Region_Runs;
            result.In.Add(emValue_Type.HTuple, "Row", "Row", "", "0", null);
            result.In.Add(emValue_Type.HTuple, "columnBegin", "columnBegin", "", "0", null);
            result.In.Add(emValue_Type.HTuple, "columnEnd", "columnEnd", "", "0", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Gen_Region_Runs(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HTuple in1_obj = null;
            HTuple in2_obj = null;
            HTuple in3_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "gen_region_runs")
            {
                in1_obj = tool_values.Get_Value_HTuple(param_list[1]);
                in2_obj = tool_values.Get_Value_HTuple(param_list[2]);
                in3_obj = tool_values.Get_Value_HTuple(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenRegionRuns(in1_obj, in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gen_Struct_Elements()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gen_struct_elements";
            result.User_Define = false;
            result.Execute += Execute_Gen_Struct_Elements;
            result.In.Add(emValue_Type.String, "type", "type", "", "'noise'", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "0", null);
            result.In.Add(emValue_Type.Integer, "col", "col", "", "0", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Gen_Struct_Elements(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            string in1_obj = "";
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "gen_struct_elements")
            {
                in1_obj = tool_values.Get_Value_String(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.GenStructElements(in1_obj, in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Contour_Angle_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList angleMode_list = ArrayList_Tool.New_ArrayList(new string[]
            {
                "'abs'", 
                "'rel'"  
            });
            ArrayList calcMode_list = ArrayList_Tool.New_ArrayList(new string[]
            {
                "'mean'", 
                "'range'", 
                "'regress'"
            });

            result.Name = "get_contour_angle_xld";
            result.Execute += Execute_Get_Contour_Angle_Xld;
            result.In.Add(emValue_Type.XLD, "In_XLD", "In_XLD", "", "", null);
            result.In.Add(emValue_Type.String, "angleMode", "angleMode", "", "'abs'", angleMode_list);
            result.In.Add(emValue_Type.String, "calcMode", "calcMode", "", "'range'", calcMode_list);
            result.In.Add(emValue_Type.Integer, "lookaround", "lookaround", "", "3", null);

            result.Out.Add(emValue_Type.HTuple, "Angles", "Angles", "", "", null);
            return result;
        }
        private bool Execute_Get_Contour_Angle_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            string in2_obj = "";
            string in3_obj = "";
            int in4_obj = 0;
            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "get_contour_angle_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                out1_obj = tool_values.Add_HTuple(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GetContourAngleXld(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Contour_Attrib_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList Name_list = ArrayList_Tool.New_ArrayList(new string[]
            {
                "'angle'", 
                "'edge_direction'", 
                "'width_right'", 
                "'width_left'", 
                "'response'", 
                "'contrast'", 
                "'asymmetry'" 
            });

            result.Name = "get_contour_attrib_xld";
            result.Execute += Execute_Get_Contour_Attrib_Xld;
            result.In.Add(emValue_Type.XLD, "In_XLD", "In_XLD", "", "", null);
            result.In.Add(emValue_Type.String, "Name", "Name", "", "'angle'", Name_list);
            result.Out.Add(emValue_Type.HTuple, "Attrib", "Attrib", "", "", null);
            return result;
        }
        private bool Execute_Get_Contour_Attrib_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            string in2_obj = "";
            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "get_contour_attrib_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                out1_obj = tool_values.Add_HTuple(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GetContourAttribXld(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Contour_Global_Attrib_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList Name_list = ArrayList_Tool.New_ArrayList(new string[]
            {
                "'regr_norm_row'", 
                "'regr_norm_col'", 
                "'regr_mean_dist'", 
                "'regr_dev_dist'", 
                "'cont_approx'", 
                "'bright_dark'", 
                "'is_hole'" 
            });

            result.Name = "get_contour_global_attrib_xld";
            result.Execute += Execute_Get_Contour_Global_Attrib_Xld;
            result.In.Add(emValue_Type.XLD, "In_XLD", "In_XLD", "", "", null);
            result.In.Add(emValue_Type.String, "Name", "Name", "", "'regr_norm_row'", Name_list);
            result.Out.Add(emValue_Type.HTuple, "Attrib", "Attrib", "", "", null);
            return result;
        }
        private bool Execute_Get_Contour_Global_Attrib_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            string in2_obj = "";
            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "get_contour_global_attrib_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                out1_obj = tool_values.Add_HTuple(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GetContourGlobalAttribXld(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Contour_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "get_contour_xld";
            result.Execute += Execute_Get_Contour_Xld;
            result.In.Add(emValue_Type.XLD, "In_XLD", "In_XLD", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "col", "col", "", "", null);
            return result;
        }
        private bool Execute_Get_Contour_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "get_contour_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);
                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        in1_obj.GetContourXld(out out1_obj.Value, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Domain()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "get_domain";
            result.Execute += Execute_Get_Domain;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Get_Domain(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "get_domain")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GetDomain();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Grayval()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "get_grayval";
            result.Execute += Execute_Get_Grayval;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "Row", "Row", "", "0", null);
            result.In.Add(emValue_Type.Integer, "Col", "Col", "", "0", null);

            result.Out.Add(emValue_Type.Double, "Gray", "Gray", "", "", null);
            return result;
        }
        private bool Execute_Get_Grayval(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Double out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "get_grayval")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Double(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GetGrayval(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Grayval_Contour_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList interpolation_list = ArrayList_Tool.New_ArrayList(new string[]{
                                           "'bicubic'",
                                           "'bicubic_clipped'",
                                           "'bilinear'",
                                           "'nearest_neighbor'"  });

            result.Name = "get_grayval_contour_xld";
            result.Execute += Execute_Get_Grayval_Contour_Xld;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.XLD, "contour", "contour", "", "", null);
            result.In.Add(emValue_Type.String, "interpolation", "interpolation", "", "'nearest_neighbor'", interpolation_list);

            result.Out.Add(emValue_Type.HTuple, "Gray", "Gray", "", "", null);
            return result;
        }
        private bool Execute_Get_Grayval_Contour_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HXLD in2_obj = null;
            string in3_obj = "";

            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "get_grayval_contour_xld")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_XLD(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_HTuple(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GetGrayvalContourXld((HXLDCont)in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Grayval_Interpolated()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList interpolation_list = ArrayList_Tool.New_ArrayList(new string[]{
                                           "'bicubic'",
                                           "'bicubic_clipped'",
                                           "'bilinear'" });


            result.Name = "get_grayval_interpolated";
            result.Execute += Execute_Get_Grayval_Interpolated;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "row", "row", "", "", null);
            result.In.Add(emValue_Type.Double, "column", "column", "", "", null);
            result.In.Add(emValue_Type.String, "interpolation", "interpolation", "", "'bilinear'", interpolation_list);

            result.Out.Add(emValue_Type.Double, "Gray", "Gray", "", "", null);
            return result;
        }
        private bool Execute_Get_Grayval_Interpolated(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            string in4_obj = "";

            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "get_grayval_interpolated")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_HTuple(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GetGrayvalInterpolated(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Image_Pointer1()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "get_image_pointer1";
            result.Execute += Execute_Get_Image_Pointer1;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Integer, "Pointer", "Pointer", "", "", null);
            result.Out.Add(emValue_Type.String, "type", "type", "", "", null);
            result.Out.Add(emValue_Type.Integer, "width", "width", "", "", null);
            result.Out.Add(emValue_Type.Integer, "height", "height", "", "", null);
            return result;
        }
        private bool Execute_Get_Image_Pointer1(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Integer out1_obj = null;
            TTool_Value_String out2_obj = null;
            TTool_Value_Integer out3_obj = null;
            TTool_Value_Integer out4_obj = null;

            if (param_list.Length == 6 && param_list[0] == "get_image_pointer1")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Integer(param_list[2]);
                out2_obj = tool_values.Add_String(param_list[3]);
                out3_obj = tool_values.Add_Integer(param_list[4]);
                out4_obj = tool_values.Add_Integer(param_list[5]);
                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null)
                {
                    try
                    {
                        out1_obj.Value = (int)in1_obj.GetImagePointer1(out out2_obj.Value, out out3_obj.Value, out out4_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Image_Size()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "get_image_size";
            result.Execute += Execute_Get_Image_Size;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Integer, "width", "width", "", "", null);
            result.Out.Add(emValue_Type.Integer, "height", "height", "", "", null);
            return result;
        }
        private bool Execute_Get_Image_Size(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Integer out1_obj = null;
            TTool_Value_Integer out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "get_image_size")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Integer(param_list[2]);
                out2_obj = tool_values.Add_Integer(param_list[3]);
                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        in1_obj.GetImageSize(out out1_obj.Value, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Image_Type()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "get_image_type";
            result.Execute += Execute_Get_Image_Type;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.String, "Type", "Type", "", "", null);
            return result;
        }
        private bool Execute_Get_Image_Type(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_String out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "get_image_type")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_String(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GetImageType();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Region_Chain()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "get_region_chain";
            result.User_Define = false;
            result.Execute += Execute_Get_Region_Chain;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.Integer, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.Integer, "col", "col", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "chain", "chain", "", "", null);
            return result;
        }
        private bool Execute_Get_Region_Chain(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_Integer out1_obj = null;
            TTool_Value_Integer out2_obj = null;
            TTool_Value_HTuple out3_obj = null;

            if (param_list.Length == 5 && param_list[0] == "get_region_chain")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_Integer(param_list[2]);
                out2_obj = tool_values.Add_Integer(param_list[3]);
                out3_obj = tool_values.Add_HTuple(param_list[4]);

                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null)
                {
                    try
                    {
                        in1_obj.GetRegionChain(out out1_obj.Value, out out2_obj.Value, out out3_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Region_Contour()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "get_region_contour";
            result.User_Define = false;
            result.Execute += Execute_Get_Region_Contour;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "col", "col", "", "", null);
            return result;
        }
        private bool Execute_Get_Region_Contour(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "get_region_contour")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);

                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        in1_obj.GetRegionContour(out out1_obj.Value, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Region_Convex()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "get_region_convex";
            result.User_Define = false;
            result.Execute += Execute_Get_Region_Convex;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "col", "col", "", "", null);
            return result;
        }
        private bool Execute_Get_Region_Convex(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "get_region_convex")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);

                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        in1_obj.GetRegionConvex(out out1_obj.Value, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Region_Index()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "get_region_index";
            result.User_Define = false;
            result.Execute += Execute_Get_Region_Index;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "10", null);
            result.In.Add(emValue_Type.Integer, "col", "col", "", "10", null);

            result.Out.Add(emValue_Type.HTuple, "index", "index", "", "", null);
            return result;
        }
        private bool Execute_Get_Region_Index(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "get_region_index")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_HTuple(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GetRegionIndex(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Region_Points()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "get_region_points";
            result.User_Define = false;
            result.Execute += Execute_Get_Region_Points;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "col", "col", "", "", null);
            return result;
        }
        private bool Execute_Get_Region_Points(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "get_region_points")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        in1_obj.GetRegionPoints(out out1_obj.Value, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Region_Polygon()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "get_region_polygon";
            result.User_Define = false;
            result.Execute += Execute_Get_Region_Polygon;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Double, "tolerance", "tolerance", "", "5", null);

            result.Out.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "col", "col", "", "", null);
            return result;
        }
        private bool Execute_Get_Region_Polygon(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            double in2_obj = 0;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 5 && param_list[0] == "get_region_polygon")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);

                out1_obj = tool_values.Add_HTuple(param_list[3]);
                out2_obj = tool_values.Add_HTuple(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        in1_obj.GetRegionPolygon(in2_obj, out out1_obj.Value, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Region_Runs()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "get_region_runs";
            result.User_Define = false;
            result.Execute += Execute_Get_Region_Runs;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "columnBegin", "columnBegin", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "columnEnd", "columnEnd", "", "", null);
            return result;
        }
        private bool Execute_Get_Region_Runs(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;

            if (param_list.Length == 5 && param_list[0] == "get_region_runs")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);
                out3_obj = tool_values.Add_HTuple(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        in1_obj.GetRegionRuns(out out1_obj.Value, out out2_obj.Value, out out3_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Region_Thickness()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "get_region_thickness";
            result.User_Define = false;
            result.Execute += Execute_Get_Region_Thickness;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "Thickness", "Thickness", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "histogramm", "histogramm", "", "", null);
            return result;
        }
        private bool Execute_Get_Region_Thickness(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "get_region_thickness")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GetRegionThickness(out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Regress_Params_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "get_regress_params_xld";
            result.Execute += Execute_Get_Regress_Params_Xld;
            result.In.Add(emValue_Type.XLD, "In_XLD", "In_XLD", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "nx", "nx", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "ny", "ny", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "dist", "dist", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "fpx", "fpx", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "fpy", "fpy", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "lpx", "lpx", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "lpy", "lpy", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "mean", "mean", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "deviation", "deviation", "", "", null);
            return result;
        }
        private bool Execute_Get_Regress_Params_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;
            TTool_Value_HTuple out5_obj = null;
            TTool_Value_HTuple out6_obj = null;
            TTool_Value_HTuple out7_obj = null;
            TTool_Value_HTuple out8_obj = null;
            TTool_Value_HTuple out9_obj = null;

            if (param_list.Length == 11 && param_list[0] == "get_regress_params_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);
                out3_obj = tool_values.Add_HTuple(param_list[4]);
                out4_obj = tool_values.Add_HTuple(param_list[5]);
                out5_obj = tool_values.Add_HTuple(param_list[6]);
                out6_obj = tool_values.Add_HTuple(param_list[7]);
                out7_obj = tool_values.Add_HTuple(param_list[8]);
                out8_obj = tool_values.Add_HTuple(param_list[9]);
                out9_obj = tool_values.Add_HTuple(param_list[10]);
                if (in1_obj != null &&
                    out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null && out5_obj != null &&
                    out6_obj != null && out7_obj != null && out8_obj != null && out9_obj != null)
                {
                    try
                    {
                        in1_obj.GetRegressParamsXld(out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value, out out5_obj.Value,
                                                    out out6_obj.Value, out out7_obj.Value, out out8_obj.Value, out out9_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Shape_Model_Contours()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "get_shape_model_contours";
            result.User_Define = false;
            result.Execute += Execute_Get_Shape_Model_Contours;
            result.In.Add(emValue_Type.ShapeModel, "ShapeModel", "ShapeModel", "", "", null);
            result.In.Add(emValue_Type.Integer, "level", "level", "", "1", null);

            result.Out.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            return result;
        }
        private bool Execute_Get_Shape_Model_Contours(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HShapeModel in1_obj = null;
            int in2_obj = 0;

            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "get_shape_model_contours")
            {
                in1_obj = tool_values.Get_Value_ShapeModel(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out1_obj = tool_values.Add_XLD(param_list[3]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GetShapeModelContours(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Shape_Model_Origin()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "get_shape_model_origin";
            result.User_Define = false;
            result.Execute += Execute_Get_Shape_Model_Origin;
            result.In.Add(emValue_Type.ShapeModel, "ShapeModel", "ShapeModel", "", "", null);

            result.Out.Add(emValue_Type.Double, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.Double, "col", "col", "", "", null);
            return result;
        }
        private bool Execute_Get_Shape_Model_Origin(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HShapeModel in1_obj = null;

            TTool_Value_Double out1_obj = null;
            TTool_Value_Double out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "get_shape_model_origin")
            {
                in1_obj = tool_values.Get_Value_ShapeModel(param_list[1]);

                out1_obj = tool_values.Add_Double(param_list[2]);
                out2_obj = tool_values.Add_Double(param_list[3]);

                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        in1_obj.GetShapeModelOrigin(out out1_obj.Value, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Get_Shape_Model_Params()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "get_shape_model_params";
            result.User_Define = false;
            result.Execute += Execute_Get_Shape_Model_Params;
            result.In.Add(emValue_Type.ShapeModel, "ShapeModel", "ShapeModel", "", "", null);

            result.Out.Add(emValue_Type.Integer, "numLevels", "numLevels", "", "", null);
            result.Out.Add(emValue_Type.Double, "angleStart", "angleStart", "", "", null);
            result.Out.Add(emValue_Type.Double, "angleExtent", "angleExtent", "", "", null);
            result.Out.Add(emValue_Type.Double, "angleStep", "angleStep", "", "", null);
            result.Out.Add(emValue_Type.Double, "scaleMin", "scaleMin", "", "", null);
            result.Out.Add(emValue_Type.Double, "scaleMax", "scaleMax", "", "", null);
            result.Out.Add(emValue_Type.Double, "scaleStep", "scaleStep", "", "", null);
            result.Out.Add(emValue_Type.String, "metric", "metric", "", "", null);
            result.Out.Add(emValue_Type.Integer, "minContrast", "minContrast", "", "", null);
           return result;
        }
        private bool Execute_Get_Shape_Model_Params(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HShapeModel in1_obj = null;

            TTool_Value_Integer out1_obj = null;
            TTool_Value_Double out2_obj = null;
            TTool_Value_Double out3_obj = null;
            TTool_Value_Double out4_obj = null;
            TTool_Value_Double out5_obj = null;
            TTool_Value_Double out6_obj = null;
            TTool_Value_Double out7_obj = null;
            TTool_Value_String out8_obj = null;
            TTool_Value_Integer out9_obj = null;

            if (param_list.Length == 11 && param_list[0] == "get_shape_model_params")
            {
                in1_obj = tool_values.Get_Value_ShapeModel(param_list[1]);

                out1_obj = tool_values.Add_Integer(param_list[2]);
                out2_obj = tool_values.Add_Double(param_list[3]);
                out3_obj = tool_values.Add_Double(param_list[4]);
                out4_obj = tool_values.Add_Double(param_list[5]);
                out5_obj = tool_values.Add_Double(param_list[6]);
                out6_obj = tool_values.Add_Double(param_list[7]);
                out7_obj = tool_values.Add_Double(param_list[8]);
                out8_obj = tool_values.Add_String(param_list[9]);
                out9_obj = tool_values.Add_Integer(param_list[10]);

                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null && out5_obj != null && 
                                       out6_obj != null && out7_obj != null && out8_obj != null && out9_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GetShapeModelParams(out out2_obj.Value, out out3_obj.Value, out out4_obj.Value, out out5_obj.Value,
                                                                     out out6_obj.Value, out out7_obj.Value, out out8_obj.Value, out out9_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Golay_Elements()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList golayElement_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                      "'c'", 
                                      "'d'",
                                      "'e'",
                                      "'f'",
                                      "'f2'",
                                      "'h'",
                                      "'i'",
                                      "'k'",
                                      "'l'",
                                      "'m'"  });

            result.Name = "golay_elements";
            result.User_Define = false;
            result.Execute += Execute_Golay_Elements;
            result.In.Add(emValue_Type.String, "golayElement", "golayElement", "", "'l'", golayElement_list);
            result.In.Add(emValue_Type.Integer, "rotation", "rotation", "", "0", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "16", null);
            result.In.Add(emValue_Type.Integer, "column", "column", "", "16", null);

            result.Out.Add(emValue_Type.Region, "StructElement1", "StructElement1", "", "", null);
            result.Out.Add(emValue_Type.Region, "StructElement2", "StructElement2", "", "", null);
            return result;
        }
        private bool Execute_Golay_Elements(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            String in1_obj = "";
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;

            TTool_Value_Region out1_obj = null;
            TTool_Value_Region out2_obj = null;

            if (param_list.Length == 7 && param_list[0] == "golay_elements")
            {
                in1_obj = tool_values.Get_Value_String(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);
                out2_obj = tool_values.Add_Region(param_list[6]);

                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out2_obj.Value = out1_obj.Value.GolayElements(in1_obj, in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Bothat()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gray_bothat";
            result.Execute += Execute_Gray_Bothat;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Image, "Image SE", "Image SE", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gray_Bothat(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HImage in2_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "gray_bothat")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayBothat(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Closing()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gray_closing";
            result.Execute += Execute_Gray_Closing;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Image, "Image SE", "Image SE", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gray_Closing(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HImage in2_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "gray_closing")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayClosing(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Closing_Rect()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gray_closing_rect";
            result.Execute += Execute_Gray_Closing_Rect;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "Image maskHeight", "Image maskHeight", "", "", null);
            result.In.Add(emValue_Type.Integer, "Image maskWidth", "Image maskWidth", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gray_Closing_Rect(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "gray_closing_rect")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayClosingRect(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Closing_Shape()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList maskShape_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'octagon'",
                                       "'rectangle'",
                                       "'rhombus'" });


            result.Name = "gray_closing_shape";
            result.Execute += Execute_Gray_Closing_Shape;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "Image maskHeight", "Image maskHeight", "", "", null);
            result.In.Add(emValue_Type.Double, "Image maskWidth", "Image maskWidth", "", "", null);
            result.In.Add(emValue_Type.String, "Image maskShape", "Image maskShape", "", "'octagon'", maskShape_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gray_Closing_Shape(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            string in4_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "gray_closing_shape")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayClosingShape((double)in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Dilation()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gray_dilation";
            result.Execute += Execute_Gray_Dilation;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Image, "Image SE", "Image SE", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gray_Dilation(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HImage in2_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "gray_dilation")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayDilation(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Dilation_Rect()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gray_dilation_rect";
            result.Execute += Execute_Gray_Dilation_Rect;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "Image maskHeight", "Image maskHeight", "", "", null);
            result.In.Add(emValue_Type.Integer, "Image maskWidth", "Image maskWidth", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gray_Dilation_Rect(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "gray_dilation_rect")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayDilationRect(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Dilation_Shape()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList maskShape_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'octagon'",
                                       "'rectangle'",
                                       "'rhombus'" });


            result.Name = "gray_dilation_shape";
            result.Execute += Execute_Gray_Dilation_Shape;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "Image maskHeight", "Image maskHeight", "", "", null);
            result.In.Add(emValue_Type.Double, "Image maskWidth", "Image maskWidth", "", "", null);
            result.In.Add(emValue_Type.String, "Image maskShape", "Image maskShape", "", "'octagon'", maskShape_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gray_Dilation_Shape(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            string in4_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "gray_dilation_shape")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayDilationShape((double)in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Erosion()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gray_erosion";
            result.Execute += Execute_Gray_Erosion;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Image, "Image SE", "Image SE", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gray_Erosion(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HImage in2_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "gray_erosion")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayErosion(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Erosion_Rect()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gray_erosion_rect";
            result.Execute += Execute_Gray_Erosion_Rect;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "Image maskHeight", "Image maskHeight", "", "", null);
            result.In.Add(emValue_Type.Integer, "Image maskWidth", "Image maskWidth", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gray_Erosion_Rect(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "gray_erosion_rect")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayErosionRect(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Erosion_Shape()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList maskShape_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'octagon'",
                                       "'rectangle'",
                                       "'rhombus'" });


            result.Name = "gray_erosion_shape";
            result.Execute += Execute_Gray_Erosion_Shape;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "Image maskHeight", "Image maskHeight", "", "", null);
            result.In.Add(emValue_Type.Double, "Image maskWidth", "Image maskWidth", "", "", null);
            result.In.Add(emValue_Type.String, "Image maskShape", "Image maskShape", "", "'octagon'", maskShape_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gray_Erosion_Shape(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            string in4_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "gray_erosion_shape")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayErosionShape((double)in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Features()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList features_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                      "'alpha'",
                                      "'anisotropy'",
                                      "'area'",
                                      "'beta'",
                                      "'column'", 
                                      "'deviation'", 
                                      "'entropy'", 
                                      "'fuzzy_entropy'", 
                                      "'fuzzy_perimeter'", 
                                      "'max'", 
                                      "'mean'", 
                                      "'min'",
                                      "'moments_column'",
                                      "'moments_row'",
                                      "'phi'", 
                                      "'plane_deviation'",
                                      "'ra'",
                                      "'rb'",
                                      "'row'"  });

            result.Name = "gray_features";
            result.User_Define = false;
            result.Execute += Execute_Gray_Features;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "0", null);
            result.In.Add(emValue_Type.String, "features", "features", "", "'mean'", features_list);

            result.Out.Add(emValue_Type.HTuple, "Value", "Value", "", "", null);
            return result;
        }
        private bool Execute_Gray_Features(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HImage in2_obj = null;
            String in3_obj = "";

            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "gray_features")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_HTuple(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayFeatures(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Histo()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gray_histo";
            result.Execute += Execute_Gray_Histo;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Region, "regions", "regions", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "AbsoluteHisto", "AbsoluteHisto", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "RelativeHisto", "RelativeHisto", "", "", null);
            return result;
        }
        private bool Execute_Gray_Histo(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 5 && param_list[0] == "gray_histo")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_HTuple(param_list[3]);
                out2_obj = tool_values.Add_HTuple(param_list[4]);
                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayHisto(in2_obj, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Histo_Abs()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gray_histo_abs";
            result.Execute += Execute_Gray_Histo_Abs;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Region, "regions", "regions", "", "", null);
            result.In.Add(emValue_Type.Double, "quantization", "quantization", "", "1", null);

            result.Out.Add(emValue_Type.HTuple, "AbsoluteHisto", "AbsoluteHisto", "", "", null);
            return result;
        }
        private bool Execute_Gray_Histo_Abs(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HRegion in2_obj = null;
            double in3_obj = 0;

            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "gray_histo_abs")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_HTuple(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayHistoAbs(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Histo_Range()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gray_histo_range";
            result.Execute += Execute_Gray_Histo_Range;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Region, "regions", "regions", "", "", null);
            result.In.Add(emValue_Type.Double, "min", "min", "", "0", null);
            result.In.Add(emValue_Type.Double, "max", "max", "", "255", null);
            result.In.Add(emValue_Type.Integer, "numBins", "numBins", "", "256", null);

            result.Out.Add(emValue_Type.Integer, "Histo", "Histo", "", "", null);
            result.Out.Add(emValue_Type.Double, "BinSize", "BinSize", "", "", null);
            return result;
        }
        private bool Execute_Gray_Histo_Range(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HRegion in2_obj = null;
            double in3_obj = 0;
            double in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_Integer out1_obj = null;
            TTool_Value_Double out2_obj = null;

            if (param_list.Length == 8 && param_list[0] == "gray_histo_range")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Integer(param_list[6]);
                out2_obj = tool_values.Add_Double(param_list[7]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayHistoRange(in2_obj, in3_obj, in4_obj, in5_obj, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Inside()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gray_inside";
            result.Execute += Execute_Gray_Inside;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "ImageDist", "ImageDist", "", "", null);
            return result;
        }
        private bool Execute_Gray_Inside(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "gray_inside")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayInside();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Opening()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gray_opening";
            result.Execute += Execute_Gray_Opening;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Image, "Image SE", "Image SE", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gray_Opening(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HImage in2_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "gray_opening")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayOpening(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Opening_Rect()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gray_opening_rect";
            result.Execute += Execute_Gray_Opening_Rect;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "Image maskHeight", "Image maskHeight", "", "", null);
            result.In.Add(emValue_Type.Integer, "Image maskWidth", "Image maskWidth", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gray_Opening_Rect(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "gray_opening_rect")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayClosingRect(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Opening_Shape()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList maskShape_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'octagon'",
                                       "'rectangle'",
                                       "'rhombus'" });


            result.Name = "gray_opening_shape";
            result.Execute += Execute_Gray_Opening_Shape;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "Image maskHeight", "Image maskHeight", "", "", null);
            result.In.Add(emValue_Type.Double, "Image maskWidth", "Image maskWidth", "", "", null);
            result.In.Add(emValue_Type.String, "Image maskShape", "Image maskShape", "", "'octagon'", maskShape_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gray_Opening_Shape(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            string in4_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "gray_opening_shape")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayOpeningShape((double)in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Projections()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'rectangle'",
                                  "'simple'" });

            result.Name = "gray_projections";
            result.Execute += Execute_Gray_Projections;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Region, "region", "region", "", "", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'simple'", mode_list);

            result.Out.Add(emValue_Type.HTuple, "HorProjection", "HorProjection", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "vertProjection", "vertProjection", "", "", null);
            return result;
        }
        private bool Execute_Gray_Projections(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HRegion in2_obj = null;
            string in3_obj = "";

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 6 && param_list[0] == "gray_projections")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_HTuple(param_list[4]);
                out2_obj = tool_values.Add_HTuple(param_list[5]);
                if (in1_obj != null && in2_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayProjections(in2_obj, in3_obj, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Range_Rect()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "gray_range_rect";
            result.Execute += Execute_Gray_Range_Rect;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "maskHeight", "maskHeight", "", "11", null);
            result.In.Add(emValue_Type.Integer, "maskWidth", "maskWidth", "", "11", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gray_Range_Rect(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "gray_range_rect")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayRangeRect(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Skeleton()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'rectangle'",
                                  "'simple'" });

            result.Name = "gray_skeleton";
            result.Execute += Execute_Gray_Skeleton;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gray_Skeleton(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "gray_skeleton")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GraySkeleton();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Gray_Tophat()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'rectangle'",
                                  "'simple'" });

            result.Name = "gray_tophat";
            result.Execute += Execute_Gray_Tophat;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Image, "Image SE", "Image SE", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Gray_Tophat(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HImage in2_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "gray_tophat")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.GrayTophat(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region H
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Hamming_Change_Region()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "hamming_change_region";
            result.User_Define = false;
            result.Execute += Execute_Hamming_Change_Region;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "100", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "100", null);
            result.In.Add(emValue_Type.Integer, "distance", "distance", "1000", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Hamming_Change_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "hamming_change_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.HammingChangeRegion(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Hamming_Distance()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "hamming_distance";
            result.User_Define = false;
            result.Execute += Execute_Hamming_Distance;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.Region, "Region2", "Region2", "", "", null);

            result.Out.Add(emValue_Type.Integer, "Distance", "Distance", "", "", null);
            result.Out.Add(emValue_Type.Double, "similarity", "similarity", "", "", null);
            return result;
        }
        private bool Execute_Hamming_Distance(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Integer out1_obj = null;
            TTool_Value_Double out2_obj = null;

            if (param_list.Length == 5 && param_list[0] == "hamming_distance")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Integer(param_list[3]);
                out2_obj = tool_values.Add_Double(param_list[4]);

                if (in1_obj != null && in2_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.HammingDistance(in2_obj, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Hamming_Distance_Norm()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "hamming_distance_norm";
            result.User_Define = false;
            result.Execute += Execute_Hamming_Distance_Norm;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.Region, "Region2", "Region2", "", "", null);
            result.In.Add(emValue_Type.String, "norm", "norm", "", "'center'", null);

            result.Out.Add(emValue_Type.Integer, "Distance", "Distance", "", "", null);
            result.Out.Add(emValue_Type.Double, "similarity", "similarity", "", "", null);
            return result;
        }
        private bool Execute_Hamming_Distance_Norm(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;
            string in3_obj = "";

            TTool_Value_Integer out1_obj = null;
            TTool_Value_Double out2_obj = null;

            if (param_list.Length == 6 && param_list[0] == "hamming_distance_norm")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_Integer(param_list[4]);
                out2_obj = tool_values.Add_Double(param_list[5]);

                if (in1_obj != null && in2_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.HammingDistanceNorm(in2_obj, in3_obj, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Harmonic_Interpolation()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'rectangle'",
                                  "'simple'" });

            result.Name = "harmonic_interpolation";
            result.Execute += Execute_Harmonic_Interpolation;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Region, "region", "region", "", "", null);
            result.In.Add(emValue_Type.Double, "precision", "precision", "", "0.001", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Harmonic_Interpolation(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HRegion in2_obj = null;
            double in3_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "harmonic_interpolation")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.HarmonicInterpolation(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Highpass_Image()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'rectangle'",
                                  "'simple'" });

            result.Name = "highpass_image";
            result.Execute += Execute_Highpass_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "9", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "9", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Highpass_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "highpass_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.HighpassImage(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Histo_2dim()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'rectangle'",
                                  "'simple'" });

            result.Name = "histo_2dim";
            result.Execute += Execute_Histo_2dim;
            result.In.Add(emValue_Type.Image, "ImageCol", "ImageCol", "", "", null);
            result.In.Add(emValue_Type.Image, "imageRow", "imageRow", "", "", null);
            result.In.Add(emValue_Type.Region, "regions", "regions", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Histo_2dim(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HImage in2_obj = null;
            HRegion in3_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "histo_2dim")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Region(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && in2_obj != null && in3_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Histo2dim(in3_obj, in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Hit_Or_Miss()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "hit_or_miss";
            result.User_Define = false;
            result.Execute += Execute_Hit_Or_Miss;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.Region, "StructElement1", "StructElement1", "", "", null);
            result.In.Add(emValue_Type.Region, "StructElement2", "StructElement2", "", "", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "16", null);
            result.In.Add(emValue_Type.Integer, "column", "column", "", "16", null);

            result.Out.Add(emValue_Type.Region, "RegionHitMiss", "RegionHitMiss", "", "", null);
            return result;
        }
        private bool Execute_Hit_Or_Miss(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;
            HRegion in3_obj = null;
            int in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "hit_or_miss")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Region(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Region(param_list[6]);

                if (in1_obj != null && in2_obj != null && in3_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.HitOrMiss(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Hit_Or_Miss_Golay()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList GolayElement_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                          "'c'",
                                          "'d'",
                                          "'e'",
                                          "'f'",
                                          "'f2'",
                                          "'h'",
                                          "'i'",
                                          "'k'",
                                          "'l'", 
                                          "'m'"  });

            result.Name = "hit_or_miss_golay";
            result.User_Define = false;
            result.Execute += Execute_Hit_Or_Miss_Golay;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.String, "GolayElement", "GolayElement", "", "'h'", GolayElement_list);
            result.In.Add(emValue_Type.Integer, "rotation", "rotation", "", "0", null);

            result.Out.Add(emValue_Type.Region, "Regions", "Region", "", "", null);
            return result;
        }
        private bool Execute_Hit_Or_Miss_Golay(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "hit_or_miss_golay")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);

                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.HitOrMissGolay(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Hit_Or_Miss_Seq()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList GolayElement_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                          "'c'",
                                          "'d'",
                                          "'e'",
                                          "'f'",
                                          "'f2'",
                                          "'h'",
                                          "'i'",
                                          "'k'",
                                          "'l'", 
                                          "'m'"  });

            result.Name = "hit_or_miss_seq";
            result.User_Define = false;
            result.Execute += Execute_Hit_Or_Miss_Seq;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.String, "GolayElement", "GolayElement", "", "'h'", GolayElement_list);

            result.Out.Add(emValue_Type.Region, "Regions", "Region", "", "", null);
            return result;
        }
        private bool Execute_Hit_Or_Miss_Seq(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            string in2_obj = "";

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "hit_or_miss_seq")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.HitOrMissSeq(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Hough_Circles()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "hough_circles";
            result.User_Define = false;
            result.Execute += Execute_Hough_Circles;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.Integer, "radius", "radius", "", "12", null);
            result.In.Add(emValue_Type.Integer, "percent", "percent", "", "60", null);
            result.In.Add(emValue_Type.Integer, "mode", "mode", "", "0", null);

            result.Out.Add(emValue_Type.Region, "Regions", "Region", "", "", null);
            return result;
        }
        private bool Execute_Hough_Circles(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "hough_circles")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.HoughCircles(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Hough_Circle_Trans()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "hough_circle_trans";
            result.User_Define = false;
            result.Execute += Execute_Hough_Circle_Trans;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.Integer, "radius", "radius", "", "12", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Hough_Circle_Trans(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            int in2_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "hough_circle_trans")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.HoughCircleTrans(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Hough_Lines()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "hough_lines";
            result.User_Define = false;
            result.Execute += Execute_Hough_Lines;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.Integer, "angleResolution", "angleResolution", "", "4", null);
            result.In.Add(emValue_Type.Integer, "threshold", "threshold", "", "100", null);
            result.In.Add(emValue_Type.Integer, "angleGap", "angleGap", "", "5", null);
            result.In.Add(emValue_Type.Integer, "distGap", "distGap", "", "5", null);

            result.Out.Add(emValue_Type.HTuple, "Angle", "Angle", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Dist", "Dist", "", "", null);
            return result;
        }
        private bool Execute_Hough_Lines(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 8 && param_list[0] == "hough_lines")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_HTuple(param_list[6]);
                out2_obj = tool_values.Add_HTuple(param_list[7]);

                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.HoughLines(in2_obj, in3_obj, in4_obj, in4_obj, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Hough_Lines_Dir()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList smoothing_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'gauss'", 
                                       "'mean'", 
                                       "'none'"  });
            ArrayList genLines_list = ArrayList_Tool.New_ArrayList(new string[]{
                                      "'false'", 
                                      "'true'"  });


            result.Name = "hough_lines_dir";
            result.Execute += Execute_Hough_Lines_Dir;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "directionUncertainty", "directionUncertainty", "", "2", null);
            result.In.Add(emValue_Type.Integer, "angleResolution", "angleResolution", "", "4", null);
            result.In.Add(emValue_Type.String, "smoothing", "smoothing", "", "'mean'", smoothing_list);
            result.In.Add(emValue_Type.Integer, "filterSize", "filterSize", "", "5", null);
            result.In.Add(emValue_Type.Integer, "threshold", "threshold", "", "100", null);
            result.In.Add(emValue_Type.Integer, "angleGap", "angleGap", "", "5", null);
            result.In.Add(emValue_Type.Integer, "distGap", "distGap", "", "5", null);
            result.In.Add(emValue_Type.String, "genLines", "genLines", "", "'true'", genLines_list);

            result.Out.Add(emValue_Type.Image, "HoughImage", "HoughImage", "", "", null);
            result.Out.Add(emValue_Type.Region, "Lines", "Lines", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "angle", "angle", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "dist", "dist", "", "", null);
            return result;
        }
        private bool Execute_Hough_Lines_Dir(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            string in4_obj = "";
            int in5_obj = 0;
            int in6_obj = 0;
            int in7_obj = 0;
            int in8_obj = 0;
            string in9_obj = "";

            TTool_Value_Image out1_obj = null;
            TTool_Value_Region out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;

            if (param_list.Length == 14 && param_list[0] == "hough_lines_dir")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);
                in6_obj = tool_values.Get_Value_Integer(param_list[6]);
                in7_obj = tool_values.Get_Value_Integer(param_list[7]);
                in8_obj = tool_values.Get_Value_Integer(param_list[8]);
                in9_obj = tool_values.Get_Value_String(param_list[9]);

                out1_obj = tool_values.Add_Image(param_list[10]);
                out2_obj = tool_values.Add_Region(param_list[11]);
                out3_obj = tool_values.Add_HTuple(param_list[12]);
                out4_obj = tool_values.Add_HTuple(param_list[13]);
                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.HoughLinesDir(out out2_obj.Value, in2_obj, in3_obj, in4_obj, in5_obj,
                                                               in6_obj, in7_obj, in8_obj, in9_obj,
                                                                out out3_obj.Value, out out4_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Hough_Line_Trans()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "hough_line_trans";
            result.User_Define = false;
            result.Execute += Execute_Hough_Line_Trans;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.Integer, "angleResolution", "angleResolution", "", "4", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Hough_Line_Trans(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            int in2_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "hough_line_trans")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.HoughLineTrans(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Hough_Line_Trans_Dir()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "hough_line_trans_dir";
            result.Execute += Execute_Hough_Line_Trans_Dir;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "directionUncertainty", "directionUncertainty", "", "2", null);
            result.In.Add(emValue_Type.Integer, "angleResolution", "angleResolution", "", "4", null);

            result.Out.Add(emValue_Type.Image, "HoughImage", "HoughImage", "", "", null);
            return result;
        }
        private bool Execute_Hough_Line_Trans_Dir(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "hough_line_trans_dir")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.HoughLineTransDir(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Hysteresis_Threshold()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "hysteresis_threshold";
            result.Execute += Execute_Hysteresis_Threshold;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "low", "low", "", "30", null);
            result.In.Add(emValue_Type.Integer, "high", "high", "", "60", null);
            result.In.Add(emValue_Type.Integer, "maxLength", "maxLength", "", "10", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Hysteresis_Threshold(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "hysteresis_threshold")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.HysteresisThreshold(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region I
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Illuminate()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "illuminate";
            result.Execute += Execute_Illuminate;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "maskWidth", "maskWidth", "", "101", null);
            result.In.Add(emValue_Type.Integer, "maskHeight", "maskHeight", "", "101", null);
            result.In.Add(emValue_Type.Double, "factor", "factor", "", "0.7", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Illuminate(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            double in4_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "illuminate")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Illuminate(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Image_To_Channels()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "image_to_channels";
            result.Execute += Execute_Image_To_Channels;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Image_To_Channels(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "image_to_channels")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ImageToChannels();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Inner_Circle()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "inner_circle";
            result.User_Define = false;
            result.Execute += Execute_Inner_Circle;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "column", "column", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "radius", "radius", "", "", null);
            return result;
        }
        private bool Execute_Inner_Circle(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;

            if (param_list.Length == 5 && param_list[0] == "inner_circle")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);
                out3_obj = tool_values.Add_HTuple(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        in1_obj.InnerCircle(out out1_obj.Value, out out2_obj.Value, out out3_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Inner_Rectangle1()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "inner_rectangle1";
            result.User_Define = false;
            result.Execute += Execute_Inner_Rectangle1;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "row1", "row1", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "col1", "col1", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "row2", "row2", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "col2", "col2", "", "", null);
            return result;
        }
        private bool Execute_Inner_Rectangle1(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;

            if (param_list.Length == 6 && param_list[0] == "inner_rectangle1")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);
                out3_obj = tool_values.Add_HTuple(param_list[4]);
                out4_obj = tool_values.Add_HTuple(param_list[5]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        in1_obj.InnerRectangle1(out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Intensity()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "intensity";
            result.Execute += Execute_Intensity;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.Double, "Mean", "Mean", "", "", null);
            result.Out.Add(emValue_Type.Double, "Deviation", "Deviation", "", "", null);
            return result;
        }
        private bool Execute_Intensity(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Double out1_obj = null;
            TTool_Value_Double out2_obj = null;

            if (param_list.Length == 5 && param_list[0] == "intensity")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Double(param_list[3]);
                out2_obj = tool_values.Add_Double(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Intensity(in2_obj, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Interjacent()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                  "'border'",
                                  "'medial_axis'", 
                                  "'mixed'" });

            result.Name = "interjacent";
            result.User_Define = false;
            result.Execute += Execute_Interjacent;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'mixed'", mode_list);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Interjacent(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            string in2_obj = "";

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "interjacent")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Interjacent(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Intersection()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "intersection";
            result.User_Define = false;
            result.Execute += Execute_Intersection;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.Region, "Region2", "Region2", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Intersection(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "intersection")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Intersection(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Intersection_Closed_Contours_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "intersection_closed_contours_xld";
            result.Execute += Execute_Intersection_Closed_Contours_Xld;
            result.In.Add(emValue_Type.XLD, "In_XLD1", "In_XLD1", "", "", null);
            result.In.Add(emValue_Type.XLD, "In_XLD2", "In_XLD2", "", "", null);
            result.Out.Add(emValue_Type.XLD, "Out_XLD", "Out_XLD", "", "", null);
            return result;
        }
        private bool Execute_Intersection_Closed_Contours_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            HXLDCont in2_obj = null;
            TTool_Value_XLD out1_obj = null;
            if (param_list.Length == 4 && param_list[0] == "intersection_closed_contours_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[2]);
                out1_obj = tool_values.Add_XLD(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.IntersectionClosedContoursXld(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Invert_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "invert_image";
            result.Execute += Execute_Invert_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Invert_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "invert_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.InvertImage();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Isotropic_Diffusion()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "isotropic_diffusion";
            result.Execute += Execute_Isotropic_Diffusion;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "sigma", "sigma", "", "1", null);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "10", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Isotropic_Diffusion(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            double in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "isotropic_diffusion")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.IsotropicDiffusion(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region J
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Junctions_Skeleton()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "junctions_skeleton";
            result.User_Define = false;
            result.Execute += Execute_Junctions_Skeleton;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);

            result.Out.Add(emValue_Type.Region, "EndPoints", "EndPoints", "", "", null);
            result.Out.Add(emValue_Type.Region, "JuncPoints", "JuncPoints", "", "", null);
            return result;
        }
        private bool Execute_Junctions_Skeleton(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_Region out1_obj = null;
            TTool_Value_Region out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "junctions_skeleton")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);
                out2_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.JunctionsSkeleton(out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region L
        // private void LearnNdimBox(HRegion background, HImage multiChannelImage, HClassBox classifHandle);
        // private HTuple LearnNdimNorm(HRegion background, HImage image, string metric, double distance, double minNumberPercent, out HTuple center, out double quality);
        #endregion

        #region K
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Kirsch_Amp()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "kirsch_amp";
            result.Execute += Execute_Kirsch_Amp;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Kirsch_Amp(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "kirsch_amp")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.KirschAmp();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Kirsch_Dir()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "kirsch_dir";
            result.Execute += Execute_Kirsch_Dir;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "ImageEdgeAmp", "ImageEdgeAmp", "", "", null);
            result.Out.Add(emValue_Type.Image, "ImageEdgeDir", "ImageEdgeDir", "", "", null);
            return result;
        }
        private bool Execute_Kirsch_Dir(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "kirsch_dir")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                out2_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.KirschDir(out out1_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region L
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Label_To_Region()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "label_to_region";
            result.Execute += Execute_Label_To_Region;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Label_To_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "label_to_region")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.LabelToRegion();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Laplace()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList resultType_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'absolute'",
                                  "'absolute_binomial'",
                                  "'signed'", 
                                  "'signed_binomial'", 
                                  "'signed_clipped'", 
                                  "'signed_clipped_binomial'"  });
            ArrayList filterMask_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "'n_4'",
                                        "'n_8'", 
                                        "'n_8_isotropic'"  });

            result.Name = "laplace";
            result.Execute += Execute_Laplace;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "resultType", "resultType", "", "'absolute'", resultType_list);
            result.In.Add(emValue_Type.Integer, "maskSize", "maskSize", "", "3", null);
            result.In.Add(emValue_Type.String, "filterMask", "filterMask", "'n_4'", "", filterMask_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Laplace(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;
            string in4_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "laplace")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Laplace(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Laplace_Of_Gauss()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "laplace_of_gauss";
            result.Execute += Execute_Laplace_Of_Gauss;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "sigma", "sigma", "", "'2'", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Laplace_Of_Gauss(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            double in2_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "laplace_of_gauss")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.LaplaceOfGauss(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Linear_Trans_Color()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "linear_trans_color";
            result.Execute += Execute_Linear_Trans_Color;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.HTuple, "transMat", "transMat", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Linear_Trans_Color(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HTuple in2_obj = new HTuple();

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "linear_trans_color")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_HTuple(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.LinearTransColor(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Lines_Color()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList extractWidth_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "'false'", 
                                        "'true'"  });
            ArrayList completeJunctions_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "'false'", 
                                        "'true'"  });


            result.Name = "lines_color";
            result.Execute += Execute_Lines_Color;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "sigma", "sigma", "", "1.5", null);
            result.In.Add(emValue_Type.Double, "low", "low", "", "3", null);
            result.In.Add(emValue_Type.Double, "high", "high", "", "8", null);
            result.In.Add(emValue_Type.String, "extractWidth", "extractWidth", "", "'true'", extractWidth_list);
            result.In.Add(emValue_Type.String, "completeJunctions", "completeJunctions", "", "'true'", completeJunctions_list);

            result.Out.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            return result;
        }
        private bool Execute_Lines_Color(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            string in5_obj = "";
            string in6_obj = "";

            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 8 && param_list[0] == "lines_color")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_String(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);

                out1_obj = tool_values.Add_XLD(param_list[7]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.LinesColor(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Lines_Facet()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList lightDark_list = ArrayList_Tool.New_ArrayList(new string[]{
                                         "'dark'", 
                                         "'light'" });

            result.Name = "lines_facet";
            result.Execute += Execute_Lines_Facet;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "maskSize", "maskSize", "", "5", null);
            result.In.Add(emValue_Type.Double, "low", "low", "", "3", null);
            result.In.Add(emValue_Type.Double, "high", "high", "", "8", null);
            result.In.Add(emValue_Type.String, "lightDark", "lightDark", "", "'light'", lightDark_list);

            result.Out.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            return result;
        }
        private bool Execute_Lines_Facet(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            string in5_obj = "";

            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "lines_facet")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_String(param_list[5]);

                out1_obj = tool_values.Add_XLD(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.LinesFacet(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Lines_Gauss()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList lightDark_list = ArrayList_Tool.New_ArrayList(new string[]{
                                         "'dark'", 
                                         "'light'" });
            ArrayList extractWidth_list = ArrayList_Tool.New_ArrayList(new string[]{
                                          "'false'",
                                          "'true'" });
            ArrayList lineModel_list = ArrayList_Tool.New_ArrayList(new string[]{
                                          "'bar-shaped'",
                                          "'gaussian'",
                                          "'none'",
                                          "'parabolic'"  });
            ArrayList completeJunctions_list = ArrayList_Tool.New_ArrayList(new string[]{
                                          "'false'",
                                          "'true'" });

            result.Name = "lines_gauss";
            result.Execute += Execute_Lines_Gauss;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "sigma", "sigma", "", "1.5", null);
            result.In.Add(emValue_Type.Double, "low", "low", "", "3", null);
            result.In.Add(emValue_Type.Double, "high", "high", "", "8", null);
            result.In.Add(emValue_Type.String, "lightDark", "lightDark", "", "'light'", lightDark_list);
            result.In.Add(emValue_Type.String, "extractWidth", "extractWidth", "", "'true'", extractWidth_list);
            result.In.Add(emValue_Type.String, "lineModel", "lineModel", "", "'bar-shaped'", lineModel_list);
            result.In.Add(emValue_Type.String, "completeJunctions", "completeJunctions", "", "'true'", completeJunctions_list);

            result.Out.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            return result;
        }
        private bool Execute_Lines_Gauss(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            string in5_obj = "";
            string in6_obj = "";
            string in7_obj = "";
            string in8_obj = "";

            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 10 && param_list[0] == "lines_gauss")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_String(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);
                in7_obj = tool_values.Get_Value_String(param_list[7]);
                in8_obj = tool_values.Get_Value_String(param_list[8]);

                out1_obj = tool_values.Add_XLD(param_list[9]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.LinesGauss(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj, in8_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Local_Max()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "local_max";
            result.Execute += Execute_Local_Max;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Region, "Regon", "Regon", "", "", null);
            return result;
        }
        private bool Execute_Local_Max(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "local_max")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.LocalMax();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Local_Max_Sub_Pix()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList filter_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'facet'", 
                                    "'gauss'"  });

            result.Name = "local_max_sub_pix";
            result.Execute += Execute_Local_Max_Sub_Pix;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "filter", "filter", "", "'facet'", filter_list);
            result.In.Add(emValue_Type.Double, "sigma", "sigma", "", "0.7", null);
            result.In.Add(emValue_Type.Double, "threshold", "threshold", "", "5", null);

            result.Out.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "column", "column", "", "", null);
            return result;
        }
        private bool Execute_Local_Max_Sub_Pix(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            string in2_obj = "";
            double in3_obj = 0;
            double in4_obj = 0;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 7 && param_list[0] == "local_max_sub_pix")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);

                out1_obj = tool_values.Add_HTuple(param_list[5]);
                out1_obj = tool_values.Add_HTuple(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        in1_obj.LocalMaxSubPix(in2_obj, in3_obj, in4_obj, out out1_obj.Value, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Local_Min()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "local_min";
            result.Execute += Execute_Local_Min;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Region, "Regon", "Regon", "", "", null);
            return result;
        }
        private bool Execute_Local_Min(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "local_min")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.LocalMin();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Local_Min_Sub_Pix()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList filter_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'facet'", 
                                    "'gauss'"  });

            result.Name = "local_min_sub_pix";
            result.Execute += Execute_Local_Min_Sub_Pix;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "filter", "filter", "", "'facet'", filter_list);
            result.In.Add(emValue_Type.Double, "sigma", "sigma", "", "0.7", null);
            result.In.Add(emValue_Type.Double, "threshold", "threshold", "", "5", null);

            result.Out.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "column", "column", "", "", null);
            return result;
        }
        private bool Execute_Local_Min_Sub_Pix(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            string in2_obj = "";
            double in3_obj = 0;
            double in4_obj = 0;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 7 && param_list[0] == "local_min_sub_pix")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);

                out1_obj = tool_values.Add_HTuple(param_list[5]);
                out1_obj = tool_values.Add_HTuple(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        in1_obj.LocalMinSubPix(in2_obj, in3_obj, in4_obj, out out1_obj.Value, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Log_Image()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList baseVal_list = ArrayList_Tool.New_ArrayList(new string[]{
                                   "'e'",
                                   "2",
                                   "10" });

            result.Name = "log_image";
            result.Execute += Execute_Log_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "baseVal", "baseVal", "", "'e'", baseVal_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Log_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            string in2_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "log_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.LogImage(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Lowlands()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "lowlands";
            result.Execute += Execute_Lowlands;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Lowlands(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "lowlands")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Lowlands();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Lowlands_Center()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "lowlands_center";
            result.Execute += Execute_Lowlands_Center;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Lowlands_Center(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "lowlands_center")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.LowlandsCenter();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Lut_Trans()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "Lut_Trans";
            result.Execute += Execute_Lut_Trans;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.HTuple, "lut", "lut", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Lut_Trans(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HTuple in2_obj = new HTuple();

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "Lut_Trans")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_HTuple(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.LutTrans(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region M
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Map_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "map_image";
            result.Execute += Execute_Map_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Image, "Map Image", "Map Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Map_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HImage in2_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "map_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.MapImage(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Max_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "max_image";
            result.Execute += Execute_Max_Image;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "Image2", "Image2", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Max_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HImage in2_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "max_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.MaxImage(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Mean_Curvature_Flow()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "mean_curvature_flow";
            result.Execute += Execute_Mean_Curvature_Flow;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Double, "sigma", "sigma", "", "0.5", null);
            result.In.Add(emValue_Type.Double, "theta", "theta", "", "0.5", null);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "10", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Mean_Curvature_Flow(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            int in4_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "mean_curvature_flow")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.MeanCurvatureFlow(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Mean_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "mean_image";
            result.Execute += Execute_Mean_Image;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Integer, "maskWidth", "maskWidth", "", "9", null);
            result.In.Add(emValue_Type.Integer, "maskHeight", "maskHeight", "", "9", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Mean_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "mean_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.MeanImage(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Mean_N()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "mean_n";
            result.Execute += Execute_Mean_N;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Mean_N(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "mean_n")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.MeanN();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Mean_Sp()
        {
            TCommand_Define result = new TCommand_Define();


            result.Name = "mean_sp";
            result.Execute += Execute_Mean_Sp;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Integer, "maskWidth", "maskWidth", "", "9", null);
            result.In.Add(emValue_Type.Integer, "maskHeight", "maskHeight", "", "9", null);
            result.In.Add(emValue_Type.Integer, "minThresh", "minThresh", "", "1", null);
            result.In.Add(emValue_Type.Integer, "maxThresh", "maxThresh", "", "254", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Mean_Sp(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "mean_sp")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.MeanSp(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Measure_Pairs()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList transition_list = ArrayList_Tool.New_ArrayList(new string[]{
                                     "'all'",
                                     "'all_strongest'",
                                     "'negative'",
                                     "'negative_strongest'",
                                     "'positive'",
                                     "'positive_strongest'" });
            ArrayList select_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'all'",
                                    "'first'", 
                                    "'last'" });


            result.Name = "measure_pairs";
            result.Execute += Execute_Measure_Pairs;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Measure, "measureHandle", "measureHandle", "", "9", null);
            result.In.Add(emValue_Type.Double, "sigma", "sigma", "", "1", null);
            result.In.Add(emValue_Type.Double, "threshold", "minThresh", "", "30", null);
            result.In.Add(emValue_Type.String, "transition", "transition", "", "'all'", transition_list);
            result.In.Add(emValue_Type.String, "select", "select", "", "'all'", select_list);

            result.Out.Add(emValue_Type.HTuple, "rowEdgeFirst", "rowEdgeFirst", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "columnEdgeFirst", "columnEdgeFirst", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "amplitudeFirst", "amplitudeFirst", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "rowEdgeSecond", "rowEdgeSecond", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "columnEdgeSecond", "columnEdgeSecond", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "amplitudeSecond", "amplitudeSecond", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "intraDistance", "intraDistance", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "interDistance", "interDistance", "", "", null);
            return result;
        }
        private bool Execute_Measure_Pairs(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HMeasure in2_obj = null;
            double in3_obj = 0;
            double in4_obj = 0;
            string in5_obj = "";
            string in6_obj = "";

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;
            TTool_Value_HTuple out5_obj = null;
            TTool_Value_HTuple out6_obj = null;
            TTool_Value_HTuple out7_obj = null;
            TTool_Value_HTuple out8_obj = null;

            if (param_list.Length == 15 && param_list[0] == "measure_pairs")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Measure(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_String(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);

                out1_obj = tool_values.Add_HTuple(param_list[7]);
                out2_obj = tool_values.Add_HTuple(param_list[8]);
                out3_obj = tool_values.Add_HTuple(param_list[9]);
                out4_obj = tool_values.Add_HTuple(param_list[10]);
                out5_obj = tool_values.Add_HTuple(param_list[11]);
                out6_obj = tool_values.Add_HTuple(param_list[12]);
                out7_obj = tool_values.Add_HTuple(param_list[13]);
                out8_obj = tool_values.Add_HTuple(param_list[14]);
                if (in1_obj != null && in2_obj != null &&
                    out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null && out5_obj != null &&
                    out6_obj != null && out7_obj != null && out8_obj != null)
                {
                    try
                    {
                        in1_obj.MeasurePairs(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj,
                                             out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value, out out5_obj.Value,
                                             out out6_obj.Value, out out7_obj.Value, out out8_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Measure_Pos()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList transition_list = ArrayList_Tool.New_ArrayList(new string[]{
                                     "'all'",
                                     "'all_strongest'",
                                     "'negative'",
                                     "'negative_strongest'",
                                     "'positive'",
                                     "'positive_strongest'" });
            ArrayList select_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'all'",
                                    "'first'", 
                                    "'last'" });

            result.Name = "measure_pos";
            result.Execute += Execute_Measure_Pos;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Measure, "measureHandle", "measureHandle", "", "9", null);
            result.In.Add(emValue_Type.Double, "sigma", "sigma", "", "1", null);
            result.In.Add(emValue_Type.Double, "threshold", "minThresh", "", "30", null);
            result.In.Add(emValue_Type.String, "transition", "transition", "", "'all'", transition_list);
            result.In.Add(emValue_Type.String, "select", "select", "", "'all'", select_list);

            result.Out.Add(emValue_Type.HTuple, "rowEdge", "rowEdge", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "columnEdge", "columnEdge", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "amplitude", "amplitude", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "distance", "distance", "", "", null);
            return result;
        }
        private bool Execute_Measure_Pos(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HMeasure in2_obj = null;
            double in3_obj = 0;
            double in4_obj = 0;
            string in5_obj = "";
            string in6_obj = "";

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;

            if (param_list.Length == 11 && param_list[0] == "measure_pos")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Measure(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_String(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);

                out1_obj = tool_values.Add_HTuple(param_list[7]);
                out2_obj = tool_values.Add_HTuple(param_list[8]);
                out3_obj = tool_values.Add_HTuple(param_list[9]);
                out4_obj = tool_values.Add_HTuple(param_list[10]);
                if (in1_obj != null && in2_obj != null &&
                    out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null)
                {
                    try
                    {
                        in1_obj.MeasurePos(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj,
                                             out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Median_Image()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList maskType_list = ArrayList_Tool.New_ArrayList(new string[]{
                                     "'circle'", 
                                     "'square'" });
            ArrayList margin_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'mirrored'",
                                    "'cyclic'",
                                    "'continued'",
                                    "0",
                                    "30",
                                    "60", 
                                    "90",
                                    "120", 
                                    "150",
                                    "180",
                                    "210",
                                    "240", 
                                    "255" });

            result.Name = "median_image";
            result.Execute += Execute_Median_Image;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.String, "maskType", "maskType", "", "'circle'", maskType_list);
            result.In.Add(emValue_Type.Integer, "radius", "radius", "", "1", null);
            result.In.Add(emValue_Type.String, "margin", "margin", "", "'mirrored'", margin_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Median_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;
            string in4_obj = "";

            TTool_Value_Image out1_obj = null;
            if (param_list.Length == 6 && param_list[0] == "median_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.MedianImage(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Median_Rect()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "median_rect";
            result.Execute += Execute_Median_Rect;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Integer, "maskWidth", "maskWidth", "", "15", null);
            result.In.Add(emValue_Type.Integer, "maskHeight", "maskHeight", "", "15", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Median_Rect(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Image out1_obj = null;
            if (param_list.Length == 5 && param_list[0] == "median_rect")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.MedianRect(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Median_Separate()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList margin_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'mirrored'",
                                    "'cyclic'",
                                    "'continued'",
                                    "0", 
                                    "30",
                                    "60",
                                    "90",
                                    "120",
                                    "150",
                                    "180",
                                    "210",
                                    "240",
                                    "255" });

            result.Name = "median_separate";
            result.Execute += Execute_Median_Separate;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Integer, "maskWidth", "maskWidth", "", "15", null);
            result.In.Add(emValue_Type.Integer, "maskHeight", "maskHeight", "", "15", null);
            result.In.Add(emValue_Type.String, "margin", "margin", "", "'mirrored'", margin_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Median_Separate(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            string in4_obj = "";

            TTool_Value_Image out1_obj = null;
            if (param_list.Length == 6 && param_list[0] == "median_separate")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.MedianSeparate(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Median_Weighted()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList maskType_list = ArrayList_Tool.New_ArrayList(new string[]{
                                      "'gauss'",
                                      "'inner'"  });

            result.Name = "median_weighted";
            result.Execute += Execute_Median_Weighted;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.String, "maskType", "maskType", "", "'inner'", maskType_list);
            result.In.Add(emValue_Type.Integer, "maskSize", "maskSize", "", "3", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Median_Weighted(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;

            TTool_Value_Image out1_obj = null;
            if (param_list.Length == 5 && param_list[0] == "median_weighted")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.MedianWeighted(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Midrange_Image()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList margin_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'mirrored'",
                                    "'cyclic'",
                                    "'continued'",
                                    "0", 
                                    "30",
                                    "60",
                                    "90",
                                    "120",
                                    "150",
                                    "180",
                                    "210",
                                    "240",
                                    "255" });

            result.Name = "midrange_image";
            result.Execute += Execute_Midrange_Image;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Region, "mask", "mask", "", "", null);
            result.In.Add(emValue_Type.String, "margin", "margin", "", "'mirrored'", margin_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Midrange_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HRegion in2_obj = null;
            string in3_obj = "";

            TTool_Value_Image out1_obj = null;
            if (param_list.Length == 5 && param_list[0] == "midrange_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.MidrangeImage(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Min_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "min_image";
            result.Execute += Execute_Min_Image;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "Image2", "Image2", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Min_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HImage in2_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "min_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.MinImage(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Min_Max_Gray()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "min_max_gray";
            result.Execute += Execute_Min_Max_Gray;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Double, "percent", "percent", "", "0", null);

            result.Out.Add(emValue_Type.Double, "min", "min", "", "", null);
            result.Out.Add(emValue_Type.Double, "max", "max", "", "", null);
            result.Out.Add(emValue_Type.Double, "range", "range", "", "", null);
            return result;
        }
        private bool Execute_Min_Max_Gray(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HRegion in2_obj = null;
            double in3_obj = 0;

            TTool_Value_Double out1_obj = null;
            TTool_Value_Double out2_obj = null;
            TTool_Value_Double out3_obj = null;

            if (param_list.Length == 7 && param_list[0] == "min_max_gray")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_Double(param_list[4]);
                out2_obj = tool_values.Add_Double(param_list[5]);
                out3_obj = tool_values.Add_Double(param_list[6]);
                if (in1_obj != null && in2_obj != null && out1_obj != null && out2_obj != null && out3_obj != null)
                {
                    try
                    {
                        in1_obj.MinMaxGray(in2_obj, in3_obj, out out1_obj.Value, out out2_obj.Value, out out3_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Mirror_Image()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'column'", 
                                  "'diagonal'",
                                  "'row'" });

            result.Name = "mirror_image";
            result.Execute += Execute_Mirror_Image;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'row'", mode_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Mirror_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            string in2_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "mirror_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.MirrorImage(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Mirror_Region()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                  "'column'",
                                  "'diagonal'",
                                  "'row'"  });

            result.Name = "mirror_region";
            result.User_Define = false;
            result.Execute += Execute_Mirror_Region;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'row'", mode_list);
            result.In.Add(emValue_Type.Integer, "widthHeight", "widthHeight", "", "512", null);

            result.Out.Add(emValue_Type.Region, "EndPoints", "EndPoints", "", "", null);
            return result;
        }
        private bool Execute_Mirror_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "mirror_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.MirrorRegion(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Moments_Gray_Plane()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'column'", 
                                  "'diagonal'",
                                  "'row'" });

            result.Name = "moments_gray_plane";
            result.Execute += Execute_Moments_Gray_Plane;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.Double, "MRow", "MRow", "", "", null);
            result.Out.Add(emValue_Type.Double, "MCol", "MCol", "", "", null);
            result.Out.Add(emValue_Type.Double, "alpha", "alpha", "", "", null);
            result.Out.Add(emValue_Type.Double, "beta", "beta", "", "", null);
            result.Out.Add(emValue_Type.Double, "mean", "mean", "", "", null);
            return result;
        }
        private bool Execute_Moments_Gray_Plane(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Double out1_obj = null;
            TTool_Value_Double out2_obj = null;
            TTool_Value_Double out3_obj = null;
            TTool_Value_Double out4_obj = null;
            TTool_Value_Double out5_obj = null;

            if (param_list.Length == 8 && param_list[0] == "moments_gray_plane")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Double(param_list[3]);
                out2_obj = tool_values.Add_Double(param_list[4]);
                out3_obj = tool_values.Add_Double(param_list[5]);
                out4_obj = tool_values.Add_Double(param_list[6]);
                out5_obj = tool_values.Add_Double(param_list[7]);
                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null && out5_obj != null)
                {
                    try
                    {
                        in1_obj.MomentsGrayPlane(in2_obj, out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value, out out5_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Monotony()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'column'", 
                                  "'diagonal'",
                                  "'row'" });

            result.Name = "monotony";
            result.Execute += Execute_Monotony;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Monotony(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "monotony")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Monotony();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Morph_Hat()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "morph_hat";
            result.User_Define = false;
            result.Execute += Execute_Morph_Hat;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.String, "StructElement", "StructElement", "", "", null);

            result.Out.Add(emValue_Type.Region, "RegionMorphHat", "RegionMorphHat", "", "", null);
            return result;
        }
        private bool Execute_Morph_Hat(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "morph_hat")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.MorphHat(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Morph_Skeleton()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "morph_skeleton";
            result.User_Define = false;
            result.Execute += Execute_Morph_Skeleton;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Morph_Skeleton(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "morph_skeleton")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.MorphSkeleton();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Morph_Skiz()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "morph_skiz";
            result.User_Define = false;
            result.Execute += Execute_Morph_Skiz;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "iterations1", "iterations1", "", "100", null);
            result.In.Add(emValue_Type.Integer, "iterations2", "iterations2", "", "1", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Morph_Skiz(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "morph_skiz")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.MorphSkiz(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Move_Region()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "move_region";
            result.User_Define = false;
            result.Execute += Execute_Move_Region;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "10", null);
            result.In.Add(emValue_Type.Integer, "col", "col", "", "10", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Move_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "move_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.MoveRegion(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Mult_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "mult_image";
            result.Execute += Execute_Mult_Image;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "Image2", "Image2", "", "", null);
            result.In.Add(emValue_Type.Double, "mult", "mult", "", "", null);
            result.In.Add(emValue_Type.Double, "add", "add", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Mult_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HImage in2_obj = null;
            double in3_obj = 0;
            double in4_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "mult_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.MultImage(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region N
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Noise_Distribution_Mean()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "noise_distribution_mean";
            result.Execute += Execute_Noise_Distribution_Mean;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Region, "constRegion", "constRegion", "", "", null);
            result.In.Add(emValue_Type.Integer, "filterSize", "filterSize", "", "21", null);

            result.Out.Add(emValue_Type.HTuple, "Distribution", "Distribution", "", "", null);
            return result;
        }
        private bool Execute_Noise_Distribution_Mean(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HRegion in2_obj = null;
            int in3_obj = 0;

            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "noise_distribution_mean")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_HTuple(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.NoiseDistributionMean(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Nonmax_Suppression_Amp()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'hvnms'", 
                                  "'loc_max'" });

            result.Name = "nonmax_suppression_amp";
            result.Execute += Execute_Nonmax_Suppression_Amp;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'hvnms'", mode_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Nonmax_Suppression_Amp(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            string in2_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "nonmax_suppression_amp")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.NonmaxSuppressionAmp(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Nonmax_Suppression_Dir()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'inms'",
                                  "'nms'" });

            result.Name = "nonmax_suppression_dir";
            result.Execute += Execute_Nonmax_Suppression_Dir;
            result.In.Add(emValue_Type.Image, "Image Amp", "Image Amp", "", "", null);
            result.In.Add(emValue_Type.Image, "Image Dir", "Image Dir", "", "", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'nms'", mode_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Nonmax_Suppression_Dir(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HImage in2_obj = null;
            string in3_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "nonmax_suppression_dir")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.NonmaxSuppressionDir(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region O
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Obj_Diff_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "obj_diff_image";
            result.Execute += Execute_Obj_Diff_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Image, "Image Sub", "Image Sub", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Obj_Diff_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HImage in2_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "obj_diff_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ObjDiff(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Obj_Diff_Region()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "obj_diff_region";
            result.User_Define = false;
            result.Execute += Execute_Obj_Diff_Region;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Region, "Sub Region", "Sub Region", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Obj_Diff_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "obj_diff_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ObjDiff(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Obj_Diff_XLD()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "obj_diff_xld";
            result.User_Define = false;
            result.Execute += Execute_Obj_Diff_XLD;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.XLD, "Sub XLD", "Sub XLD", "", "", null);

            result.Out.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            return result;
        }
        private bool Execute_Obj_Diff_XLD(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            HXLDCont in2_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "obj_diff_region")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ObjDiff(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Opening()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "opening";
            result.User_Define = false;
            result.Execute += Execute_Opening;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Opening(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "opening")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Opening(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Opening_Circle()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "opening_circle";
            result.User_Define = false;
            result.Execute += Execute_Opening_Circle;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Double, "radius", "radius", "", "5", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Opening_Circle(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            double in2_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "opening_circle")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.OpeningCircle(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Opening_Golay()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList golayElement_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                          "'c'",
                                          "'d'",
                                          "'e'",
                                          "'f'",
                                          "'f2'",
                                          "'h'",
                                          "'i'",
                                          "'k'",
                                          "'l'", 
                                          "'m'" });

            result.Name = "opening_golay";
            result.User_Define = false;
            result.Execute += Execute_Opening_Golay;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.String, "golayElement", "golayElement", "", "'h'", golayElement_list);
            result.In.Add(emValue_Type.Integer, "rotation", "rotation", "", "0", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Opening_Golay(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "opening_golay")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);

                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.OpeningGolay(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Opening_Rectangle1()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "opening_rectangle1";
            result.User_Define = false;
            result.Execute += Execute_Opening_Rectangle1;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "9", null);
            result.In.Add(emValue_Type.Integer, "height", "rotation", "", "9", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Opening_Rectangle1(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "opening_rectangle1")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.OpeningRectangle1(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Opening_Seg()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "opening_seg";
            result.User_Define = false;
            result.Execute += Execute_Opening_Seg;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Region, "StructElement", "StructElement", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Opening_Seg(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "opening_seg")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);

                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.OpeningSeg(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Orientation_Region()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "orientation_region";
            result.User_Define = false;
            result.Execute += Execute_Orientation_Region;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "Phi", "Phi", "", "", null);
            return result;
        }
        private bool Execute_Orientation_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "orientation_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.OrientationRegion();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region P
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Paint_Gray()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "paint_gray";
            result.Execute += Execute_Paint_Gray;
            result.In.Add(emValue_Type.Image, "imageSource", "imageSource", "", "", null);
            result.In.Add(emValue_Type.Image, "imageDestination", "imageDestination", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Paint_Gray(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HImage in2_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "paint_gray")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PaintGray(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Paint_Region()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList type_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'fill'",
                                  "'margin'" });

            result.Name = "paint_region";
            result.Execute += Execute_Paint_Region;
            result.In.Add(emValue_Type.Image, "imageSource", "imageSource", "", "", null);
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.HTuple, "grayval", "grayval", "", "", null);
            result.In.Add(emValue_Type.String, "type", "type", "", "'fill'", type_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Paint_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HRegion in2_obj = null;
            HTuple in3_obj = null;
            string in4_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "paint_region")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_HTuple(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && in2_obj != null && in3_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PaintRegion(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Paint_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "paint_xld";
            result.Execute += Execute_Paint_Xld;
            result.In.Add(emValue_Type.Image, "imageSource", "imageSource", "", "", null);
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.Double, "grayval", "grayval", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Paint_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HXLD in2_obj = null;
            double in3_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "paint_xld")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_XLD(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PaintXld(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Partition_Dynamic()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "partition_dynamic";
            result.User_Define = false;
            result.Execute += Execute_Partition_Dynamic;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Double, "distance", "distance", "", "", null);
            result.In.Add(emValue_Type.Double, "percent", "percent", "", "20", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Partition_Dynamic(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "partition_dynamic")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PartitionDynamic(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Partition_Rectangle()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "partition_rectangle";
            result.User_Define = false;
            result.Execute += Execute_Partition_Rectangle;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);
            result.In.Add(emValue_Type.Double, "width", "width", "", "20", null);
            result.In.Add(emValue_Type.Double, "height", "height", "", "20", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Partition_Rectangle(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HRegion in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "partition_rectangle")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PartitionRectangle(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Phase_Deg()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "phase_deg";
            result.Execute += Execute_Phase_Deg;
            result.In.Add(emValue_Type.Image, "imageSource", "imageSource", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Phase_Deg(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "phase_deg")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PhaseDeg();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Phase_Rad()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "phase_rad";
            result.Execute += Execute_Phase_Rad;
            result.In.Add(emValue_Type.Image, "imageSource", "imageSource", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Phase_Rad(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "phase_rad")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PhaseRad();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Photometric_Stereo()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList resultType_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "'albedo'", 
                                        "'all'", 
                                        "'gradient'", 
                                        "'height_field'", 
                                        "'normalized_gradient'"  });
            ArrayList Method_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'fft_cyclic'", 
                                    "'poisson'", 
                                    "'rft_cyclic'"  });

            result.Name = "photometric_stereo";
            result.Execute += Execute_Photometric_Stereo;
            result.In.Add(emValue_Type.Image, "imageSource", "imageSource", "", "", null);
            result.In.Add(emValue_Type.Double, "slants", "slants", "", "45", null);
            result.In.Add(emValue_Type.Double, "tilts", "tilts", "", "45", null);
            result.In.Add(emValue_Type.String, "resultType", "resultType", "", "'all'", resultType_list);
            result.In.Add(emValue_Type.String, "reconstructionMethod", "reconstructionMethod", "", "'poisson'", Method_list);
            result.In.Add(emValue_Type.HTuple, "genParamName", "genParamName", "", "", null);
            result.In.Add(emValue_Type.HTuple, "genParamValue", "genParamValue", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image HeightField", "Image HeightField", "", "", null);
            result.Out.Add(emValue_Type.Image, "Image gradient", "Image gradient", "", "", null);
            result.Out.Add(emValue_Type.Image, "Image albedo", "Image albedo", "", "", null);
            return result;
        }
        private bool Execute_Photometric_Stereo(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            string in4_obj = "";
            string in5_obj = "";
            HTuple in6_obj = null;
            HTuple in7_obj = null;

            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;
            TTool_Value_Image out3_obj = null;

            if (param_list.Length == 11 && param_list[0] == "photometric_stereo")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);
                in5_obj = tool_values.Get_Value_String(param_list[5]);
                in6_obj = tool_values.Get_Value_HTuple(param_list[6]);
                in7_obj = tool_values.Get_Value_HTuple(param_list[7]);

                out1_obj = tool_values.Add_Image(param_list[8]);
                out2_obj = tool_values.Add_Image(param_list[9]);
                out3_obj = tool_values.Add_Image(param_list[10]);
                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PhotometricStereo(out out2_obj.Value, out out2_obj.Value, in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Plane_Deviation()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "plane_deviation";
            result.Execute += Execute_Plane_Deviation;
            result.In.Add(emValue_Type.Image, "imageSource", "imageSource", "", "", null);
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "Deviation", "Deviation", "", "", null);
            return result;
        }
        private bool Execute_Plane_Deviation(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "plane_deviation")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_HTuple(param_list[3]);

                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PlaneDeviation(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Plateaus()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "plateaus";
            result.Execute += Execute_Plateaus;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Plateaus(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "plateaus")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Plateaus();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Plateaus_Center()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "plateaus_center";
            result.Execute += Execute_Plateaus_Center;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Plateaus_Center(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "plateaus_center")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PlateausCenter();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Points_Foerstner()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList smoothing_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'gauss'", 
                                       "'mean'"  });
            ArrayList eliminateDoublets_list = ArrayList_Tool.New_ArrayList(new string[]{
                                               "'false'", 
                                               "'true'" });

            result.Name = "points_foerstner";
            result.Execute += Execute_Points_Foerstner;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "sigmaGrad", "sigmaGrad", "", "1", null);
            result.In.Add(emValue_Type.Double, "sigmaInt", "sigmaInt", "", "2", null);
            result.In.Add(emValue_Type.Double, "sigmaPoints", "sigmaPoints", "", "3", null);
            result.In.Add(emValue_Type.Double, "threshInhom", "threshInhom", "", "200", null);
            result.In.Add(emValue_Type.Double, "threshShape", "threshShape", "", "0.3", null);
            result.In.Add(emValue_Type.String, "smoothing", "smoothing", "", "'gauss'", smoothing_list);
            result.In.Add(emValue_Type.String, "eliminateDoublets", "eliminateDoublets", "", "'false'", eliminateDoublets_list);

            result.Out.Add(emValue_Type.HTuple, "rowJunctions", "rowJunctions", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "columnJunctions", "columnJunctions", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "coRRJunctions", "coRRJunctions", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "coRCJunctions", "coRCJunctions", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "coCCJunctions", "coCCJunctions", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "rowArea", "rowArea", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "columnArea", "columnArea", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "coRRArea", "coRRArea", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "coRCArea", "coRCArea", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "coCCArea", "coCCArea", "", "", null);
            return result;
        }
        private bool Execute_Points_Foerstner(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;
            string in7_obj = "";
            string in8_obj = "";

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;
            TTool_Value_HTuple out5_obj = null;
            TTool_Value_HTuple out6_obj = null;
            TTool_Value_HTuple out7_obj = null;
            TTool_Value_HTuple out8_obj = null;
            TTool_Value_HTuple out9_obj = null;
            TTool_Value_HTuple out10_obj = null;

            if (param_list.Length == 19 && param_list[0] == "points_foerstner")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);
                in7_obj = tool_values.Get_Value_String(param_list[7]);
                in8_obj = tool_values.Get_Value_String(param_list[8]);

                out1_obj = tool_values.Add_HTuple(param_list[9]);
                out2_obj = tool_values.Add_HTuple(param_list[10]);
                out3_obj = tool_values.Add_HTuple(param_list[11]);
                out4_obj = tool_values.Add_HTuple(param_list[12]);
                out5_obj = tool_values.Add_HTuple(param_list[13]);
                out6_obj = tool_values.Add_HTuple(param_list[14]);
                out7_obj = tool_values.Add_HTuple(param_list[15]);
                out8_obj = tool_values.Add_HTuple(param_list[16]);
                out9_obj = tool_values.Add_HTuple(param_list[17]);
                out10_obj = tool_values.Add_HTuple(param_list[18]);

                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null && out5_obj != null &&
                                       out6_obj != null && out7_obj != null && out8_obj != null && out9_obj != null && out10_obj != null)
                {
                    try
                    {
                        in1_obj.PointsFoerstner(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj, in8_obj,
                                                out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value, out out5_obj.Value,
                                                out out6_obj.Value, out out7_obj.Value, out out8_obj.Value, out out9_obj.Value, out out10_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Points_Harris()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "points_harris";
            result.Execute += Execute_Points_Harris;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "sigmaGrad", "sigmaGrad", "", "0.7", null);
            result.In.Add(emValue_Type.Double, "sigmaSmooth", "sigmaSmooth", "", "2", null);
            result.In.Add(emValue_Type.Double, "alpha", "alpha", "", "0.08", null);
            result.In.Add(emValue_Type.Double, "threshold", "threshold", "", "1000", null);

            result.Out.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "column", "column", "", "", null);
            return result;
        }
        private bool Execute_Points_Harris(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 8 && param_list[0] == "points_harris")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);

                out1_obj = tool_values.Add_HTuple(param_list[6]);
                out2_obj = tool_values.Add_HTuple(param_list[7]);

                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        in1_obj.PointsHarris(in2_obj, in3_obj, in4_obj, in5_obj, out out1_obj.Value, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Points_Harris_Binomial()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList subpix_list = ArrayList_Tool.New_ArrayList(new string[]{
                                                "'off'", "'on'" });

            result.Name = "points_harris_binomial";
            result.Execute += Execute_Points_Harris_Binomial;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "maskSizeGrad", "maskSizeGrad", "", "5", null);
            result.In.Add(emValue_Type.Integer, "maskSizeSmooth", "maskSizeSmooth", "", "18", null);
            result.In.Add(emValue_Type.Double, "alpha", "alpha", "", "0.08", null);
            result.In.Add(emValue_Type.Double, "threshold", "threshold", "", "1000", null);
            result.In.Add(emValue_Type.String, "subpix", "subpix", "", "'on'", subpix_list);

            result.Out.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "column", "column", "", "", null);
            return result;
        }
        private bool Execute_Points_Harris_Binomial(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            string in6_obj = "";

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 9 && param_list[0] == "points_harris_binomial")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);

                out1_obj = tool_values.Add_HTuple(param_list[7]);
                out2_obj = tool_values.Add_HTuple(param_list[8]);

                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        in1_obj.PointsHarrisBinomial(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, out out1_obj.Value, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Points_Lepetit()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList subpix_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'interpolation'",
                                    "'none'" });

            result.Name = "points_lepetit";
            result.Execute += Execute_Points_Lepetit;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "radius", "radius", "", "3", null);
            result.In.Add(emValue_Type.Integer, "checkNeighbor", "checkNeighbor", "", "1", null);
            result.In.Add(emValue_Type.Integer, "minCheckNeighborDiff", "minCheckNeighborDiff", "", "15", null);
            result.In.Add(emValue_Type.Integer, "minScore", "minScore", "", "30", null);
            result.In.Add(emValue_Type.String, "subpix", "subpix", "", "'interpolation'", subpix_list);

            result.Out.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "column", "column", "", "", null);
            return result;
        }
        private bool Execute_Points_Lepetit(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;
            int in5_obj = 0;
            string in6_obj = "";

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 9 && param_list[0] == "points_lepetit")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);

                out1_obj = tool_values.Add_HTuple(param_list[7]);
                out2_obj = tool_values.Add_HTuple(param_list[8]);

                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        in1_obj.PointsLepetit(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, out out1_obj.Value, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Points_Sojka()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList subpix_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'false'",
                                    "'true'"  });

            result.Name = "points_sojka";
            result.Execute += Execute_Points_Sojka;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "maskSize", "maskSize", "", "9", null);
            result.In.Add(emValue_Type.Double, "sigmaW", "sigmaW", "", "2.5", null);
            result.In.Add(emValue_Type.Double, "sigmaD", "sigmaD", "", "0.75", null);
            result.In.Add(emValue_Type.Double, "minGrad", "minGrad", "", "30", null);
            result.In.Add(emValue_Type.Double, "minApparentness", "minApparentness", "", "90", null);
            result.In.Add(emValue_Type.Double, "minAngle", "minAngle", "", "0.5", null);
            result.In.Add(emValue_Type.String, "subpix", "subpix", "", "'false'", subpix_list);

            result.Out.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "column", "column", "", "", null);
            return result;
        }
        private bool Execute_Points_Sojka(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;
            double in7_obj = 0;
            string in8_obj = "";

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 11 && param_list[0] == "points_sojka")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);
                in8_obj = tool_values.Get_Value_String(param_list[8]);

                out1_obj = tool_values.Add_HTuple(param_list[9]);
                out2_obj = tool_values.Add_HTuple(param_list[10]);

                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        in1_obj.PointsSojka(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj, in8_obj, out out1_obj.Value, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Polar_Trans_Contour_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "polar_trans_contour_xld";
            result.Execute += Execute_Polar_Trans_Contour_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.Double, "row", "row", "", "255", null);
            result.In.Add(emValue_Type.Double, "column", "column", "", "255", null);
            result.In.Add(emValue_Type.Double, "angleStart", "angleStart", "", "0", null);
            result.In.Add(emValue_Type.Double, "angleEnd", "angleEnd", "", "6.28319", null);
            result.In.Add(emValue_Type.Double, "radiusStart", "radiusStart", "0", "", null);
            result.In.Add(emValue_Type.Double, "radiusEnd", "radiusEnd", "", "100", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);

            result.Out.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            return result;
        }
        private bool Execute_Polar_Trans_Contour_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;
            double in7_obj = 0;
            int in8_obj = 0;
            int in9_obj = 0;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 11 && param_list[0] == "polar_trans_contour_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);
                in8_obj = tool_values.Get_Value_Integer(param_list[8]);
                in9_obj = tool_values.Get_Value_Integer(param_list[9]);

                out1_obj = tool_values.Add_XLD(param_list[10]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PolarTransContourXld(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj, in8_obj, in9_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Polar_Trans_Contour_Xld_Inv()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "polar_trans_contour_xld_inv";
            result.Execute += Execute_Polar_Trans_Contour_Xld_Inv;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.Double, "row", "row", "", "255", null);
            result.In.Add(emValue_Type.Double, "col", "col", "", "255", null);
            result.In.Add(emValue_Type.Double, "angleStart", "angleStart", "", "0", null);
            result.In.Add(emValue_Type.Double, "angleEnd", "angleEnd", "", "6.28319", null);
            result.In.Add(emValue_Type.Double, "radiusStart", "radiusStart", "0", "", null);
            result.In.Add(emValue_Type.Double, "radiusEnd", "radiusEnd", "", "100", null);
            result.In.Add(emValue_Type.Integer, "width in", "width in", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height in", "height in", "", "512", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);

            result.Out.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            return result;
        }
        private bool Execute_Polar_Trans_Contour_Xld_Inv(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;
            double in7_obj = 0;
            int in8_obj = 0;
            int in9_obj = 0;
            int in10_obj = 0;
            int in11_obj = 0;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 13 && param_list[0] == "polar_trans_contour_xld_inv")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);
                in8_obj = tool_values.Get_Value_Integer(param_list[8]);
                in9_obj = tool_values.Get_Value_Integer(param_list[9]);
                in10_obj = tool_values.Get_Value_Integer(param_list[10]);
                in11_obj = tool_values.Get_Value_Integer(param_list[11]);

                out1_obj = tool_values.Add_XLD(param_list[12]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PolarTransContourXldInv(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj, in8_obj, in9_obj, in10_obj, in11_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Polar_Trans_Image_Ext()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList interpolation_list = ArrayList_Tool.New_ArrayList(new string[]{
                                           "'bilinear'",
                                           "'nearest_neighbor'" });

            result.Name = "polar_trans_image_ext";
            result.Execute += Execute_Polar_Trans_Image_Ext;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "256", null);
            result.In.Add(emValue_Type.Integer, "column", "column", "", "256", null);
            result.In.Add(emValue_Type.Double, "angleStart", "angleStart", "", "0", null);
            result.In.Add(emValue_Type.Double, "angleEnd", "angleEnd", "", "6.28319", null);
            result.In.Add(emValue_Type.Double, "radiusStart", "radiusStart", "", "0", null);
            result.In.Add(emValue_Type.Double, "radiusEnd", "radiusEnd", "", "100", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);
            result.In.Add(emValue_Type.String, "interpolation", "interpolation", "", "'nearest_neighbor'", interpolation_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Polar_Trans_Image_Ext(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;
            double in7_obj = 0;
            int in8_obj = 0;
            int in9_obj = 0;
            string in10_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 12 && param_list[0] == "polar_trans_image_ext")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);
                in8_obj = tool_values.Get_Value_Integer(param_list[8]);
                in9_obj = tool_values.Get_Value_Integer(param_list[9]);
                in10_obj = tool_values.Get_Value_String(param_list[10]);

                out1_obj = tool_values.Add_Image(param_list[11]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PolarTransImageExt(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj, in8_obj, in9_obj, in10_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Polar_Trans_Image_Inv()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList interpolation_list = ArrayList_Tool.New_ArrayList(new string[]{
                                           "'bilinear'",
                                           "'nearest_neighbor'" });

            result.Name = "polar_trans_image_inv";
            result.Execute += Execute_Polar_Trans_Image_Inv;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "256", null);
            result.In.Add(emValue_Type.Integer, "column", "column", "", "256", null);
            result.In.Add(emValue_Type.Double, "angleStart", "angleStart", "", "0", null);
            result.In.Add(emValue_Type.Double, "angleEnd", "angleEnd", "", "6.28319", null);
            result.In.Add(emValue_Type.Double, "radiusStart", "radiusStart", "", "0", null);
            result.In.Add(emValue_Type.Double, "radiusEnd", "radiusEnd", "", "100", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);
            result.In.Add(emValue_Type.String, "interpolation", "interpolation", "", "'nearest_neighbor'", interpolation_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Polar_Trans_Image_Inv(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;
            double in7_obj = 0;
            int in8_obj = 0;
            int in9_obj = 0;
            string in10_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 12 && param_list[0] == "polar_trans_image_inv")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);
                in8_obj = tool_values.Get_Value_Integer(param_list[8]);
                in9_obj = tool_values.Get_Value_Integer(param_list[9]);
                in10_obj = tool_values.Get_Value_String(param_list[10]);

                out1_obj = tool_values.Add_Image(param_list[11]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PolarTransImageInv(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj, in8_obj, in9_obj, in10_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Polar_Trans_Region()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList interpolation_list = ArrayList_Tool.New_ArrayList(new string[]{
                                           "'bilinear'",
                                           "'nearest_neighbor'" });

            result.Name = "polar_trans_region";
            result.Execute += Execute_Polar_Trans_Region;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "256", null);
            result.In.Add(emValue_Type.Integer, "column", "column", "", "256", null);
            result.In.Add(emValue_Type.Double, "angleStart", "angleStart", "", "0", null);
            result.In.Add(emValue_Type.Double, "angleEnd", "angleEnd", "", "6.28319", null);
            result.In.Add(emValue_Type.Double, "radiusStart", "radiusStart", "", "0", null);
            result.In.Add(emValue_Type.Double, "radiusEnd", "radiusEnd", "", "100", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);
            result.In.Add(emValue_Type.String, "interpolation", "interpolation", "", "'nearest_neighbor'", interpolation_list);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Polar_Trans_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;
            double in7_obj = 0;
            int in8_obj = 0;
            int in9_obj = 0;
            string in10_obj = "";

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 12 && param_list[0] == "polar_trans_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);
                in8_obj = tool_values.Get_Value_Integer(param_list[8]);
                in9_obj = tool_values.Get_Value_Integer(param_list[9]);
                in10_obj = tool_values.Get_Value_String(param_list[10]);

                out1_obj = tool_values.Add_Region(param_list[11]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PolarTransRegion(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj, in8_obj, in9_obj, in10_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Polar_Trans_Region_Inv()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList interpolation_list = ArrayList_Tool.New_ArrayList(new string[]{
                                           "'bilinear'",
                                           "'nearest_neighbor'" });

            result.Name = "polar_trans_region_inv";
            result.Execute += Execute_Polar_Trans_Region_Inv;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "256", null);
            result.In.Add(emValue_Type.Integer, "column", "column", "", "256", null);
            result.In.Add(emValue_Type.Double, "angleStart", "angleStart", "", "0", null);
            result.In.Add(emValue_Type.Double, "angleEnd", "angleEnd", "", "6.28319", null);
            result.In.Add(emValue_Type.Double, "radiusStart", "radiusStart", "", "0", null);
            result.In.Add(emValue_Type.Double, "radiusEnd", "radiusEnd", "", "100", null);
            result.In.Add(emValue_Type.Integer, "width In", "width In", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height In", "height In", "", "512", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);
            result.In.Add(emValue_Type.String, "interpolation", "interpolation", "", "'nearest_neighbor'", interpolation_list);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Polar_Trans_Region_Inv(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;
            double in7_obj = 0;
            int in8_obj = 0;
            int in9_obj = 0;
            int in10_obj = 0;
            int in11_obj = 0;
            string in12_obj = "";

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 14 && param_list[0] == "polar_trans_region_inv")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);
                in8_obj = tool_values.Get_Value_Integer(param_list[8]);
                in9_obj = tool_values.Get_Value_Integer(param_list[9]);
                in10_obj = tool_values.Get_Value_Integer(param_list[10]);
                in11_obj = tool_values.Get_Value_Integer(param_list[11]);
                in12_obj = tool_values.Get_Value_String(param_list[12]);

                out1_obj = tool_values.Add_Region(param_list[13]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PolarTransRegionInv(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj,
                                                                     in7_obj, in8_obj, in9_obj, in10_obj, in11_obj, in12_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Pouring()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'all'", 
                                  "'maxima'",
                                  "'regions'"  });

            result.Name = "Pouring";
            result.Execute += Execute_Pouring;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'all'", mode_list);
            result.In.Add(emValue_Type.Integer, "minGray", "minGray", "", "0", null);
            result.In.Add(emValue_Type.Integer, "maxGray", "maxGray", "", "255", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Pouring(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;
            int in4_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "Pouring")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Pouring(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Power_Byte()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "power_byte";
            result.Execute += Execute_Power_Byte;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Power_Byte(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "power_byte")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PowerByte();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Power_Ln()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "power_ln";
            result.Execute += Execute_Power_Ln;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Power_Ln(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "power_ln")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PowerLn();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Power_Real()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "power_real";
            result.Execute += Execute_Power_Real;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Power_Real(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "power_Real")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PowerReal();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Pow_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "pow_image";
            result.Execute += Execute_Pow_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "exponent", "exponent", "", "2", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Pow_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            double in2_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "pow_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PowImage(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Prewitt_Amp()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "prewitt_amp";
            result.Execute += Execute_Prewitt_Amp;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Prewitt_Amp(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "prewitt_amp")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PrewittAmp();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Prewitt_Dir()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "prewitt_dir";
            result.Execute += Execute_Prewitt_Dir;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image Amp", "Image Amp", "", "", null);
            result.Out.Add(emValue_Type.Image, "Image Dir", "Image Dir", "", "", null);
            return result;
        }
        private bool Execute_Prewitt_Dir(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "prewitt_dir")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                out2_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.PrewittDir(out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Projective_Trans_Contour_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "projective_trans_contour_xld";
            result.Execute += Execute_Projective_Trans_Contour_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.HomMat2D, "HomMat2D", "HomMat2D", "", "", null);
            result.Out.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            return result;
        }
        private bool Execute_Projective_Trans_Contour_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            HHomMat2D in2_obj = null;
            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 13 && param_list[0] == "projective_trans_contour_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_HomMat2D(param_list[2]);
                out1_obj = tool_values.Add_XLD(param_list[3]);

                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ProjectiveTransContourXld(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Projective_Trans_Image()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList interpolation_list = ArrayList_Tool.New_ArrayList(new string[]{
                                           "'bilinear'",
                                           "'nearest_neighbor'"  });
            ArrayList adaptImageSize_list = ArrayList_Tool.New_ArrayList(new string[]{
                                            "'false'",
                                            "'true'"  });
            ArrayList transformDomain_list = ArrayList_Tool.New_ArrayList(new string[]{
                                            "'false'",
                                            "'true'"  });

            result.Name = "projective_trans_image";
            result.Execute += Execute_Projective_Trans_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.HomMat2D, "homMat2D", "homMat2D", "", "", null);
            result.In.Add(emValue_Type.String, "interpolation", "interpolation", "", "'bilinear'", interpolation_list);
            result.In.Add(emValue_Type.String, "adaptImageSize", "adaptImageSize", "", "'false'", adaptImageSize_list);
            result.In.Add(emValue_Type.String, "transformDomain", "transformDomain", "", "'false'", transformDomain_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Projective_Trans_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HHomMat2D in2_obj = null;
            string in3_obj = "";
            string in4_obj = "";
            string in5_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "projective_trans_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_HomMat2D(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);
                in5_obj = tool_values.Get_Value_String(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ProjectiveTransImage(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Projective_Trans_Image_Size()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList interpolation_list = ArrayList_Tool.New_ArrayList(new string[]{
                                           "'bilinear'",
                                           "'nearest_neighbor'"  });
            ArrayList transformDomain_list = ArrayList_Tool.New_ArrayList(new string[]{
                                            "'false'",
                                            "'true'"  });


            result.Name = "projective_trans_image_size";
            result.Execute += Execute_Projective_Trans_Image_Size;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.HomMat2D, "homMat2D", "homMat2D", "", "", null);
            result.In.Add(emValue_Type.String, "interpolation", "interpolation", "", "'bilinear'", interpolation_list);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);
            result.In.Add(emValue_Type.String, "transformDomain", "transformDomain", "", "'false'", transformDomain_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Projective_Trans_Image_Size(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HHomMat2D in2_obj = null;
            string in3_obj = "";
            int in4_obj = 0;
            int in5_obj = 0;
            string in6_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 8 && param_list[0] == "projective_trans_image_size")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_HomMat2D(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);

                out1_obj = tool_values.Add_Image(param_list[7]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ProjectiveTransImageSize(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
       
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Projective_Trans_Region()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList interpolation_list = ArrayList_Tool.New_ArrayList(new string[]{
                                           "'bilinear'",
                                           "'nearest_neighbor'" });

            result.Name = "projective_trans_region";
            result.Execute += Execute_Projective_Trans_Region;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.HomMat2D, "homMat2D", "homMat2D", "", "", null);
            result.In.Add(emValue_Type.String, "interpolation", "interpolation", "", "'bilinear'", interpolation_list);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Projective_Trans_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            HHomMat2D in2_obj = null;
            string in3_obj = "";

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "projective_trans_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_HomMat2D(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ProjectiveTransRegion(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Pruning()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "pruning";
            result.Execute += Execute_Pruning;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "length", "length", "", "2", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Pruning(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            int in2_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "pruning")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Pruning(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region R
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Rank_Image()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList margin_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'mirrored'",
                                    "'cyclic'",
                                    "'continued'",
                                    "0",
                                    "30",
                                    "60",
                                    "90",
                                    "120",
                                    "150",
                                    "180", 
                                    "210",
                                    "240",
                                    "255"  });

            result.Name = "rank_image";
            result.Execute += Execute_Rank_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Region, "mask", "mask", "", "", null);
            result.In.Add(emValue_Type.Integer, "rank", "rank", "", "5", null);
            result.In.Add(emValue_Type.String, "margin", "margin", "", "'mirrored'", margin_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Rank_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HRegion in2_obj = null;
            int in3_obj = 0;
            string in4_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "rank_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.RankImage(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Rank_N()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "rank_n";
            result.Execute += Execute_Rank_N;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "rankIndex", "rankIndex", "", "2", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Rank_N(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "rank_n")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.RankN(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Rank_Rect()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "rank_rect";
            result.Execute += Execute_Rank_Rect;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "maskWidth", "maskWidth", "", "15", null);
            result.In.Add(emValue_Type.Integer, "maskHeight", "maskHeight", "", "15", null);
            result.In.Add(emValue_Type.Integer, "rank", "rank", "", "5", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Rank_Rect(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "rank_rect")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.RankRect(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Rank_Region()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "rank_region";
            result.Execute += Execute_Rank_Region;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "15", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "15", null);
            result.In.Add(emValue_Type.Integer, "number", "number", "", "70", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Rank_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "rank_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.RankRegion(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Read_Gray_Se()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "read_gray_se";
            result.Execute += Execute_Read_Gray_Se;
            result.In.Add(emValue_Type.String, "fileName", "fileName", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Read_Gray_Se(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            string in1_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "read_gray_se")
            {
                in1_obj = tool_values.Get_Value_String(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.ReadGraySe(in1_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Read_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "read_image";
            result.Execute += Execute_Read_Image;
            result.In.Add(emValue_Type.String, "fileName", "fileName", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Read_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            string in1_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "read_image")
            {
                in1_obj = tool_values.Get_Value_String(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.ReadImage(in1_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Read_Region()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "read_region";
            result.Execute += Execute_Read_Region;
            result.In.Add(emValue_Type.String, "fileName", "fileName", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Read_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            string in1_obj = "";

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "read_region")
            {
                in1_obj = tool_values.Get_Value_String(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);
                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.ReadRegion(in1_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Read_Shape_Model()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "read_shape_model";
            result.Execute += Execute_Read_Shape_Model;
            result.In.Add(emValue_Type.String, "File Name", "File Name", "", "", null);
            result.Out.Add(emValue_Type.ShapeModel, "Out ShapeModel", "Out ShapeModel", "", "", null);
            return result;
        }
        private bool Execute_Read_Shape_Model(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            string in1_obj = "";
            TTool_Value_ShapeModel out_obj = null;

            if (param_list.Length == 3 && param_list[0] == "read_shape_model")
            {
                in1_obj = tool_values.Get_Value_String(param_list[1]);

                out_obj = tool_values.Add_ShapeModel(param_list[2]);
                if (in1_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value.ReadShapeModel(in1_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Read_Ocr_Trainf()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "read_ocr_trainf";
            result.Execute += Execute_Read_Ocr_Trainf;
            result.In.Add(emValue_Type.String, "fileName", "fileName", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "CharacterNames", "CharacterNames", "", "", null);
            return result;
        }
        private bool Execute_Read_Ocr_Trainf(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            string in1_obj = "";

            TTool_Value_Image out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "read_ocr_trainf")
            {
                in1_obj = tool_values.Get_Value_String(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);
                if (out1_obj != null)
                {
                    try
                    {
                        out2_obj.Value = out1_obj.Value.ReadOcrTrainf(in1_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Read_Ocr_Trainf_Select()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "read_ocr_trainf_select";
            result.Execute += Execute_Read_Ocr_Trainf_Select;
            result.In.Add(emValue_Type.String, "fileName", "fileName", "", "", null);
            result.In.Add(emValue_Type.String, "SearchNames", "SearchNames", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "FoundNames", "FoundNames", "", "", null);
            return result;
        }
        private bool Execute_Read_Ocr_Trainf_Select(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            string in1_obj = "";
            string in2_obj = "";

            TTool_Value_Image out1_obj = null;
            TTool_Value_String out2_obj = null;

            if (param_list.Length == 5 && param_list[0] == "read_ocr_trainf_select")
            {
                in1_obj = tool_values.Get_Value_String(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                out2_obj = tool_values.Add_String(param_list[4]);
                if (out1_obj != null)
                {
                    try
                    {
                        out2_obj.Value = out1_obj.Value.ReadOcrTrainfSelect(in1_obj, in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Real_To_Complex()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "real_to_complex";
            result.Execute += Execute_Real_To_Complex;
            result.In.Add(emValue_Type.Image, "ImageReal", "ImageReal", "", "", null);
            result.In.Add(emValue_Type.Image, "ImageImaginary", "ImageImaginary", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Real_To_Complex(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HImage in2_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "real_to_complex")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.RealToComplex(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Real_To_Vector_Field()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList type_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'vector_field_absolute'",
                                  "'vector_field_relative'" });

            result.Name = "real_to_vector_field";
            result.Execute += Execute_Real_To_Vector_Field;
            result.In.Add(emValue_Type.Image, "Image Row", "Image Row", "", "", null);
            result.In.Add(emValue_Type.Image, "Image Col", "Image Col", "", "", null);
            result.In.Add(emValue_Type.String, "type", "type", "", "'vector_field_relative'", type_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Real_To_Vector_Field(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            HImage in2_obj = null;
            string in3_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "real_to_vector_field")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.RealToVectorField(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Rectangle1_Domain()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList type_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'vector_field_absolute'",
                                  "'vector_field_relative'" });

            result.Name = "rectangle1_domain";
            result.Execute += Execute_Rectangle1_Domain;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "row1", "row1", "", "", null);
            result.In.Add(emValue_Type.Integer, "col1", "col1", "", "", null);
            result.In.Add(emValue_Type.Integer, "row2", "row2", "", "", null);
            result.In.Add(emValue_Type.Integer, "col2", "col2", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Rectangle1_Domain(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "rectangle1_domain")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Rectangle1Domain(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Rectangularity()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "rectangularity";
            result.Execute += Execute_Rectangularity;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "rectangularity", "rectangularity", "", "", null);
            return result;
        }
        private bool Execute_Rectangularity(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "rectangularity")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Rectangularity();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Reduce_Domain()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "reduce_domain";
            result.Execute += Execute_Reduce_Domain;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);

            result.Out.Add(emValue_Type.Image, "Result Image", "Result Image", "", "", null);
            return result;
        }
        private bool Execute_Reduce_Domain(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "reduce_domain")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ReduceDomain(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Region_Features()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList features_list = ArrayList_Tool.New_ArrayList(new string[]{
                                      "'anisometry'",
                                      "'area'",
                                      "'area_holes'",
                                      "'bulkiness'",
                                      "'circularity'",
                                      "'column'",
                                      "'column1'",
                                      "'column2'",
                                      "'compactness'",
                                      "'connect_num'",
                                      "'contlength'",
                                      "'convexity'",
                                      "'dist_deviation'",
                                      "'dist_mean'",
                                      "'euler_number'",
                                      "'height'",
                                      "'holes_num'",
                                      "'inner_height'",
                                      "'inner_radius'",
                                      "'inner_width'",
                                      "'max_diameter'", 
                                      "'moments_i1'",
                                      "'moments_i2'",
                                      "'moments_i3'", 
                                      "'moments_i4'",
                                      "'moments_ia'",
                                      "'moments_ib'",
                                      "'moments_m02'",
                                      "'moments_m02_invar'", 
                                      "'moments_m03'",
                                      "'moments_m03_invar'",
                                      "'moments_m11'",
                                      "'moments_m11_invar'", 
                                      "'moments_m12'", 
                                      "'moments_m12_invar'",
                                      "'moments_m20'", 
                                      "'moments_m20_invar'", 
                                      "'moments_m21'", 
                                      "'moments_m21_invar'",
                                      "'moments_m30'",
                                      "'moments_m30_invar'",
                                      "'moments_phi1'",
                                      "'moments_phi2'",
                                      "'moments_psi1'",
                                      "'moments_psi2'",
                                      "'moments_psi3'",
                                      "'moments_psi4'",
                                      "'num_sides'", 
                                      "'orientation'", 
                                      "'outer_radius'", 
                                      "'phi'", 
                                      "'ra'", 
                                      "'rb'",
                                      "'rect2_len1'",
                                      "'rect2_len2'",
                                      "'rect2_phi'", 
                                      "'rectangularity'",
                                      "'roundness'", 
                                      "'row'",
                                      "'row1'",
                                      "'row2'",
                                      "'struct_factor'",
                                      "'width'"  });

            result.Name = "region_features";
            result.Execute += Execute_Region_Features;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.String, "features", "features", "", "'area'", features_list);

            result.Out.Add(emValue_Type.HTuple, "rectangularity", "rectangularity", "", "", null);
            return result;
        }
        private bool Execute_Region_Features(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            string in2_obj = "";

            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "region_features")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                out1_obj = tool_values.Add_HTuple(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.RegionFeatures(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Region_To_Bin()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "region_to_bin";
            result.Execute += Execute_Region_To_Bin;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "foregroundGray", "foregroundGray", "", "128", null);
            result.In.Add(emValue_Type.Integer, "backgroundGray", "backgroundGray", "", "0", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "640", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "480", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Region_To_Bin(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "region_to_bin")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.RegionToBin(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Region_To_Label()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList type_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'byte'", 
                                  "'int2'",
                                  "'int4'",
                                  "'int8'" });

            result.Name = "region_to_label";
            result.Execute += Execute_Region_To_Label;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.String, "type", "type", "", "'int2'", type_list);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "640", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "480", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Region_To_Label(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;
            int in4_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "region_to_label")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);


                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.RegionToLabel(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Region_To_Mean()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "region_to_mean";
            result.Execute += Execute_Region_To_Mean;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Region_To_Mean(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "region_to_mean")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.RegionToMean(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Regiongrowing()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "regiongrowing";
            result.Execute += Execute_Regiongrowing;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "3", null);
            result.In.Add(emValue_Type.Integer, "column", "column", "", "3", null);
            result.In.Add(emValue_Type.Double, "tolerance", "tolerance", "", "6", null);
            result.In.Add(emValue_Type.Integer, "minSize", "minSize", "", "100", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Regiongrowing(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            double in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "regiongrowing")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Region(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Regiongrowing(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Regiongrowing_Mean()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "regiongrowing_mean";
            result.Execute += Execute_Regiongrowing_Mean;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.In.Add(emValue_Type.HTuple, "column", "column", "", "", null);
            result.In.Add(emValue_Type.Double, "tolerance", "tolerance", "", "6", null);
            result.In.Add(emValue_Type.Integer, "minSize", "minSize", "", "100", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Regiongrowing_Mean(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HTuple in2_obj = null;
            HTuple in3_obj = null;
            double in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "regiongrowing_mean")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_HTuple(param_list[2]);
                in3_obj = tool_values.Get_Value_HTuple(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Region(param_list[6]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.RegiongrowingMean(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Regiongrowing_N()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList metric_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'1-norm'",
                                    "'2-norm'",
                                    "'3-norm'",
                                    "'4-norm'",
                                    "'correlation'",
                                    "'dot-product'",
                                    "'gray-max-diff'",
                                    "'gray-max-ratio'",
                                    "'gray-min-diff'",
                                    "'gray-min-ratio'",
                                    "'length-diff'",
                                    "'length-ratio'",
                                    "'max-abs-diff'",
                                    "'max-abs-ratio'",
                                    "'max-diff'",
                                    "'mean-abs-diff'", 
                                    "'mean-abs-ratio'",
                                    "'mean-diff'", 
                                    "'mean-ratio'",
                                    "'min-abs-diff'",
                                    "'min-abs-ratio'",
                                    "'min-diff'", 
                                    "'n-norm'", 
                                    "'n-norm-ratio'",
                                    "'plane'", 
                                    "'variance'",
                                    "'variance-diff'", 
                                    "'variance-ratio'" });

            result.Name = "regiongrowing_n";
            result.Execute += Execute_Regiongrowing_N;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "metric", "metric", "", "'2-norm'", metric_list);
            result.In.Add(emValue_Type.Double, "minTolerance", "minTolerance", "", "", null);
            result.In.Add(emValue_Type.Double, "maxTolerance", "maxTolerance", "", "6", null);
            result.In.Add(emValue_Type.Integer, "minSize", "minSize", "", "100", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Regiongrowing_N(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";
            double in3_obj = 0;
            double in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "regiongrowing_n")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Region(param_list[6]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.RegiongrowingN(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Remove_Noise_Region()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList type_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'n_4'",
                                  "'n_48'", 
                                  "'n_8'" });

            result.Name = "remove_noise_region";
            result.Execute += Execute_Remove_Noise_Region;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.String, "type", "type", "", "'int2'", type_list);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Remove_Noise_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            string in2_obj = "";

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "remove_noise_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.RemoveNoiseRegion(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Rft_Generic()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList direction_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'from_freq'", 
                                       "'to_freq'" });
            ArrayList norm_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'n'",
                                  "'none'",
                                  "'sqrt'" });
            ArrayList resultType_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "'byte'",
                                        "'complex'", 
                                        "'cyclic'", 
                                        "'direction'", 
                                        "'int1'", 
                                        "'int2'", 
                                        "'int4'", 
                                        "'real'", 
                                        "'uint2'" });


            result.Name = "rft_generic";
            result.Execute += Execute_Rft_Generic;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "direction", "direction", "", "'to_freq'", direction_list);
            result.In.Add(emValue_Type.String, "norm", "norm", "", "'sqrt'", norm_list);
            result.In.Add(emValue_Type.String, "resultType", "resultType", "", "'complex'", resultType_list);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Rft_Generic(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";
            string in3_obj = "";
            string in4_obj = "";
            int in5_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "rft_generic")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.RftGeneric(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Rgb1_To_Gray()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "rgb1_to_gray";
            result.Execute += Execute_Rgb1_To_Gray;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Rgb1_To_Gray(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "rgb1_to_gray")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Rgb1ToGray();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Rgb3_To_Gray()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "rgb3_to_gray";
            result.Execute += Execute_Rgb3_To_Gray;
            result.In.Add(emValue_Type.Image, "Image R", "Image R", "", "", null);
            result.In.Add(emValue_Type.Image, "Image G", "Image G", "", "", null);
            result.In.Add(emValue_Type.Image, "Image B", "Image B", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Rgb3_To_Gray(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            HImage in3_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "rgb3_to_gray")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Image(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && in2_obj != null && in3_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Rgb3ToGray(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Roberts()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList filterType_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "'gradient_max'", 
                                        "'gradient_sum'", 
                                        "'roberts_max'" });

            result.Name = "roberts";
            result.Execute += Execute_Roberts;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "filterType", "filterType", "", "'gradient_sum'", filterType_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Roberts(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "roberts")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Roberts(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Robinson_Amp()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "robinson_amp";
            result.Execute += Execute_Robinson_Amp;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Robinson_Amp(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "robinson_amp")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.RobinsonAmp();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Robinson_Dir()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "robinson_dir";
            result.Execute += Execute_Robinson_Dir;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image Amp", "Image Amp", "", "", null);
            result.Out.Add(emValue_Type.Image, "Image Dir", "Image Dir", "", "", null);
            return result;
        }
        private bool Execute_Robinson_Dir(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "robinson_dir")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                out2_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.RobinsonDir(out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Rotate_Image()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList interpolation_list = ArrayList_Tool.New_ArrayList(new string[]{
                                           "'bilinear'",
                                           "'constant'",
                                           "'nearest_neighbor'",
                                           "'weighted'" });

            result.Name = "rotate_image";
            result.Execute += Execute_Rotate_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "phi", "phi", "", "90", null);
            result.In.Add(emValue_Type.String, "interpolation", "interpolation", "", "'constant'", interpolation_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Rotate_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            double in2_obj = 0;
            string in3_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "rotate_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.RotateImage(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Roundness()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "roundness";
            result.Execute += Execute_Roundness;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "distance", "distance", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "sigma", "sigma", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "roundness", "roundness", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "sides", "sides", "", "", null);
            return result;
        }
        private bool Execute_Roundness(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;

            if (param_list.Length == 6 && param_list[0] == "roundness")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);
                out3_obj = tool_values.Add_HTuple(param_list[4]);
                out4_obj = tool_values.Add_HTuple(param_list[5]);
                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Roundness(out out2_obj.Value, out out3_obj.Value, out out4_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Runlength_Distribution()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "runlength_distribution";
            result.Execute += Execute_Runlength_Distribution;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "Foreground", "Foreground", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "Background", "Background", "", "", null);
            return result;
        }
        private bool Execute_Runlength_Distribution(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "runlength_distribution")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);
                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.RunlengthDistribution(out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Runlength_Features()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "runlength_features";
            result.Execute += Execute_Runlength_Features;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "NumRuns", "NumRuns", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "KFactor", "KFactor", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "LFactor", "LFactor", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "meanLength", "meanLength", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "bytes", "bytes", "", "", null);
            return result;
        }
        private bool Execute_Runlength_Features(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;
            TTool_Value_HTuple out5_obj = null;

            if (param_list.Length == 7 && param_list[0] == "runlength_features")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);
                out3_obj = tool_values.Add_HTuple(param_list[4]);
                out4_obj = tool_values.Add_HTuple(param_list[5]);
                out5_obj = tool_values.Add_HTuple(param_list[6]);
                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.RunlengthFeatures(out out2_obj.Value, out out3_obj.Value, out out4_obj.Value, out out5_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region S
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Saddle_Points_Sub_Pix()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList filter_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'facet'", 
                                    "'gauss'"  });

            result.Name = "saddle_points_sub_pix";
            result.Execute += Execute_Saddle_Points_Sub_Pix;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "filter", "filter", "", "'facet'", filter_list);
            result.In.Add(emValue_Type.Double, "sigma", "sigma", "", "0.7", null);
            result.In.Add(emValue_Type.Double, "threshold", "threshold", "", "5", null);

            result.Out.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "column", "column", "", "", null);
            return result;
        }
        private bool Execute_Saddle_Points_Sub_Pix(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";
            double in3_obj = 0;
            double in4_obj = 0;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 7 && param_list[0] == "saddle_points_sub_pix")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);

                out1_obj = tool_values.Add_HTuple(param_list[5]);
                out2_obj = tool_values.Add_HTuple(param_list[6]);
                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        in1_obj.SaddlePointsSubPix(in2_obj, in3_obj, in4_obj, out out1_obj.Value, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Scale_Image()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList filter_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'facet'", 
                                    "'gauss'"  });

            result.Name = "scale_image";
            result.Execute += Execute_Scale_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "mult", "mult", "", "0.7", null);
            result.In.Add(emValue_Type.Double, "add", "add", "", "5", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Scale_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "scale_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ScaleImage(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Scale_Image_Max()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "scale_image_max";
            result.Execute += Execute_Scale_Image_Max;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Scale_Image_Max(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "scale_image_max")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ScaleImageMax();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Segment_Characters()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList method_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'local_auto_shape'",
                                    "'local_contrast_best'"  });
            ArrayList eliminateLines_list = ArrayList_Tool.New_ArrayList(new string[]{
                                           "'false'",
                                           "'true'"  });
            ArrayList dotPrint_list = ArrayList_Tool.New_ArrayList(new string[]{
                                           "'false'",
                                           "'true'"  });
            ArrayList strokeWidth_list = ArrayList_Tool.New_ArrayList(new string[]{
                                         "'bold'",
                                         "'light'",
                                         "'medium'",
                                         "'ultra_light'"  });


            result.Name = "segment_characters";
            result.Execute += Execute_Segment_Characters;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "method", "method", "", "'local_auto_shape'", method_list);
            result.In.Add(emValue_Type.String, "eliminateLines", "eliminateLines", "", "'false'", eliminateLines_list);
            result.In.Add(emValue_Type.String, "dotPrint", "dotPrint", "", "'false'", dotPrint_list);
            result.In.Add(emValue_Type.String, "strokeWidth", "strokeWidth", "", "'medium'", strokeWidth_list);
            result.In.Add(emValue_Type.HTuple, "charWidth", "charWidth", "", "25", null);
            result.In.Add(emValue_Type.HTuple, "charHeight", "charHeight", "", "25", null);
            result.In.Add(emValue_Type.Integer, "thresholdOffset", "thresholdOffset", "", "0", null);
            result.In.Add(emValue_Type.Integer, "contrast", "contrast", "", "10", null);

            result.Out.Add(emValue_Type.Image, "ImageForeground", "ImageForeground", "", "", null);
            result.Out.Add(emValue_Type.Region, "RegionForeground", "RegionForeground", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "usedThreshold", "usedThreshold", "", "", null);
            return result;
        }
        private bool Execute_Segment_Characters(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            HImage in2_obj = null;
            string in3_obj = "";
            string in4_obj = "";
            string in5_obj = "";
            string in6_obj = "";
            HTuple in7_obj = null;
            HTuple in8_obj = null;
            int in9_obj = 0;
            int in10_obj = 0;

            TTool_Value_Image out1_obj = null;
            TTool_Value_Region out2_obj = null;
            TTool_Value_HTuple out3_obj = null;

            if (param_list.Length == 14 && param_list[0] == "segment_characters")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);
                in5_obj = tool_values.Get_Value_String(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);
                in7_obj = tool_values.Get_Value_HTuple(param_list[7]);
                in8_obj = tool_values.Get_Value_HTuple(param_list[8]);
                in9_obj = tool_values.Get_Value_Integer(param_list[9]);
                in10_obj = tool_values.Get_Value_Integer(param_list[10]);

                out1_obj = tool_values.Add_Image(param_list[11]);
                out2_obj = tool_values.Add_Region(param_list[12]);
                out3_obj = tool_values.Add_HTuple(param_list[13]);
                if (in1_obj != null && in2_obj != null && in7_obj != null && in8_obj != null &&
                    out1_obj != null && out2_obj != null && out3_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SegmentCharacters(in2_obj,
                                                                   out out2_obj.Value,
                                                                   in3_obj, in4_obj, in5_obj,
                                                                   in6_obj, in7_obj, in8_obj, in9_obj, in10_obj,
                                                                   out out3_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Select_Characters()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList bool_list = ArrayList_Tool.New_ArrayList(new string[]{
                                           "'false'",
                                           "'true'"  });
            ArrayList strokeWidth_list = ArrayList_Tool.New_ArrayList(new string[]{
                                         "'bold'",
                                         "'light'",
                                         "'medium'",
                                         "'ultra_light'"  });
            ArrayList partitionMethod_list = ArrayList_Tool.New_ArrayList(new string[]{
                                             "'fixed_width'",
                                             "'none'", 
                                             "'variable_width'"  });
            ArrayList fragmentDistance_list = ArrayList_Tool.New_ArrayList(new string[]{
                                              "'medium'", 
                                              "'narrow'", 
                                              "'wide'" });
            ArrayList stopAfter_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'completion'",
                                       "'step1_select_candidates'",
                                       "'step2_partition_characters'",
                                       "'step3_connect_fragments'",
                                       "'step4_select_characters'" });


            result.Name = "select_characters";
            result.Execute += Execute_Select_Characters;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.String, "dotPrint", "dotPrint", "", "'false'", bool_list);
            result.In.Add(emValue_Type.String, "strokeWidth", "strokeWidth", "", "'medium'", strokeWidth_list);
            result.In.Add(emValue_Type.HTuple, "charWidth", "charWidth", "", "25", null);
            result.In.Add(emValue_Type.HTuple, "charHeight", "charHeight", "", "25", null);
            result.In.Add(emValue_Type.String, "punctuation", "punctuation", "", "'false'", bool_list);
            result.In.Add(emValue_Type.String, "diacriticMarks", "diacriticMarks", "", "'false'", bool_list);
            result.In.Add(emValue_Type.String, "partitionMethod", "partitionMethod", "", "'none'", partitionMethod_list);
            result.In.Add(emValue_Type.String, "partitionLines", "partitionLines", "", "'false'", bool_list);
            result.In.Add(emValue_Type.String, "fragmentDistance", "fragmentDistance", "", "'medium'", fragmentDistance_list);
            result.In.Add(emValue_Type.String, "connectFragments", "connectFragments", "", "'false'", bool_list);
            result.In.Add(emValue_Type.Integer, "clutterSizeMax", "clutterSizeMax", "", "0", null);
            result.In.Add(emValue_Type.String, "stopAfter", "stopAfter", "", "'completion'", stopAfter_list);

            result.Out.Add(emValue_Type.Region, "RegionCharacters", "RegionCharacters", "", "", null);
            return result;
        }
        private bool Execute_Select_Characters(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            string in2_obj = "";
            string in3_obj = "";
            HTuple in4_obj = null;
            HTuple in5_obj = null;
            string in6_obj = "";
            string in7_obj = "";
            string in8_obj = "";
            string in9_obj = "";
            string in10_obj = "";
            string in11_obj = "";
            int in12_obj = 0;
            string in13_obj = "";

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 15 && param_list[0] == "select_characters")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_HTuple(param_list[4]);
                in5_obj = tool_values.Get_Value_HTuple(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);
                in7_obj = tool_values.Get_Value_String(param_list[7]);
                in8_obj = tool_values.Get_Value_String(param_list[8]);
                in9_obj = tool_values.Get_Value_String(param_list[9]);
                in10_obj = tool_values.Get_Value_String(param_list[10]);
                in11_obj = tool_values.Get_Value_String(param_list[11]);
                in12_obj = tool_values.Get_Value_Integer(param_list[12]);
                in13_obj = tool_values.Get_Value_String(param_list[13]);

                out1_obj = tool_values.Add_Region(param_list[14]);
                if (in1_obj != null && in4_obj != null && in5_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SelectCharacters(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj,
                                                                  in7_obj, in8_obj, in9_obj, in10_obj, in11_obj, in12_obj, in13_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Select_Grayvalues_From_Channels()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "select_grayvalues_from_channels";
            result.Execute += Execute_Select_Grayvalues_From_Channels;
            result.In.Add(emValue_Type.Image, "Multichannel Image", "Multichannel Image", "", "", null);
            result.In.Add(emValue_Type.Image, "IndexImage", "IndexImage", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Select_Grayvalues_From_Channels(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "select_grayvalues_from_channels")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SelectGrayvaluesFromChannels(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Select_Matching_Lines()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "select_matching_lines";
            result.Execute += Execute_Select_Matching_Lines;
            result.In.Add(emValue_Type.Region, "angleIn", "angleIn", "", "", null);
            result.In.Add(emValue_Type.Double, "distIn", "distIn", "", "", null);
            result.In.Add(emValue_Type.Double, "strokeWidth", "strokeWidth", "", "", null);
            result.In.Add(emValue_Type.Integer, "lineWidth", "lineWidth", "", "7", null);
            result.In.Add(emValue_Type.Integer, "thresh", "thresh", "", "100", null);

            result.Out.Add(emValue_Type.Region, "RegionLines", "RegionLines", "", "", null);
            result.Out.Add(emValue_Type.Double, "angleOut", "angleOut", "", "", null);
            result.Out.Add(emValue_Type.Double, "distOut", "distOut", "", "", null);
            return result;
        }
        private bool Execute_Select_Matching_Lines(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            int in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_Region out1_obj = null;
            TTool_Value_Double out2_obj = null;
            TTool_Value_Double out3_obj = null;

            if (param_list.Length == 9 && param_list[0] == "select_matching_lines")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Region(param_list[6]);
                out2_obj = tool_values.Add_Double(param_list[7]);
                out3_obj = tool_values.Add_Double(param_list[8]);
                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SelectMatchingLines(in2_obj, in3_obj, in4_obj, in5_obj, out out2_obj.Value, out out3_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Select_Obj_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "select_obj_image";
            result.Execute += Execute_Select_Obj_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "index", "index", "", "1", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Select_Obj_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "select_obj_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SelectObj(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Select_Obj_Region()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "select_obj_region";
            result.Execute += Execute_Select_Obj_Region;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "index", "index", "", "1", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Select_Obj_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            int in2_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "select_obj_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SelectObj(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Select_Region_Point()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "select_region_point";
            result.Execute += Execute_Select_Region_Point;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "1", null);
            result.In.Add(emValue_Type.Integer, "col", "col", "", "1", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Select_Region_Point(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "select_region_point")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SelectRegionPoint(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Select_Region_Spatial()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList direction_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'above'",
                                       "'below'",
                                       "'left'",
                                       "'right'"  });

            result.Name = "select_region_spatial";
            result.Execute += Execute_Select_Region_Spatial;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.Region, "Region2", "Region2", "", "", null);
            result.In.Add(emValue_Type.String, "direction", "direction", "", "'left'", direction_list);

            result.Out.Add(emValue_Type.HTuple, "RegionIndex1", "RegionIndex1", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "RegionIndex2", "RegionIndex2", "", "", null);
            return result;
        }
        private bool Execute_Select_Region_Spatial(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            HRegion in2_obj = null;
            string in3_obj = "";

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 6 && param_list[0] == "select_region_spatial")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_HTuple(param_list[4]);
                out2_obj = tool_values.Add_HTuple(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SelectRegionSpatial(in2_obj, in3_obj, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Select_Shape()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList Features_list = ArrayList_Tool.New_ArrayList(new string[]{
                "'area'",
                "'row'",
                "'column'",
                "'width'",
                "'height'",
                "'row1'",
                "'column1'",
                "'row2'",
                "'column2'",
                "'circularity'",
                "'compactness'",
                "'contlength'",
                "'convexity'",
                "'rectangularity'",
                "'ra'",
                "'rb'",
                "'phi'",
                "'anisometry'",
                "'bulkiness'",
                "'struct_factor'",
                "'outer_radius'",
                "'inner_radius'",
                "'inner_width'",
                "'inner_height'",
                "'dist_mean'",
                "'dist_deviation'",
                "'roundness'",
                "'num_sides'",
                "'connect_num'",
                "'holes_num'",
                "'area_holes'",
                "'max_diameter'",
                "'orientation'",
                "'euler_number'",
                "'rect2_phi'",
                "'rect2_len1'",
                "'rect2_len2'"});
            ArrayList Operation_list = ArrayList_Tool.New_ArrayList(new string[] { "'and'", "'or'" });


            result.Name = "select_shape";
            result.Execute += Execute_Select_Shape;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.String, "features", "features", "", "'area'", Features_list);
            result.In.Add(emValue_Type.String, "operation", "operation", "", "'and'", Operation_list);
            result.In.Add(emValue_Type.Double, "min", "min", "", "", null);
            result.In.Add(emValue_Type.Double, "max", "max", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Select_Shape(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            string in2_obj = "";
            string in3_obj = "";
            double in4_obj = 0;
            double in5_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "select_shape")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);

                out1_obj = tool_values.Add_Region(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SelectShape(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Select_Shape_Proto()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList Features_list = ArrayList_Tool.New_ArrayList(new string[]{
                                      "'covers'", 
                                      "'distance_center'", 
                                      "'distance_contour'", 
                                      "'distance_dilate'",
                                      "'fits'", 
                                      "'overlaps_abs'",
                                      "'overlaps_rel'" });

            result.Name = "select_shape_proto";
            result.Execute += Execute_Select_Shape_Proto;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Region, "pattern", "pattern", "", "", null);
            result.In.Add(emValue_Type.String, "features", "features", "", "'area'", Features_list);
            result.In.Add(emValue_Type.Double, "min", "min", "", "", null);
            result.In.Add(emValue_Type.Double, "max", "max", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Select_Shape_Proto(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            HRegion in2_obj = null;
            string in3_obj = "";
            double in4_obj = 0;
            double in5_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "select_shape_proto")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);

                out1_obj = tool_values.Add_Region(param_list[6]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SelectShapeProto(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Select_Shape_Std()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList shape_list = ArrayList_Tool.New_ArrayList(new string[]{
                                      "'max_area'", 
                                      "'rectangle1'", 
                                      "'rectangle2'"  });

            result.Name = "select_shape_std";
            result.Execute += Execute_Select_Shape_Std;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.String, "shape", "shape", "", "'max_area'", shape_list);
            result.In.Add(emValue_Type.Double, "percent", "percent", "", "70", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Select_Shape_Std(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            string in2_obj = "";
            double in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "select_shape_std")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SelectShapeStd(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Set_Grayval()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "set_grayval";
            result.Execute += Execute_Set_Grayval;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "0", null);
            result.In.Add(emValue_Type.Integer, "column", "column", "", "0", null);
            result.In.Add(emValue_Type.Double, "grayval", "grayval", "", "255", null);
            return result;
        }
        private bool Execute_Set_Grayval(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            double in4_obj = 0;

            if (param_list.Length == 5 && param_list[0] == "set_grayval")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);

                if (in1_obj != null)
                {
                    try
                    {
                        in1_obj.SetGrayval(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Segment_Contours_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList Mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                "'lines'", 
                "'lines_circles'", 
                "'lines_ellipses'"
            });

            result.Name = "segment_contours_xld";
            result.Execute += Execute_Segment_Contours_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.String, "Mode", "Mode", "", "'lines_circles'", Mode_list);
            result.In.Add(emValue_Type.Integer, "Smooth Cont", "Smooth Cont", "", "5", null);
            result.In.Add(emValue_Type.Double, "Max Line Dist1", "Max Line Dist1", "", "4", null);
            result.In.Add(emValue_Type.Double, "Max Line Dist2", "Max Line Dist2", "", "2", null);

            result.Out.Add(emValue_Type.XLD, "Out XLD", "Out XLD", "", "", null);
            return result;
        }
        private bool Execute_Segment_Contours_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            TTool_Value_XLD out_obj = null;

            if (param_list.Length == 7 && param_list[0] == "segment_contours_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);

                out_obj = tool_values.Add_XLD(param_list[6]);
                if (in1_obj != null && in2_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = in1_obj.SegmentContoursXld(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Select_Contours_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList feature_list = ArrayList_Tool.New_ArrayList(new string[]{
                      "'closed'", 
                      "'contour_length'", 
                      "'curvature'", 
                      "'direction'", 
                      "'maximum_extent'", 
                      "'open'" 
            });

            result.Name = "select_contours_xld";
            result.Execute += Execute_Select_Contours_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.String, "feature", "feature", "", "'lines_circles'", feature_list);
            result.In.Add(emValue_Type.Double, "min1", "min1", "", "0.5", null);
            result.In.Add(emValue_Type.Double, "max1", "max1", "", "200", null);
            result.In.Add(emValue_Type.Double, "min2", "min2", "", "-0.5", null);
            result.In.Add(emValue_Type.Double, "max2", "max2", "", "0.5", null);

            result.Out.Add(emValue_Type.XLD, "Out XLD", "Out XLD", "", "", null);
            return result;
        }
        private bool Execute_Select_Contours_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            string in2_obj = "";
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;
            TTool_Value_XLD out_obj = null;

            if (param_list.Length == 8 && param_list[0] == "select_contours_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);

                out_obj = tool_values.Add_XLD(param_list[7]);
                if (in1_obj != null && in2_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = in1_obj.SelectContoursXld(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Select_Shape_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList Features_list = ArrayList_Tool.New_ArrayList(new string[]{
                "'area'",
                "'row'",
                "'column'",
                "'width'",
                "'height'",
                "'row1'",
                "'column1'",
                "'row2'",
                "'column2'",
                "'circularity'",
                "'compactness'",
                "'contlength'",
                "'convexity'",
                "'rectangularity'",
                "'ra'",
                "'rb'",
                "'phi'",
                "'anisometry'",
                "'bulkiness'",
                "'struct_factor'",
                "'outer_radius'",
                "'inner_radius'",
                "'inner_width'",
                "'inner_height'",
                "'dist_mean'",
                "'dist_deviation'",
                "'roundness'",
                "'num_sides'",
                "'connect_num'",
                "'holes_num'",
                "'area_holes'",
                "'max_diameter'",
                "'orientation'",
                "'euler_number'",
                "'rect2_phi'",
                "'rect2_len1'",
                "'rect2_len2'"});
            ArrayList Operation_list = ArrayList_Tool.New_ArrayList(new string[] { "'and'", "'or'" });

            result.Name = "select_shape_xld";
            result.Execute += Execute_Select_Shape_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.String, "feature", "feature", "", "'area'", Features_list);
            result.In.Add(emValue_Type.String, "Operation", "Operation", "", "'and'", Operation_list);
            result.In.Add(emValue_Type.Double, "min", "min", "", "150", null);
            result.In.Add(emValue_Type.Double, "max", "max", "", "999999", null);

            result.Out.Add(emValue_Type.XLD, "Out XLD", "Out XLD", "", "", null);
            return result;
        }
        private bool Execute_Select_Shape_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            string in2_obj = "";
            string in3_obj = "";
            double in4_obj = 0;
            double in5_obj = 0;
            TTool_Value_XLD out_obj = null;

            if (param_list.Length == 7 && param_list[0] == "select_shape_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);

                out_obj = tool_values.Add_XLD(param_list[6]);
                if (in1_obj != null && in2_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = in1_obj.SelectShapeXld(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Select_Xld_Point()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "select_xld_point";
            result.Execute += Execute_Select_Xld_Point;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.Double, "Row", "Row", "", "150", null);
            result.In.Add(emValue_Type.Double, "Col", "Col", "", "150", null);

            result.Out.Add(emValue_Type.XLD, "Out XLD", "Out XLD", "", "", null);
            return result;
        }
        private bool Execute_Select_Xld_Point(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;

            TTool_Value_XLD out_obj = null;

            if (param_list.Length == 5 && param_list[0] == "select_xld_point")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out_obj = tool_values.Add_XLD(param_list[4]);
                if (in1_obj != null && in2_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = in1_obj.SelectXldPoint(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Set_Shape_Model_Metric()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "set_shape_model_metric";
            result.Execute += Execute_Set_Shape_Model_Metric;
            result.In.Add(emValue_Type.ShapeModel, "ShapeModel", "ShapeModel", "", "", null);
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.HomMat2D, "HomMat2D", "HomMat2D", "", "", null);
            result.In.Add(emValue_Type.String, "metric", "metric", "", "", null);
            return result;
        }
        private bool Execute_Set_Shape_Model_Metric(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HShapeModel in1_obj = null;
            HImage in2_obj = null;
            HHomMat2D in3_obj = null;
            string in4_obj = "";
            if (param_list.Length == 5 && param_list[0] == "set_shape_model_metric")
            {
                in1_obj = tool_values.Get_Value_ShapeModel(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_HomMat2D(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                if (in1_obj != null && in2_obj != null && in3_obj != null)
                {
                    try
                    {
                        in1_obj.SetShapeModelMetric(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Set_Shape_Model_Origin()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "set_shape_model_origin";
            result.Execute += Execute_Set_Shape_Model_Origin;
            result.In.Add(emValue_Type.ShapeModel, "ShapeModel", "ShapeModel", "", "", null);
            result.In.Add(emValue_Type.Double, "row", "row", "", "", null);
            result.In.Add(emValue_Type.Double, "col", "col", "", "", null);
            return result;
        }
        private bool Execute_Set_Shape_Model_Origin(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HShapeModel in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            if (param_list.Length == 4 && param_list[0] == "set_shape_model_origin")
            {
                in1_obj = tool_values.Get_Value_ShapeModel(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                if (in1_obj != null)
                {
                    try
                    {
                        in1_obj.SetShapeModelOrigin(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Set_Shape_Model_Param()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "set_shape_model_param";
            result.Execute += Execute_Set_Shape_Model_Param;
            result.In.Add(emValue_Type.ShapeModel, "ShapeModel", "ShapeModel", "", "", null);
            result.In.Add(emValue_Type.HTuple, "genParamNames", "genParamNames", "", "", null);
            result.In.Add(emValue_Type.HTuple, "genParamValues", "genParamValues", "", "", null);
            return result;
        }
        private bool Execute_Set_Shape_Model_Param(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HShapeModel in1_obj = null;
            HTuple in2_obj = null;
            HTuple in3_obj = null;
            if (param_list.Length == 4 && param_list[0] == "set_shape_model_param")
            {
                in1_obj = tool_values.Get_Value_ShapeModel(param_list[1]);
                in2_obj = tool_values.Get_Value_HTuple(param_list[2]);
                in3_obj = tool_values.Get_Value_HTuple(param_list[3]);

                if (in1_obj != null && in2_obj != null && in3_obj != null)
                {
                    try
                    {
                        in1_obj.SetShapeModelParam(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Sfs_Mod_Lr()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "sfs_mod_lr";
            result.Execute += Execute_Sfs_Mod_Lr;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "slant", "slant", "", "45", null);
            result.In.Add(emValue_Type.Double, "tilt", "tilt", "", "45", null);
            result.In.Add(emValue_Type.Double, "albedo", "albedo", "", "1", null);
            result.In.Add(emValue_Type.Double, "ambient", "ambient", "", "0", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Sfs_Mod_Lr(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "sfs_mod_lr")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SfsModLr(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Sfs_Orig_Lr()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "sfs_orig_lr";
            result.Execute += Execute_Sfs_Orig_Lr;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "slant", "slant", "", "45", null);
            result.In.Add(emValue_Type.Double, "tilt", "tilt", "", "45", null);
            result.In.Add(emValue_Type.Double, "albedo", "albedo", "", "1", null);
            result.In.Add(emValue_Type.Double, "ambient", "ambient", "", "0", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Sfs_Orig_Lr(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "sfs_orig_lr")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SfsOrigLr(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Sfs_Pentland()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "sfs_pentland";
            result.Execute += Execute_Sfs_Pentland;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "slant", "slant", "", "45", null);
            result.In.Add(emValue_Type.Double, "tilt", "tilt", "", "45", null);
            result.In.Add(emValue_Type.Double, "albedo", "albedo", "", "1", null);
            result.In.Add(emValue_Type.Double, "ambient", "ambient", "", "0", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Sfs_Pentland(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "sfs_pentland")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SfsPentland(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Shade_Height_Field()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList shadows_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'false'", 
                                    "'true'"  });

            result.Name = "shade_height_field";
            result.Execute += Execute_Shade_Height_Field;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "slant", "slant", "", "45", null);
            result.In.Add(emValue_Type.Double, "tilt", "tilt", "", "45", null);
            result.In.Add(emValue_Type.Double, "albedo", "albedo", "", "1", null);
            result.In.Add(emValue_Type.Double, "ambient", "ambient", "", "0", null);
            result.In.Add(emValue_Type.String, "shadows", "shadows", "", "'false'", shadows_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Shade_Height_Field(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            string in6_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 8 && param_list[0] == "shade_height_field")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);

                out1_obj = tool_values.Add_Image(param_list[7]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ShadeHeightField(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Shape_Histo_All()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList feature_list = ArrayList_Tool.New_ArrayList(new string[]{
                                     "'anisometry'",
                                     "'compactness'",
                                     "'connected_components'",
                                     "'convexity'",
                                     "'holes'"   });

            result.Name = "shape_histo_all";
            result.Execute += Execute_Shape_Histo_All;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "feature", "feature", "", "'connected_components'", feature_list);

            result.Out.Add(emValue_Type.HTuple, "AbsoluteHisto", "AbsoluteHisto", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "RelativeHisto", "RelativeHisto", "", "", null);
            return result;
        }
        private bool Execute_Shape_Histo_All(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            HImage in2_obj = null;
            string in3_obj = "";

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 5 && param_list[0] == "shape_histo_all")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_HTuple(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ShapeHistoAll(in2_obj, in3_obj, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Shape_Histo_Point()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList feature_list = ArrayList_Tool.New_ArrayList(new string[]{
                                     "'anisometry'",
                                     "'compactness'",
                                     "'convexity'",
                                     "'holes'"   });

            result.Name = "shape_histo_point";
            result.Execute += Execute_Shape_Histo_Point;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "feature", "feature", "", "'convexity'", feature_list);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "", null);
            result.In.Add(emValue_Type.Integer, "col", "col", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "AbsoluteHisto", "AbsoluteHisto", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "RelativeHisto", "RelativeHisto", "", "", null);
            return result;
        }
        private bool Execute_Shape_Histo_Point(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            HImage in2_obj = null;
            string in3_obj = "";
            int in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;

            if (param_list.Length == 7 && param_list[0] == "shape_histo_point")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_HTuple(param_list[6]);
                if (in1_obj != null && in2_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ShapeHistoPoint(in2_obj, in3_obj, in4_obj, in5_obj, out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Shape_Trans()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList type_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'convex'",
                                  "'ellipse'",
                                  "'inner_center'",
                                  "'inner_circle'",
                                  "'inner_rectangle1'",
                                  "'outer_circle'", 
                                  "'rectangle1'", 
                                  "'rectangle2'"  });

            result.Name = "shape_trans";
            result.Execute += Execute_Shape_Trans;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.String, "type", "type", "", "'convex'", type_list);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Shape_Trans(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            string in2_obj = "";

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "shape_trans")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ShapeTrans(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Shape_Trans_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList type_list = ArrayList_Tool.New_ArrayList(new string[]
            { 
                "'convex'",
                "'ellipse'",
                "'outer_circle'", 
                "'rectangle1'", 
                "'rectangle2'"
            });
            result.Name = "shape_trans_xld";
            result.Execute += Execute_Shape_Trans_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.String, "type", "type", "", "'convex'", type_list);

            result.Out.Add(emValue_Type.XLD, "Out XLD", "Out XLD", "", "", null);
            return result;
        }
        private bool Execute_Shape_Trans_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            string in2_obj = "";

            TTool_Value_XLD out_obj = null;

            if (param_list.Length == 4 && param_list[0] == "shape_trans_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                out_obj = tool_values.Add_XLD(param_list[3]);
                if (in1_obj != null && in2_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = in1_obj.ShapeTransXld(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Shock_Filter()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'canny'", 
                                  "'laplace'" });

            result.Name = "shock_filter";
            result.Execute += Execute_Shock_Filter;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "theta", "theta", "", "0.5", null);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "10", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'canny'", mode_list);
            result.In.Add(emValue_Type.Double, "sigma", "sigma", "", "1", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Shock_Filter(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            double in2_obj = 0;
            int in3_obj = 0;
            string in4_obj = "";
            double in5_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "shock_filter")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);

                out1_obj = tool_values.Add_Image(param_list[6]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ShockFilter(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Sigma_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "sigma_image";
            result.Execute += Execute_Sigma_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "maskHeight", "maskHeight", "", "5", null);
            result.In.Add(emValue_Type.Integer, "maskWidth", "maskWidth", "", "5", null);
            result.In.Add(emValue_Type.Integer, "sigma", "sigma", "", "3", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Sigma_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "sigma_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SigmaImage(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Simulate_Defocus()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "simulate_defocus";
            result.Execute += Execute_Simulate_Defocus;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "blurring", "blurring", "", "5", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Simulate_Defocus(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            double in2_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "simulate_defocus")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);

                out1_obj = tool_values.Add_Image(param_list[3]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SimulateDefocus(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Simulate_Motion()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "simulate_motion";
            result.Execute += Execute_Simulate_Motion;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "blurring", "blurring", "", "20", null);
            result.In.Add(emValue_Type.Integer, "angle", "angle", "", "0", null);
            result.In.Add(emValue_Type.Integer, "type", "type", "", "3", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Simulate_Motion(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            double in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "simulate_motion")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SimulateMotion(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Sin_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "sin_image";
            result.Execute += Execute_Sin_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Sin_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "sin_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SinImage();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Skeleton()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "skeleton";
            result.Execute += Execute_Skeleton;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Skeleton(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "skeleton")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Skeleton();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Smallest_Circle()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "smallest_circle";
            result.Execute += Execute_Smallest_Circle;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "col", "col", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "radius", "radius", "", "", null);
            return result;
        }
        private bool Execute_Smallest_Circle(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;

            if (param_list.Length == 5 && param_list[0] == "smallest_circle")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);
                out3_obj = tool_values.Add_HTuple(param_list[4]);
                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null)
                {
                    try
                    {
                        in1_obj.SmallestCircle(out out1_obj.Value, out out2_obj.Value, out out3_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Smallest_Rectangle1()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "smallest_rectangle1";
            result.Execute += Execute_Smallest_Rectangle1;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "row1", "row1", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "col1", "col1", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "row2", "row2", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "col2", "col2", "", "", null);
            return result;
        }
        private bool Execute_Smallest_Rectangle1(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;

            if (param_list.Length == 6 && param_list[0] == "smallest_rectangle1")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);
                out3_obj = tool_values.Add_HTuple(param_list[4]);
                out4_obj = tool_values.Add_HTuple(param_list[5]);
                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null)
                {
                    try
                    {
                        in1_obj.SmallestRectangle1(out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Smallest_Rectangle2()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "smallest_rectangle2";
            result.Execute += Execute_Smallest_Rectangle2;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);

            result.Out.Add(emValue_Type.HTuple, "row", "row", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "col", "col", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "phi", "phi", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "length1", "length1", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "length2", "length2", "", "", null);
            return result;
        }
        private bool Execute_Smallest_Rectangle2(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;
            TTool_Value_HTuple out5_obj = null;

            if (param_list.Length == 7 && param_list[0] == "smallest_rectangle2")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_HTuple(param_list[2]);
                out2_obj = tool_values.Add_HTuple(param_list[3]);
                out3_obj = tool_values.Add_HTuple(param_list[4]);
                out4_obj = tool_values.Add_HTuple(param_list[5]);
                out5_obj = tool_values.Add_HTuple(param_list[6]);
                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null && out5_obj != null)
                {
                    try
                    {
                        in1_obj.SmallestRectangle2(out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value, out out5_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Smooth_Contours_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "smooth_contours_xld";
            result.Execute += Execute_Smooth_Contours_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.Integer, "num Regr Points", "num Regr Points", "", "5", null);

            result.Out.Add(emValue_Type.XLD, "Out XLD", "Out XLD", "", "", null);
            return result;
        }
        private bool Execute_Smooth_Contours_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            int in2_obj = 0;

            TTool_Value_XLD out_obj = null;

            if (param_list.Length == 4 && param_list[0] == "smooth_contours_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out_obj = tool_values.Add_XLD(param_list[3]);
                if (in1_obj != null && in2_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = in1_obj.SmoothContoursXld(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Smooth_Image()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList filter_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'deriche1'",
                                    "'deriche2'",
                                    "'gauss'",
                                    "'shen'" });

            result.Name = "smooth_image";
            result.Execute += Execute_Smooth_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "filter", "filter", "", "'deriche2'", null);
            result.In.Add(emValue_Type.Double, "alpha", "alpha", "", "0.5", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Smooth_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";
            double in3_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "smooth_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SmoothImage(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Sobel_Amp()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList filterType_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'sum_abs'", 
                                       "'sum_abs_binomial'",
                                       "'sum_sqrt'", 
                                       "'sum_sqrt_binomial'",
                                       "'thin_max_abs'",
                                       "'thin_max_abs_binomial'",
                                       "'thin_sum_abs'",
                                       "'thin_sum_abs_binomial'",
                                       "'x'",
                                       "'x_binomial'", 
                                       "'y'",
                                       "'y_binomial'" });

            result.Name = "sobel_amp";
            result.Execute += Execute_Sobel_Amp;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "filterType", "filterType", "", "'sum_abs'", null);
            result.In.Add(emValue_Type.Integer, "size", "size", "", "3", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Sobel_Amp(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";
            double in3_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "sobel_amp")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SobelAmp(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Sobel_Dir()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList filterType_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'sum_abs'", 
                                       "'sum_abs_binomial'",
                                       "'sum_sqrt'", 
                                       "'sum_sqrt_binomial'",
                                       "'thin_max_abs'",
                                       "'thin_max_abs_binomial'",
                                       "'thin_sum_abs'",
                                       "'thin_sum_abs_binomial'",
                                       "'x'",
                                       "'x_binomial'", 
                                       "'y'",
                                       "'y_binomial'" });

            result.Name = "sobel_dir";
            result.Execute += Execute_Sobel_Dir;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "filterType", "filterType", "", "'sum_abs'", null);
            result.In.Add(emValue_Type.Integer, "size", "size", "", "3", null);

            result.Out.Add(emValue_Type.Image, "Image Amp", "Image Amp", "", "", null);
            result.Out.Add(emValue_Type.Image, "Image Dir", "Image Dir", "", "", null);
            return result;
        }
        private bool Execute_Sobel_Dir(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";
            double in3_obj = 0;

            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;

            if (param_list.Length == 6 && param_list[0] == "sobel_dir")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                out2_obj = tool_values.Add_Image(param_list[5]);

                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SobelDir(out out2_obj.Value, in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Sort_Contours_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList sortMode_list = ArrayList_Tool.New_ArrayList(new string[]
            { 
               "'character'", 
               "'lower_left'",
               "'lower_right'",
               "'upper_left'", 
               "'upper_right'" 
            });
            ArrayList order_list = ArrayList_Tool.New_ArrayList(new string[]
            { 
               "'false'", 
               "'true'" 
            });
            ArrayList rowOrCol_list = ArrayList_Tool.New_ArrayList(new string[]
            { 
               "'column'",
               "'row'"
            });

            result.Name = "sort_contours_xld";
            result.Execute += Execute_Sort_Contours_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.String, "sort Mode", "sort Mode", "", "'upper_left' ", sortMode_list);
            result.In.Add(emValue_Type.String, "order", "order", "", "'true' ", order_list);
            result.In.Add(emValue_Type.String, "rowOrCol", "rowOrCol", "", "'row' ", rowOrCol_list);

            result.Out.Add(emValue_Type.XLD, "Out XLD", "Out XLD", "", "", null);
            return result;
        }
        private bool Execute_Sort_Contours_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            string in2_obj = "";
            string in3_obj = "";
            string in4_obj = "";

            TTool_Value_XLD out_obj = null;

            if (param_list.Length == 6 && param_list[0] == "sort_contours_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out_obj = tool_values.Add_XLD(param_list[5]);
                if (in1_obj != null && in2_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = in1_obj.SortContoursXld(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Sort_Region()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList sortMode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                     "'character'",
                                     "'first_point'",
                                     "'last_point'",
                                     "'lower_left'", 
                                     "'lower_right'", 
                                     "'upper_left'", 
                                     "'upper_right'" });
            ArrayList order_list = ArrayList_Tool.New_ArrayList(new string[]{
                                   "'false'", 
                                   "'true'"  });
            ArrayList rowOrCol_list = ArrayList_Tool.New_ArrayList(new string[]{
                                      "'column'",
                                      "'row'"  });

            result.Name = "sort_region";
            result.Execute += Execute_Sort_Region;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.String, "sortMode", "sortMode", "", "'first_point'", sortMode_list);
            result.In.Add(emValue_Type.String, "order", "order", "", "'true'", order_list);
            result.In.Add(emValue_Type.String, "rowOrCol", "rowOrCol", "", "'row'", rowOrCol_list);

            result.Out.Add(emValue_Type.Region, "SortedRegions", "SortedRegions", "", "", null);
            return result;
        }
        private bool Execute_Sort_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            string in2_obj = "";
            string in3_obj = "";
            string in4_obj = "";

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "sort_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_Region(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SortRegion(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Spatial_Relation()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "spatial_relation";
            result.Execute += Execute_Spatial_Relation;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.Region, "Region2", "Region2", "", "", null);
            result.In.Add(emValue_Type.Integer, "percent", "percent", "", "50", null);

            result.Out.Add(emValue_Type.HTuple, "RegionIndex1", "RegionIndex1", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "regionIndex2", "regionIndex2", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "relation1", "relation1", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "relation2", "relation2", "", "", null);
            return result;
        }
        private bool Execute_Spatial_Relation(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            HRegion in2_obj = null;
            int in3_obj = 0;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;

            if (param_list.Length == 8 && param_list[0] == "spatial_relation")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_HTuple(param_list[4]);
                out2_obj = tool_values.Add_HTuple(param_list[5]);
                out3_obj = tool_values.Add_HTuple(param_list[6]);
                out4_obj = tool_values.Add_HTuple(param_list[7]);
                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SpatialRelation(in2_obj, in3_obj, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Split_Skeleton_Lines()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "split_skeleton_lines";
            result.Execute += Execute_Split_Skeleton_Lines;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.Integer, "maxDistance", "maxDistance", "", "3", null);

            result.Out.Add(emValue_Type.HTuple, "beginRow", "beginRow", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "beginCol", "beginCol", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "endRow", "endRow", "", "", null);
            result.Out.Add(emValue_Type.HTuple, "endCol", "endCol", "", "", null);
            return result;
        }
        private bool Execute_Split_Skeleton_Lines(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            int in2_obj = 0;

            TTool_Value_HTuple out1_obj = null;
            TTool_Value_HTuple out2_obj = null;
            TTool_Value_HTuple out3_obj = null;
            TTool_Value_HTuple out4_obj = null;

            if (param_list.Length == 7 && param_list[0] == "split_skeleton_lines")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out1_obj = tool_values.Add_HTuple(param_list[3]);
                out2_obj = tool_values.Add_HTuple(param_list[4]);
                out3_obj = tool_values.Add_HTuple(param_list[5]);
                out4_obj = tool_values.Add_HTuple(param_list[6]);
                if (in1_obj != null && out1_obj != null && out2_obj != null && out3_obj != null && out4_obj != null)
                {
                    try
                    {
                        in1_obj.SplitSkeletonLines(in2_obj, out out1_obj.Value, out out2_obj.Value, out out3_obj.Value, out out4_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Split_Skeleton_Region()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "split_skeleton_region";
            result.Execute += Execute_Split_Skeleton_Region;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.Integer, "maxDistance", "maxDistance", "", "3", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Split_Skeleton_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            int in2_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "split_skeleton_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SplitSkeletonRegion(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Sqrt_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "sqrt_image";
            result.Execute += Execute_Sqrt_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Sqrt_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "sqrt_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SqrtImage();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Sub_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "sub_image";
            result.Execute += Execute_Sub_Image;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Image, "Image2", "Image2", "", "", null);
            result.In.Add(emValue_Type.Double, "mult", "mult", "", "", null);
            result.In.Add(emValue_Type.Double, "add", "add", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Sub_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            double in3_obj = 0;
            double in4_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "sub_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SubImage(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Symm_Difference()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "symm_difference";
            result.Execute += Execute_Symm_Difference;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.Region, "Region2", "Region2", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Symm_Difference(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "symm_difference")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.SymmDifference(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Symm_Difference_Closed_Contours_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "symm_difference_closed_contours_xld";
            result.Execute += Execute_Symm_Difference_Closed_Contours_Xld;
            result.In.Add(emValue_Type.XLD, "XLD1", "XLD1", "", "", null);
            result.In.Add(emValue_Type.XLD, "XLD2", "XLD2", "", "", null);

            result.Out.Add(emValue_Type.XLD, "Out XLD", "Out XLD", "", "", null);
            return result;
        }
        private bool Execute_Symm_Difference_Closed_Contours_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            HXLDCont in2_obj = null;

            TTool_Value_XLD out_obj = null;

            if (param_list.Length == 4 && param_list[0] == "sort_contours_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[2]);

                out_obj = tool_values.Add_XLD(param_list[3]);
                if (in1_obj != null && in2_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = in1_obj.SymmDifferenceClosedContoursXld(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Symmetry()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "symmetry";
            result.Execute += Execute_Symmetry;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Integer, "maskSize", "maskSize", "", "40", null);
            result.In.Add(emValue_Type.Double, "direction", "direction", "", "0", null);
            result.In.Add(emValue_Type.Double, "exponent", "exponent", "", "0.5", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Symmetry(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "symmetry")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Symmetry(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region T
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Tan_Image()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "tan_image";
            result.Execute += Execute_Tan_Image;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Tan_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "tan_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.TanImage();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Test_Region_Point()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "test_region_point";
            result.Execute += Execute_Test_Region_Point;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "", null);
            result.In.Add(emValue_Type.Integer, "col", "col", "", "", null);

            result.Out.Add(emValue_Type.Integer, "index", "index", "", "", null);
            return result;
        }
        private bool Execute_Test_Region_Point(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Integer out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "test_region_point")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Integer(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.TestRegionPoint(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Text_Line_Orientation()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "text_line_orientation";
            result.Execute += Execute_Text_Line_Orientation;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "charHeight", "charHeight", "", "25", null);
            result.In.Add(emValue_Type.Double, "orientationFrom", "orientationFrom", "", "-0.523599", null);
            result.In.Add(emValue_Type.Double, "orientationTo", "orientationTo", "", "0.523599", null);

            result.Out.Add(emValue_Type.HTuple, "OrientationAngle", "OrientationAngle", "", "", null);
            return result;
        }
        private bool Execute_Text_Line_Orientation(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            HImage in2_obj = null;
            int in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;

            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "text_line_orientation")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);

                out1_obj = tool_values.Add_HTuple(param_list[6]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.TextLineOrientation(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Text_Line_Slant()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "text_line_slant";
            result.Execute += Execute_Text_Line_Slant;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "charHeight", "charHeight", "", "25", null);
            result.In.Add(emValue_Type.Double, "orientationFrom", "orientationFrom", "", "-0.523599", null);
            result.In.Add(emValue_Type.Double, "orientationTo", "orientationTo", "", "0.523599", null);

            result.Out.Add(emValue_Type.HTuple, "OrientationAngle", "OrientationAngle", "", "", null);
            return result;
        }
        private bool Execute_Text_Line_Slant(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            HImage in2_obj = null;
            int in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;

            TTool_Value_HTuple out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "text_line_slant")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);

                out1_obj = tool_values.Add_HTuple(param_list[6]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.TextLineSlant(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Texture_Laws()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList filterType_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "'ll'", "'le'", "'ls'", "'lw'", "'lr'", "'lu'", "'lo'",
                                        "'el'", "'ee'", "'es'", "'ew'", "'er'", "'eu'", "'eo'",
                                        "'sl'", "'se'", "'ss'", "'sw'", "'sr'", "'su'", "'so'", 
                                        "'wl'", "'we'", "'ws'", "'ww'", "'wr'", "'wu'", "'wo'", 
                                        "'rl'", "'re'", "'rs'", "'rw'", "'rr'", "'ru'", "'ro'",
                                        "'ul'", "'ue'", "'us'", "'uw'", "'ur'", "'uu'", "'uo'", 
                                        "'ol'", "'oe'", "'os'", "'ow'", "'or'", "'ou'", "'oo'"  });

            result.Name = "texture_laws";
            result.Execute += Execute_Texture_Laws;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.String, "filterTypes", "filterTypes", "", "'el'", filterType_list);
            result.In.Add(emValue_Type.Integer, "shift", "shift", "", "2", null);
            result.In.Add(emValue_Type.Integer, "filterSize", "filterSize", "", "5", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Texture_Laws(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;
            int in4_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "texture_laws")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.TextureLaws(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Thickening()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "thickening";
            result.Execute += Execute_Thickening;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Region, "structElement1", "structElement1", "", "", null);
            result.In.Add(emValue_Type.Region, "structElement2", "structElement2", "", "", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "16", null);
            result.In.Add(emValue_Type.Integer, "col", "col", "", "16", null);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "1", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Thickening(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            HRegion in2_obj = null;
            HRegion in3_obj = null;
            int in4_obj = 0;
            int in5_obj = 0;
            int in6_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 8 && param_list[0] == "thickening")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Region(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);
                in6_obj = tool_values.Get_Value_Integer(param_list[6]);

                out1_obj = tool_values.Add_Region(param_list[7]);
                if (in1_obj != null && in2_obj != null && in3_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Thickening(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Thickening_Golay()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList golayElement_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                          "'c'",
                                          "'d'",
                                          "'e'",
                                          "'f'",
                                          "'f2'",
                                          "'h'",
                                          "'i'",
                                          "'k'",
                                          "'l'", 
                                          "'m'" });

            result.Name = "thickening_golay";
            result.Execute += Execute_Thickening_Golay;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.String, "golayElement", "golayElement", "", "'h'", golayElement_list);
            result.In.Add(emValue_Type.Integer, "rotation", "rotation", "", "0", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Thickening_Golay(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "thickening_golay")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ThickeningGolay(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Thickening_Seq()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList golayElement_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                          "'c'",
                                          "'d'",
                                          "'e'",
                                          "'f'",
                                          "'f2'",
                                          "'h'",
                                          "'i'",
                                          "'k'",
                                          "'l'", 
                                          "'m'" });

            result.Name = "thickening_seq";
            result.Execute += Execute_Thickening_Seq;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.String, "golayElement", "golayElement", "", "'h'", golayElement_list);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "1", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Thickening_Seq(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "thickening_seq")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ThickeningSeq(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Thinning()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "thinning";
            result.Execute += Execute_Thinning;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Region, "structElement1", "structElement1", "", "", null);
            result.In.Add(emValue_Type.Region, "structElement2", "structElement2", "", "", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "16", null);
            result.In.Add(emValue_Type.Integer, "col", "col", "", "16", null);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "1", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Thinning(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            HRegion in2_obj = null;
            HRegion in3_obj = null;
            int in4_obj = 0;
            int in5_obj = 0;
            int in6_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 8 && param_list[0] == "thinning")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Region(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);
                in6_obj = tool_values.Get_Value_Integer(param_list[6]);

                out1_obj = tool_values.Add_Region(param_list[7]);
                if (in1_obj != null && in2_obj != null && in3_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Thinning(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Thinning_Golay()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList golayElement_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                          "'c'",
                                          "'d'",
                                          "'e'",
                                          "'f'",
                                          "'f2'",
                                          "'h'",
                                          "'i'",
                                          "'k'",
                                          "'l'", 
                                          "'m'" });

            result.Name = "thinning_golay";
            result.Execute += Execute_Thinning_Golay;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.String, "golayElement", "golayElement", "", "'h'", golayElement_list);
            result.In.Add(emValue_Type.Integer, "rotation", "rotation", "", "0", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Thinning_Golay(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "thinning_golay")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ThinningGolay(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Thinning_Seq()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList golayElement_list = ArrayList_Tool.New_ArrayList(new string[] { 
                                          "'c'",
                                          "'d'",
                                          "'e'",
                                          "'f'",
                                          "'f2'",
                                          "'h'",
                                          "'i'",
                                          "'k'",
                                          "'l'", 
                                          "'m'" });

            result.Name = "thinning_seq";
            result.Execute += Execute_Thinning_Seq;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.String, "golayElement", "golayElement", "", "'h'", golayElement_list);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "1", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Thinning_Seq(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "thinning_seq")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ThinningSeq(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Threshold()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "threshold";
            result.Execute += Execute_Threshold;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Double, "minGray", "minGray", "", "128", null);
            result.In.Add(emValue_Type.Double, "maxGray", "maxGray", "", "255", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Threshold(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "threshold")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Threshold(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Threshold_Sub_Pix()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "threshold_sub_pix";
            result.Execute += Execute_Threshold_Sub_Pix;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);
            result.In.Add(emValue_Type.Double, "threshold", "threshold", "", "128", null);

            result.Out.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            return result;
        }
        private bool Execute_Threshold_Sub_Pix(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            double in2_obj = 0;

            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "threshold_sub_pix")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);

                out1_obj = tool_values.Add_XLD(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ThresholdSubPix(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Tile_Channels()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList tileOrder_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "'horizontal'",
                                        "'vertical'" });

            result.Name = "tile_channels";
            result.Execute += Execute_Tile_Channels;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "numColumns", "numColumns", "", "1", null);
            result.In.Add(emValue_Type.String, "tileOrder", "tileOrder", "", "'vertical'", tileOrder_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Tile_Channels(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            string in3_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "tile_channels")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.TileChannels(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Tile_Images()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList tileOrder_list = ArrayList_Tool.New_ArrayList(new string[]{
                                        "'horizontal'",
                                        "'vertical'" });

            result.Name = "tile_images";
            result.Execute += Execute_Tile_Images;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "numColumns", "numColumns", "", "1", null);
            result.In.Add(emValue_Type.String, "tileOrder", "tileOrder", "", "'vertical'", tileOrder_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Tile_Images(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            string in3_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "tile_images")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_String(param_list[3]);

                out1_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.TileImages(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Tile_Images_Offset()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "tile_images_offset";
            result.Execute += Execute_Tile_Images_Offset;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "offsetRow", "offsetRow", "", "1", null);
            result.In.Add(emValue_Type.Integer, "offsetCol", "offsetCol", "", "1", null);
            result.In.Add(emValue_Type.Integer, "row1", "row1", "", "-1", null);
            result.In.Add(emValue_Type.Integer, "col1", "col1", "", "-1", null);
            result.In.Add(emValue_Type.Integer, "row2", "row2", "", "-1", null);
            result.In.Add(emValue_Type.Integer, "col2", "col2", "", "-1", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "height", "height", "", "512", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Tile_Images_Offset(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            int in4_obj = 0;
            int in5_obj = 0;
            int in6_obj = 0;
            int in7_obj = 0;
            int in8_obj = 0;
            int in9_obj = 0;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 11 && param_list[0] == "tile_images_offset")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);
                in6_obj = tool_values.Get_Value_Integer(param_list[6]);
                in7_obj = tool_values.Get_Value_Integer(param_list[7]);
                in8_obj = tool_values.Get_Value_Integer(param_list[8]);
                in9_obj = tool_values.Get_Value_Integer(param_list[9]);

                out1_obj = tool_values.Add_Image(param_list[10]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.TileImagesOffset(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj,
                                                                  in7_obj, in8_obj, in9_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Top_Hat()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "top_hat";
            result.Execute += Execute_Top_Hat;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Region, "structElement", "structElement", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Top_Hat(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "top_hat")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.TopHat(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Topographic_Sketch()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "Topographic_Sketch";
            result.Execute += Execute_Topographic_Sketch;
            result.In.Add(emValue_Type.Image, "Image1", "Image1", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Topographic_Sketch(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "Topographic_Sketch")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.TopographicSketch();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Trans_From_Rgb()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList tileOrder_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'argyb'", 
                                       "'cielab'", 
                                       "'cielchab'",
                                       "'cielchuv'",
                                       "'cieluv'",
                                       "'ciexyz'", 
                                       "'ciexyz2'",
                                       "'ciexyz3'",
                                       "'ciexyz4'",
                                       "'hls'",
                                       "'hsi'",
                                       "'hsv'",
                                       "'i1i2i3'",
                                       "'ihs'",
                                       "'lms'",
                                       "'yiq'",
                                       "'yuv'" });

            result.Name = "trans_from_rgb";
            result.Execute += Execute_Trans_From_Rgb;
            result.In.Add(emValue_Type.Image, "Image R", "Image R", "", "", null);
            result.In.Add(emValue_Type.Image, "Image G", "Image G", "", "", null);
            result.In.Add(emValue_Type.Image, "Image B", "Image B", "", "", null);
            result.In.Add(emValue_Type.String, "colorSpace", "colorSpace", "", "'hsv'", null);

            result.Out.Add(emValue_Type.Image, "ImageResult1", "ImageResult1", "", "", null);
            result.Out.Add(emValue_Type.Image, "ImageResult2", "ImageResult2", "", "", null);
            result.Out.Add(emValue_Type.Image, "ImageResult3", "ImageResult3", "", "", null);
            return result;
        }
        private bool Execute_Trans_From_Rgb(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            HImage in3_obj = null;
            string in4_obj = "";

            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;
            TTool_Value_Image out3_obj = null;

            if (param_list.Length == 8 && param_list[0] == "trans_from_rgb")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Image(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                out2_obj = tool_values.Add_Image(param_list[6]);
                out3_obj = tool_values.Add_Image(param_list[7]);
                if (in1_obj != null && in2_obj != null && in3_obj != null && out1_obj != null && out2_obj != null && out3_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.TransFromRgb(in2_obj, in3_obj, out out2_obj.Value, out out3_obj.Value, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Trans_To_Rgb()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList tileOrder_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'argyb'", 
                                       "'cielab'", 
                                       "'cielchab'",
                                       "'cielchuv'",
                                       "'cieluv'",
                                       "'ciexyz'", 
                                       "'ciexyz2'",
                                       "'ciexyz3'",
                                       "'ciexyz4'",
                                       "'hls'",
                                       "'hsi'",
                                       "'hsv'",
                                       "'i1i2i3'",
                                       "'ihs'",
                                       "'lms'",
                                       "'yiq'",
                                       "'yuv'" });

            result.Name = "trans_to_rgb";
            result.Execute += Execute_Trans_To_Rgb;
            result.In.Add(emValue_Type.Image, "Image 1", "Image 1", "", "", null);
            result.In.Add(emValue_Type.Image, "Image 2", "Image 2", "", "", null);
            result.In.Add(emValue_Type.Image, "Image 3", "Image 3", "", "", null);
            result.In.Add(emValue_Type.String, "colorSpace", "colorSpace", "", "'hsv'", null);

            result.Out.Add(emValue_Type.Image, "Image R", "Image R", "", "", null);
            result.Out.Add(emValue_Type.Image, "Image G", "Image G", "", "", null);
            result.Out.Add(emValue_Type.Image, "Image B", "Image B", "", "", null);
            return result;
        }
        private bool Execute_Trans_To_Rgb(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            HImage in3_obj = null;
            string in4_obj = "";

            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;
            TTool_Value_Image out3_obj = null;

            if (param_list.Length == 8 && param_list[0] == "trans_to_rgb")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Image(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                out2_obj = tool_values.Add_Image(param_list[6]);
                out3_obj = tool_values.Add_Image(param_list[7]);
                if (in1_obj != null && in2_obj != null && in3_obj != null && out1_obj != null && out2_obj != null && out3_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.TransToRgb(in2_obj, in3_obj, out out2_obj.Value, out out3_obj.Value, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Transpose_Region()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "transpose_region";
            result.Execute += Execute_Transpose_Region;
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "row", "row", "", "", null);
            result.In.Add(emValue_Type.Integer, "col", "col", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Transpose_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "transpose_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.TransposeRegion(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Trimmed_Mean()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList margin_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'mirrored'",
                                    "'cyclic'",
                                    "'continued'", 
                                    "0",
                                    "30",
                                    "60",
                                    "90",
                                    "120",
                                    "150",
                                    "180",
                                    "210",
                                    "240",
                                    "255" });

            result.Name = "trimmed_mean";
            result.Execute += Execute_Trimmed_Mean;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            result.In.Add(emValue_Type.Integer, "number", "number", "", "5", null);
            result.In.Add(emValue_Type.String, "margin", "margin", "", "'mirrored'", margin_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Trimmed_Mean(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HRegion in2_obj = null;
            int in3_obj = 0;
            string in4_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "trimmed_mean")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.TrimmedMean(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region U
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Union_Adjacent_Contours_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]
            {
               "'attr_forget'", 
               "'attr_keep'"
            });

            result.Name = "union_adjacent_contours_xld";
            result.Execute += Execute_Union_Adjacent_Contours_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.Double, "maxDistAbs", "maxDistAbs", "", "10", null);
            result.In.Add(emValue_Type.Double, "maxDistRel", "maxDistRel", "", "1", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'attr_keep'", mode_list);
            result.Out.Add(emValue_Type.XLD, "Out XLD", "Out XLD", "", "", null);
            return result;
        }
        private bool Execute_Union_Adjacent_Contours_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            string in4_obj = "";
            TTool_Value_XLD out_obj = null;

            if (param_list.Length == 6 && param_list[0] == "union_adjacent_contours_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out_obj = tool_values.Add_XLD(param_list[5]);
                if (in1_obj != null && in2_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = in1_obj.UnionAdjacentContoursXld(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Union_Cocircular_Contours_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mergeSmallContours_list = ArrayList_Tool.New_ArrayList(new string[]
            {
                "'false'", 
                "'true'" 
            });

            result.Name = "union_cocircular_contours_xld";
            result.Execute += Execute_Union_Cocircular_Contours_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.Double, "maxArcAngleDiff", "maxArcAngleDiff", "", "0.5", null);
            result.In.Add(emValue_Type.Double, "maxArcOverlap", "maxArcOverlap", "", "0.1", null);
            result.In.Add(emValue_Type.Double, "maxTangentAngle", "maxTangentAngle", "", "0.2", null);
            result.In.Add(emValue_Type.Double, "maxDist", "maxDist", "", "30", null);
            result.In.Add(emValue_Type.Double, "maxRadiusDiff", "maxRadiusDiff", "", "10", null);
            result.In.Add(emValue_Type.Double, "maxCenterDist", "maxCenterDist", "", "10", null);
            result.In.Add(emValue_Type.String, "mergeSmallContours", "mergeSmallContours", "", "'attr_keep'", mergeSmallContours_list);
            result.In.Add(emValue_Type.Integer, "iterations", "iterations", "", "1", null);
            result.Out.Add(emValue_Type.XLD, "Out XLD", "Out XLD", "", "", null);
            return result;
        }
        private bool Execute_Union_Cocircular_Contours_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;
            double in7_obj = 0;
            string in8_obj = "";
            int in9_obj = 0;
            TTool_Value_XLD out_obj = null;

            if (param_list.Length == 11 && param_list[0] == "union_cocircular_contours_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);
                in8_obj = tool_values.Get_Value_String(param_list[8]);
                in9_obj = tool_values.Get_Value_Integer(param_list[9]);

                out_obj = tool_values.Add_XLD(param_list[10]);
                if (in1_obj != null && in2_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = in1_obj.UnionCocircularContoursXld(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj, in8_obj, in9_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Union_Collinear_Contours_Ext_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]
            {
                "'attr_forget'", 
                "'attr_keep'"
            });

            result.Name = "union_collinear_contours_ext_xld";
            result.Execute += Execute_Union_Collinear_Contours_Ext_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.Double, "maxDistAbs", "maxDistAbs", "", "10", null);
            result.In.Add(emValue_Type.Double, "maxDistRel", "maxDistRel", "", "1", null);
            result.In.Add(emValue_Type.Double, "maxShift", "maxShift", "", "2", null);
            result.In.Add(emValue_Type.Double, "maxAngle", "maxAngle", "", "0.1", null);
            result.In.Add(emValue_Type.Double, "maxOverlap", "maxOverlap", "", "0", null);
            result.In.Add(emValue_Type.Double, "maxRegrError", "maxRegrError", "", "-1", null);
            result.In.Add(emValue_Type.Double, "maxCosts", "maxCosts", "", "1", null);
            result.In.Add(emValue_Type.Double, "weightDist", "weightDist", "", "1", null);
            result.In.Add(emValue_Type.Double, "weightShift", "weightShift", "", "1", null);
            result.In.Add(emValue_Type.Double, "weightAngle", "weightAngle", "", "1", null);
            result.In.Add(emValue_Type.Double, "weightLink", "weightLink", "", "1", null);
            result.In.Add(emValue_Type.Double, "weightRegr", "weightRegr", "", "0", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'attr_keep'", mode_list);
            result.Out.Add(emValue_Type.XLD, "Out XLD", "Out XLD", "", "", null);
            return result;
        }
        private bool Execute_Union_Collinear_Contours_Ext_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;
            double in7_obj = 0;
            double in8_obj = 0;
            double in9_obj = 0;
            double in10_obj = 0;
            double in11_obj = 0;
            double in12_obj = 0;
            double in13_obj = 0;
            string in14_obj = "";
            TTool_Value_XLD out_obj = null;

            if (param_list.Length == 16 && param_list[0] == "union_collinear_contours_ext_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);
                in8_obj = tool_values.Get_Value_Double(param_list[8]);
                in9_obj = tool_values.Get_Value_Double(param_list[9]);
                in10_obj = tool_values.Get_Value_Double(param_list[10]);
                in11_obj = tool_values.Get_Value_Double(param_list[11]);
                in12_obj = tool_values.Get_Value_Double(param_list[12]);
                in13_obj = tool_values.Get_Value_Double(param_list[13]);
                in14_obj = tool_values.Get_Value_String(param_list[14]);

                out_obj = tool_values.Add_XLD(param_list[15]);
                if (in1_obj != null && in2_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = in1_obj.UnionCollinearContoursExtXld(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj, in8_obj, in9_obj, in10_obj, in11_obj, in12_obj, in13_obj, in14_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Union_Collinear_Contours_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]
            {
                "'attr_forget'", 
                "'attr_keep'"
            });

            result.Name = "union_collinear_contours_xld";
            result.Execute += Execute_Union_Collinear_Contours_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.Double, "maxDistAbs", "maxDistAbs", "", "10", null);
            result.In.Add(emValue_Type.Double, "maxDistRel", "maxDistRel", "", "1", null);
            result.In.Add(emValue_Type.Double, "maxShift", "maxShift", "", "2", null);
            result.In.Add(emValue_Type.Double, "maxAngle", "maxAngle", "", "0.1", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'attr_keep'", mode_list);
            result.Out.Add(emValue_Type.XLD, "Out XLD", "Out XLD", "", "", null);
            return result;
        }
        private bool Execute_Union_Collinear_Contours_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            string in6_obj = "";
            TTool_Value_XLD out_obj = null;

            if (param_list.Length == 8 && param_list[0] == "union_collinear_contours_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);

                out_obj = tool_values.Add_XLD(param_list[7]);
                if (in1_obj != null && in2_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = in1_obj.UnionCollinearContoursXld(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Union_Cotangential_Contours_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]
            {
                "'attr_forget'", 
                "'attr_keep'"
            });

            result.Name = "union_cotangential_contours_xld";
            result.Execute += Execute_Union_Cotangential_Contours_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.Double, "fitClippingLength", "fitClippingLength", "", "0", null);
            result.In.Add(emValue_Type.Double, "fitLength", "fitLength", "", "30", null);
            result.In.Add(emValue_Type.Double, "maxTangAngle", "maxTangAngle", "", "0.785398", null);
            result.In.Add(emValue_Type.Double, "maxDist", "maxDist", "", "20", null);
            result.In.Add(emValue_Type.Double, "maxDistPerp", "maxDistPerp", "", "10", null);
            result.In.Add(emValue_Type.Double, "maxOverlap", "maxOverlap", "", "2", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'attr_forget'", mode_list);
            result.Out.Add(emValue_Type.XLD, "Out XLD", "Out XLD", "", "", null);
            return result;
        }
        private bool Execute_Union_Cotangential_Contours_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;
            double in7_obj = 0;
            string in8_obj = "";
            TTool_Value_XLD out_obj = null;

            if (param_list.Length == 10 && param_list[0] == "union_cotangential_contours_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);
                in7_obj = tool_values.Get_Value_Double(param_list[7]);
                in8_obj = tool_values.Get_Value_String(param_list[8]);

                out_obj = tool_values.Add_XLD(param_list[9]);
                if (in1_obj != null && in2_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = in1_obj.UnionCotangentialContoursXld(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj, in7_obj, in8_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Union_Straight_Contours_Xld()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]
            {
                "'every'", 
                "'noparallel'", 
                "'paralleltoo'" 
            });
            ArrayList iterations_list = ArrayList_Tool.New_ArrayList(new string[]
            {
                "1", 
                "2", 
                "3",
                "4", 
                "5", 
                "6", 
                "7", 
                "8", 
                "9", 
                "10", 
                "'maximum'"
            });

            result.Name = "union_straight_contours_xld";
            result.Execute += Execute_Union_Straight_Contours_Xld;
            result.In.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            result.In.Add(emValue_Type.Double, "maxDist", "maxDist", "", "5", null);
            result.In.Add(emValue_Type.Double, "maxDiff", "maxDiff", "", "0.5", null);
            result.In.Add(emValue_Type.Double, "percent", "percent", "", "50", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'noparallel'", mode_list);
            result.In.Add(emValue_Type.String, "iterations", "iterations", "", "'attr_forget'", iterations_list);
            result.Out.Add(emValue_Type.XLD, "Out XLD", "Out XLD", "", "", null);
            return result;
        }
        private bool Execute_Union_Straight_Contours_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            string in5_obj = "";
            string in6_obj = "";
            TTool_Value_XLD out_obj = null;

            if (param_list.Length == 8 && param_list[0] == "union_straight_contours_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_String(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);

                out_obj = tool_values.Add_XLD(param_list[7]);
                if (in1_obj != null && in2_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = in1_obj.UnionStraightContoursXld(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Union1()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "union1";
            result.Execute += Execute_Union1;
            result.In.Add(emValue_Type.Region, "In_Region", "In_Region", "", "", null);

            result.Out.Add(emValue_Type.Region, "Out_Region", "Out_Region", "", "", null);
            return result;
        }
        private bool Execute_Union1(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "union1")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Union1();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Union2()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "union2";
            result.Execute += Execute_Union2;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.Region, "Region2", "Region2", "", "", null);

            result.Out.Add(emValue_Type.Region, "Out_Region", "Out_Region", "", "", null);
            return result;
        }
        private bool Execute_Union2(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            HRegion in2_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "union2")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Region(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);
                if (in1_obj != null && out1_obj != null && in2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Union2(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Union2_Closed_Contours_Xld()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "union2_closed_contours_xld";
            result.Execute += Execute_Union2_Closed_Contours_Xld;
            result.In.Add(emValue_Type.XLD, "XLD1", "XLD1", "", "", null);
            result.In.Add(emValue_Type.XLD, "XLD2", "XLD2", "", "", null);
            result.Out.Add(emValue_Type.XLD, "Out XLD", "Out XLD", "", "", null);
            return result;
        }
        private bool Execute_Union2_Closed_Contours_Xld(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HXLDCont in1_obj = null;
            HXLDCont in2_obj = null;
            TTool_Value_XLD out_obj = null;

            if (param_list.Length == 4 && param_list[0] == "union2_closed_contours_xld")
            {
                in1_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[1]);
                in2_obj = (HXLDCont)tool_values.Get_Value_XLD(param_list[2]);

                out_obj = tool_values.Add_XLD(param_list[3]);
                if (in1_obj != null && in2_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = in1_obj.Union2ClosedContoursXld(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        #endregion

        #region V
        private TCommand_Define Def_Var_Threshold()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList lightDark_list = ArrayList_Tool.New_ArrayList(new string[]{
                                       "'dark'",
                                       "'equal'",
                                       "'light'", 
                                       "'not_equal'" });


            result.Name = "var_threshold";
            result.Execute += Execute_Var_Threshold;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "maskWidth", "maskWidth", "", "15", null);
            result.In.Add(emValue_Type.Integer, "maskHeight", "maskHeight", "", "15", null);
            result.In.Add(emValue_Type.Double, "stdDevScale", "stdDevScale", "", "0.2", null);
            result.In.Add(emValue_Type.Double, "absThreshold", "absThreshold", "", "2", null);
            result.In.Add(emValue_Type.String, "lightDark", "lightDark", "", "'dark'", lightDark_list);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Var_Threshold(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            string in6_obj = "";

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 8 && param_list[0] == "var_threshold")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_String(param_list[6]);

                out1_obj = tool_values.Add_Region(param_list[7]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.VarThreshold(in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Vector_Angle_To_Rigid()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "vector_angle_to_rigid";
            result.Execute += Execute_Vector_Angle_To_Rigid;
            result.In.Add(emValue_Type.Double, "Sor_Row", "Sor_Row", "", "0", null);
            result.In.Add(emValue_Type.Double, "Sor_Col", "Sor_Col", "", "0", null);
            result.In.Add(emValue_Type.Double, "Sor_Angle", "Sor_Angle", "", "0", null);
            result.In.Add(emValue_Type.Double, "Dis_Row", "Dis_Row", "", "0", null);
            result.In.Add(emValue_Type.Double, "Dis_Col", "Dis_Row", "", "0", null);
            result.In.Add(emValue_Type.Double, "Dis_Angle", "Dis_Angle", "", "0", null);
            result.Out.Add(emValue_Type.HomMat2D, "HomMat2D", "HomMat2D", "", "", null);
            return result;
        }
        private bool Execute_Vector_Angle_To_Rigid(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            double in1_obj = 0;
            double in2_obj = 0;
            double in3_obj = 0;
            double in4_obj = 0;
            double in5_obj = 0;
            double in6_obj = 0;

            TTool_Value_HomMat2D out1_obj = null;

            if (param_list.Length == 8 && param_list[0] == "vector_angle_to_rigid")
            {
                in1_obj = tool_values.Get_Value_Double(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_Double(param_list[4]);
                in5_obj = tool_values.Get_Value_Double(param_list[5]);
                in6_obj = tool_values.Get_Value_Double(param_list[6]);

                out1_obj = tool_values.Add_HomMat2D(param_list[7]);
                if (out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value.VectorAngleToRigid(in1_obj, in2_obj, in3_obj, in4_obj, in5_obj, in6_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Vector_Field_Length()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList mode_list = ArrayList_Tool.New_ArrayList(new string[]{
                                  "'length'",
                                  "'squared_length'" });


            result.Name = "vector_field_length";
            result.Execute += Execute_Vector_Field_Length;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "mode", "mode", "", "'length'", mode_list);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Vector_Field_Length(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "vector_field_length")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);
                if (in1_obj != null && in2_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.VectorFieldLength(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Vector_Field_To_HomMat2d()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "vector_field_to_homMat2d";
            result.Execute += Execute_Vector_Field_To_HomMat2d;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.HomMat2D, "HomMat2D", "HomMat2D", "", "", null);
            return result;
        }
        private bool Execute_Vector_Field_To_HomMat2d(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;

            TTool_Value_HomMat2D out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "vector_field_to_homMat2d")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_HomMat2D(param_list[2]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.VectorFieldToHomMat2d();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Vector_Field_To_Real()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "vector_field_to_real";
            result.Execute += Execute_Vector_Field_To_Real;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image Row", "Image Row", "", "", null);
            result.Out.Add(emValue_Type.Image, "Image Col", "Image Col", "", "", null);
            return result;
        }
        private bool Execute_Vector_Field_To_Real(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;

            TTool_Value_Image out1_obj = null;
            TTool_Value_Image out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "vector_field_to_real")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Image(param_list[2]);
                out2_obj = tool_values.Add_Image(param_list[3]);
                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.VectorFieldToReal(out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region W
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Watersheds()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "watersheds";
            result.Execute += Execute_Watersheds;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region Basins", "Region Basins", "", "", null);
            result.Out.Add(emValue_Type.Region, "Region Watersheds", "Region Watersheds", "", "", null);
            return result;
        }
        private bool Execute_Watersheds(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;

            TTool_Value_Region out1_obj = null;
            TTool_Value_Region out2_obj = null;

            if (param_list.Length == 4 && param_list[0] == "watersheds")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);
                out2_obj = tool_values.Add_Region(param_list[3]);
                if (in1_obj != null && out1_obj != null && out2_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.Watersheds(out out2_obj.Value);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Watersheds_Threshold()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "watersheds_threshold";
            result.Execute += Execute_Watersheds_Threshold;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "threshold", "threshold", "", "10", null);

            result.Out.Add(emValue_Type.Region, "Region Basins", "Region Basins", "", "", null);
            return result;
        }
        private bool Execute_Watersheds_Threshold(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 4 && param_list[0] == "watersheds_threshold")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);

                out1_obj = tool_values.Add_Region(param_list[3]);
                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.WatershedsThreshold(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Wiener_Filter()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "wiener_filter";
            result.Execute += Execute_Wiener_Filter;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Image, "Image Psf", "Image Psf", "", "", null);
            result.In.Add(emValue_Type.Image, "Image Filtered", "Image Filtered", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Wiener_Filter(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            HImage in3_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 5 && param_list[0] == "wiener_filter")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Image(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);
                if (in1_obj != null && in2_obj != null && in3_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.WienerFilter(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Wiener_Filter_Ni()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "wiener_filter_ni";
            result.Execute += Execute_Wiener_Filter_Ni;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Image, "Image Psf", "Image Psf", "", "", null);
            result.In.Add(emValue_Type.Region, "noiseRegion", "noiseRegion", "", "", null);
            result.In.Add(emValue_Type.Integer, "maskWidth", "maskWidth", "", "3", null);
            result.In.Add(emValue_Type.Integer, "maskHeight", "maskHeight", "", "3", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Wiener_Filter_Ni(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            HRegion in3_obj = null;
            int in4_obj = 0;
            int in5_obj = 0;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 7 && param_list[0] == "wiener_filter_ni")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Region(param_list[3]);
                in4_obj = tool_values.Get_Value_Integer(param_list[4]);
                in5_obj = tool_values.Get_Value_Integer(param_list[5]);

                out1_obj = tool_values.Add_Region(param_list[6]);
                if (in1_obj != null && in2_obj != null && in3_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.WienerFilterNi(in2_obj, in3_obj, in4_obj, in5_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Write_Image()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList format_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'bigtiff alpha'", 
                                    "'bigtiff deflate 9 alpha'", 
                                    "'bigtiff deflate 9'", 
                                    "'bigtiff jpeg 90'",
                                    "'bigtiff lzw alpha'",
                                    "'bigtiff lzw'", 
                                    "'bigtiff mask'",
                                    "'bigtiff packbits'",
                                    "'bigtiff'",
                                    "'bmp'",
                                    "'ima'",
                                    "'jp2'",
                                    "'jp2 20'",
                                    "'jp2 30'",
                                    "'jp2 40'",
                                    "'jp2 50'", 
                                    "'jpeg'", 
                                    "'jpeg 20'",
                                    "'jpeg 40'",
                                    "'jpeg 60'", 
                                    "'jpeg 80'",
                                    "'jpeg 100'",
                                    "'jpegxr 20'", 
                                    "'jpegxr 30'",
                                    "'jpegxr 40'", 
                                    "'jpegxr 50'", 
                                    "'jpegxr'",
                                    "'png best'",
                                    "'png fastest'",
                                    "'png none'",
                                    "'png'",
                                    "'tiff alpha'",
                                    "'tiff deflate 9 alpha'",
                                    "'tiff deflate 9'",
                                    "'tiff jpeg 90'", 
                                    "'tiff lzw alpha'",
                                    "'tiff lzw'",
                                    "'tiff mask'",
                                    "'tiff packbits'",
                                    "'tiff'"  });

            result.Name = "write_image";
            result.Execute += Execute_Write_Image;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.String, "format", "format", "", "'bmp'", format_list);
            result.In.Add(emValue_Type.Integer, "fillColor", "fillColor", "", "0", null);
            result.In.Add(emValue_Type.String, "fileName", "fileName", "", "", null);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Write_Image(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            string in2_obj = "";
            int in3_obj = 0;
            string in4_obj = "";

            if (param_list.Length == 5 && param_list[0] == "write_image")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                if (in1_obj != null)
                {
                    try
                    {
                        in1_obj.WriteImage(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Write_Region()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "write_region";
            result.Execute += Execute_Write_Region;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.String, "FileName", "FileName", "", "", null);
            return result;
        }
        private bool Execute_Write_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            string in2_obj = "";
            if (param_list.Length == 3 && param_list[0] == "write_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                if (in1_obj != null)
                {
                    try
                    {
                        in1_obj.WriteRegion(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Write_Shape_Model()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "write_shape_model";
            result.Execute += Execute_Write_Shape_Model;
            result.In.Add(emValue_Type.ShapeModel, "ShapeModel", "ShapeModel", "", "", null);
            result.In.Add(emValue_Type.String, "FileName", "FileName", "", "", null);
            return result;
        }
        private bool Execute_Write_Shape_Model(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HShapeModel in1_obj = null;
            string in2_obj = "";
            if (param_list.Length == 3 && param_list[0] == "write_shape_model")
            {
                in1_obj = tool_values.Get_Value_ShapeModel(param_list[1]);
                in2_obj = tool_values.Get_Value_String(param_list[2]);

                if (in1_obj != null)
                {
                    try
                    {
                        in1_obj.WriteShapeModel(in2_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion

        #region Z
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Zero_Crossing()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "zero_crossing";
            result.Execute += Execute_Zero_Crossing;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Zero_Crossing(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;

            TTool_Value_Region out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "zero_crossing")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_Region(param_list[2]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ZeroCrossing();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Zero_Crossing_Sub_Pix()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "zero_crossing_sub_pix";
            result.Execute += Execute_Zero_Crossing_Sub_Pix;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);

            result.Out.Add(emValue_Type.XLD, "XLD", "XLD", "", "", null);
            return result;
        }
        private bool Execute_Zero_Crossing_Sub_Pix(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;

            TTool_Value_XLD out1_obj = null;

            if (param_list.Length == 3 && param_list[0] == "zero_crossing_sub_pix")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);

                out1_obj = tool_values.Add_XLD(param_list[2]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ZeroCrossingSubPix();
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Zoom_Image_Factor()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList interpolation_list = ArrayList_Tool.New_ArrayList(new string[]{
                                    "'bilinear'",
                                    "'constant'",
                                    "'nearest_neighbor'",
                                    "'weighted'" });

            result.Name = "zoom_image_factor";
            result.Execute += Execute_Zoom_Image_Factor;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Double, "scaleWidth", "scaleWidth", "", "0.5", null);
            result.In.Add(emValue_Type.Double, "scaleHeight", "scaleHeight", "", "0.5", null);
            result.In.Add(emValue_Type.String, "interpolation", "interpolation", "", "'constant'", interpolation_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Zoom_Image_Factor(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;
            string in4_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "zoom_image_factor")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in3_obj = tool_values.Get_Value_Double(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ZoomImageFactor(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Zoom_Image_Size()
        {
            TCommand_Define result = new TCommand_Define();
            ArrayList interpolation_list = ArrayList_Tool.New_ArrayList(new string[]
            {
                "'bilinear'",
                "'constant'",
                "'nearest_neighbor'",
                "'weighted'" 
            });

            result.Name = "zoom_image_size";
            result.Execute += Execute_Zoom_Image_Size;
            result.In.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            result.In.Add(emValue_Type.Integer, "width", "width", "", "512", null);
            result.In.Add(emValue_Type.Integer, "Height", "Height", "", "512", null);
            result.In.Add(emValue_Type.String, "interpolation", "interpolation", "", "'constant'", interpolation_list);

            result.Out.Add(emValue_Type.Image, "Image", "Image", "", "", null);
            return result;
        }
        private bool Execute_Zoom_Image_Size(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            int in2_obj = 0;
            int in3_obj = 0;
            string in4_obj = "";

            TTool_Value_Image out1_obj = null;

            if (param_list.Length == 6 && param_list[0] == "zoom_image_size")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Integer(param_list[2]);
                in3_obj = tool_values.Get_Value_Integer(param_list[3]);
                in4_obj = tool_values.Get_Value_String(param_list[4]);

                out1_obj = tool_values.Add_Image(param_list[5]);

                if (in1_obj != null && out1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ZoomImageSize(in2_obj, in3_obj, in4_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Zoom_Region()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "zoom_region";
            result.Execute += Execute_Zoom_Region;
            result.In.Add(emValue_Type.Region, "Region1", "Region1", "", "", null);
            result.In.Add(emValue_Type.Double, "scaleWidth", "scaleWidth", "", "2", null);
            result.In.Add(emValue_Type.Double, "scaleHeight", "scaleHeight", "", "2", null);

            result.Out.Add(emValue_Type.Region, "Region", "Region", "", "", null);
            return result;
        }
        private bool Execute_Zoom_Region(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;
            HRegion in1_obj = null;
            double in2_obj = 0;
            double in3_obj = 0;

            TTool_Value_Region out1_obj = null;
            if (param_list.Length == 5 && param_list[0] == "zoom_region")
            {
                in1_obj = tool_values.Get_Value_Region(param_list[1]);
                in2_obj = tool_values.Get_Value_Double(param_list[2]);
                in2_obj = tool_values.Get_Value_Double(param_list[3]);

                out1_obj = tool_values.Add_Region(param_list[4]);
                if (in1_obj != null)
                {
                    try
                    {
                        out1_obj.Value = in1_obj.ZoomRegion(in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion
        #endregion

        #region other
        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Sub_Image_EFC()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "sub_image_efc";
            result.Execute += Execute_Sub_Image_EFC;
            result.In.Add(emValue_Type.Image, "Image Min", "Image Min", "", "", null);
            result.In.Add(emValue_Type.Image, "Image Max", "Image Max", "", "", null);
            result.In.Add(emValue_Type.Image, "Image Sample", "Image Sample", "", "", null);
            result.Out.Add(emValue_Type.Image, "Result Image", "Result Image", "", "", null);
            return result;
        }
        private bool Execute_Sub_Image_EFC(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            HImage in2_obj = null;
            HImage in3_obj = null;
            TTool_Value_Image out_obj = null;

            if (param_list.Length == 5 && param_list[0] == "sub_image_efc")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                in2_obj = tool_values.Get_Value_Image(param_list[2]);
                in3_obj = tool_values.Get_Value_Image(param_list[3]);

                out_obj = tool_values.Add_Image(param_list[4]);
                if (in1_obj != null && in2_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = JJS_Vision.Sub_Image_EFC(in1_obj, in2_obj, in3_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }

        //-------------------------------------------------------------------------------------------------
        private TCommand_Define Def_Scale_Image_EFC()
        {
            TCommand_Define result = new TCommand_Define();

            result.Name = "scale_image_efc";
            result.Execute += Execute_Scale_Image_EFC;
            result.In.Add(emValue_Type.Image, "In_Image", "In_Image", "", "", null);
            result.Out.Add(emValue_Type.Image, "Out_Image", "Out_Image", "", "", null);
            return result;
        }
        private bool Execute_Scale_Image_EFC(string[] param_list, ref TTool_Values tool_values)
        {
            bool result = false;

            HImage in1_obj = null;
            TTool_Value_Image out_obj = null;

            if (param_list.Length == 3 && param_list[0] == "scale_image_efc")
            {
                in1_obj = tool_values.Get_Value_Image(param_list[1]);
                out_obj = tool_values.Add_Image(param_list[2]);
                if (in1_obj != null && out_obj != null)
                {
                    try
                    {
                        out_obj.Value = JJS_Vision.Scale_Image_EFC(in1_obj);
                        result = true;
                    }
                    catch { };
                }
            }
            return result;
        }
        #endregion




        
    }


    public class TCommand_Define : TBase_Class
    {
        public string Name = "Default";
        public bool User_Define = false;
        public string Password = "";

        public TCommand_Values_List In = new TCommand_Values_List();
        public TCommand_Values_List Out = new TCommand_Values_List();
        public ArrayList Programs_List = new ArrayList();
        public TCommand_Define[] User_Cmd_List = new TCommand_Define[0];
        public evExecute_Event Execute = null;


        public int User_Cmd_List_Count
        {
            get
            {
                return User_Cmd_List.Length;
            }
            set
            {
                int old_count = User_Cmd_List.Length;
                Array.Resize(ref User_Cmd_List, value);
                for (int i = old_count; i < value; i++) User_Cmd_List[i] = new TCommand_Define();
            }
        }
        public int Cmd_Str_Count
        {
            get
            {
                return In.Values_Count + Out.Values_Count + 1;
            }
        }
        public TCommand_Define()
        {
            Set_Default();
        }
        public void Set_Default()
        {
            Name = "Default";
            User_Define = false;
            Password = "";

            In.Set_Default();
            Out.Set_Default();
            Programs_List.Clear();
            User_Cmd_List_Count = 0;
            Execute = null;
        }
        override public TBase_Class New_Class()
        {
            return new TCommand_Define();
        }
        override public void Copy(TBase_Class sor_base, TBase_Class dis_base)
        {
            if (sor_base is TCommand_Define && dis_base is TCommand_Define)
            {
                TCommand_Define sor = (TCommand_Define)sor_base;
                TCommand_Define dis = (TCommand_Define)dis_base;

                dis.Name = sor.Name;
                dis.User_Define = sor.User_Define;
                dis.Password = sor.Password;


                dis.In.Set(sor.In);
                dis.Out.Set(sor.Out);
                dis.Programs_List = sor.Programs_List;

                dis.User_Cmd_List_Count = sor.User_Cmd_List_Count;
                for (int i = 0; i < User_Cmd_List_Count; i++) dis.User_Cmd_List[i].Set(sor.User_Cmd_List[i]);
                dis.Execute = sor.Execute;
            }
        }

        public bool Read(TJJS_XML_File ini, string section)
        {
            string tmp_section;
            int count = 0;
            string tmp_str = "";

            if (ini != null && section != "")
            {
                tmp_section = section;
                Name = ini.ReadString(tmp_section, "Name", Name);
                Password = ini.ReadString(tmp_section, "Password", Password);

                In.Values_Count = ini.ReadInteger(tmp_section, "In_Value_Count", 0);
                for (int i = 0; i < In.Values_Count; i++)
                {
                    In.Values[i].Set_Data(ini.ReadString(tmp_section, "In_Value" + (i + 1).ToString(), ""));
                }

                Out.Values_Count = ini.ReadInteger(tmp_section, "Out_Value_Count", 0);
                for (int i = 0; i < Out.Values_Count; i++)
                {
                    Out.Values[i].Set_Data(ini.ReadString(tmp_section, "Out_Value" + (i + 1).ToString(), ""));
                }

                Programs_List.Clear();
                count = ini.ReadInteger(tmp_section, "Programs_List_Count", 0);
                for (int i = 0; i < count; i++)
                {
                    tmp_str = ini.ReadString(tmp_section, "Programs" + (i + 1).ToString(), "");
                    Programs_List.Add(tmp_str);
                }

                User_Cmd_List_Count = ini.ReadInteger(tmp_section, "User_Cmd_List_Count", 0);
                for (int i = 0; i < User_Cmd_List_Count; i++)
                {
                    User_Cmd_List[i].Read(ini, tmp_section + "/User_Command" + (i + 1).ToString());
                    User_Cmd_List[i].User_Define = true;
                }
            }
            return true;
        }
        public bool Write(TJJS_XML_File ini, string section)
        {
            string tmp_section;
            if (ini != null && section != "")
            {
                tmp_section = section;
                ini.WriteString(tmp_section, "Name", Name);
                ini.WriteString(tmp_section, "Password", Password);

                ini.WriteInteger(tmp_section, "In_Value_Count", In.Values_Count);
                for (int i = 0; i < In.Values_Count; i++)
                {
                    ini.WriteString(tmp_section, "In_Value" + (i + 1).ToString(), In.Values[i].ToString());
                }

                ini.WriteInteger(tmp_section, "Out_Value_Count", Out.Values_Count);
                for (int i = 0; i < Out.Values_Count; i++)
                {
                    ini.WriteString(tmp_section, "Out_Value" + (i + 1).ToString(), Out.Values[i].ToString());
                }

                ini.WriteInteger(tmp_section, "Programs_List_Count", Programs_List.Count);
                for (int i = 0; i < Programs_List.Count; i++)
                {
                    ini.WriteString(tmp_section, "Programs" + (i + 1).ToString(), Programs_List[i].ToString());
                }

                ini.WriteInteger(tmp_section, "User_Cmd_List_Count", User_Cmd_List_Count);
                for (int i = 0; i < User_Cmd_List_Count; i++)
                {
                    User_Cmd_List[i].Write(ini, tmp_section + "/User_Command" + (i + 1).ToString());
                }
            }
            return true;
        }
        public TCommand_Define Get_User_Cmd_List(string name)
        {
            TCommand_Define result = null;

            for (int i = 0; i < User_Cmd_List_Count; i++)
            {
                if (name == User_Cmd_List[i].Name)
                {
                    result = new TCommand_Define();
                    result.Set(User_Cmd_List[i]);
                    break;
                }
            }
            return result;
        }
        public int Get_User_Cmd_List_No(string name)
        {
            int result = -1;

            for (int i = 0; i < User_Cmd_List_Count; i++)
            {
                if (name == User_Cmd_List[i].Name)
                {
                    result = i;
                    break;
                }
            }
            return result;
        }

        public override string ToString()
        {
            string result = "";

            result = Name;
            for (int i = 0; i < In.Values_Count; i++)
            {
                result = result + "," + In.Values[i].Value;
            }
            for (int i = 0; i < Out.Values_Count; i++)
            {
                result = result + "," + Out.Values[i].Value;
            }
            return result;
        }
        public bool Set_Data(string program_list_str)
        {
            bool result = false;
            string[] list = null;

            Halcon_Tool.Break_String(program_list_str, ref list);
            result = Set_Data(list);
            return result;
        }
        public bool Set_Data(ArrayList list)
        {
            bool result = false;
            ArrayList in_list = new ArrayList();
            ArrayList out_list = new ArrayList();

            if (list.Count == Cmd_Str_Count && list[0].ToString() == Name)
            {
                in_list = ArrayList_Tool.Sub_String(list, 1, In.Values_Count);
                out_list = ArrayList_Tool.Sub_String(list, In.Values_Count + 1, Out.Values_Count);
                if (In.Set_Values(in_list) && Out.Set_Values(out_list)) result = true;
            }
            return result;
        }
        public bool Set_Data(string[] strings)
        {
            bool result = false;
            string[] in_list = new string[In.Values_Count];
            string[] out_list = new string[Out.Values_Count];

            if (strings.Length == Cmd_Str_Count && strings[0] == Name)
            {
                for (int i = 0; i < In.Values_Count; i++) in_list[i] = strings[i + 1];
                for (int i = 0; i < Out.Values_Count; i++) out_list[i] = strings[i + In.Values_Count + 1];
                if (In.Set_Values(in_list) && Out.Set_Values(out_list)) result = true;
            }
            return result;
        }
        public void Add_User_Cmd_List(TCommand_Define cmd)
        {
            User_Cmd_List_Count++;
            User_Cmd_List[User_Cmd_List_Count - 1].Set(cmd);
        }
        public void Del_User_Cmd_List(int no)
        {
            if (no >= 0 && no < User_Cmd_List_Count)
            {
                for (int i = no; i < User_Cmd_List_Count - 1; i++)
                {
                    User_Cmd_List[i].Set(User_Cmd_List[i + 1]);
                }
                User_Cmd_List_Count--;
            }
        }
    }
    public class TCommand_Values_List : TBase_Class
    {
        public TCommand_Value[] Values = new TCommand_Value[0];

        public int Values_Count
        {
            get
            {
                return Values.Length;
            }
            set
            {
                int old_count = Values.Length;
                Array.Resize(ref Values, value);
                for (int i = old_count; i < value; i++) Values[i] = new TCommand_Value();
            }
        }
        public TCommand_Values_List()
        {
            Set_Default();
        }
        public void Set_Default()
        {
            Values_Count = 0;
        }
        override public TBase_Class New_Class()
        {
            return new TCommand_Values_List();
        }
        override public void Copy(TBase_Class sor_base, TBase_Class dis_base)
        {
            if (sor_base is TCommand_Values_List && dis_base is TCommand_Values_List)
            {
                TCommand_Values_List sor = (TCommand_Values_List)sor_base;
                TCommand_Values_List dis = (TCommand_Values_List)dis_base;

                dis.Values_Count = sor.Values_Count;
                for (int i = 0; i < Values_Count; i++) dis.Values[i].Set(sor.Values[i]);
            }
        }

        public int Find_Index(string name)
        {
            int result = -1;

            for (int i = 0; i < Values_Count; i++)
            {
                if (name == Values[i].Name)
                {
                    result = i;
                    break;
                }
            }
            return result;
        }
        public int Find_Index(TCommand_Value value)
        {
            return Find_Index(value.Name);
        }
        public void Add()
        {
            Values_Count++;
        }
        public void Add(TCommand_Value value)
        {
            int no = Find_Index(value);
            if (no < 0)
            {
                Values_Count++;
                Values[Values_Count - 1].Set(value);
            }
            else
            {
                Values[no].Set(value);
            }
        }
        public void Add(emValue_Type type, string name, string disp_string, string value, string default_value, ArrayList combo_list = null)
        {
            Add(new TCommand_Value(type, name, disp_string, value, default_value, combo_list));
        }
        public void Del()
        {
            Del(Values_Count - 1);
        }
        public void Del(int no)
        {
            if (no >= 0 && no < Values_Count)
            {
                for (int i = no; i < Values_Count - 1; i++)
                {
                    Values[i].Set(Values[i + 1]);
                }
                Values_Count--;
            }
        }
        public bool Set_Values(ArrayList values)
        {
            bool result = true;

            if (values != null && values.Count >= Values_Count)
            {
                for (int i = 0; i < Values_Count; i++)
                {
                    Values[i].Value = values[i].ToString();
                }
            }
            else result = false;
            return result;
        }
        public bool Set_Values(string[] values)
        {
            bool result = true;

            if (values.Length == Values_Count)
            {
                for (int i = 0; i < Values_Count; i++)
                {
                    Values[i].Value = values[i];
                }
            }
            else result = false;
            return result;
        }
        public void Swap_Value(ref TCommand_Value in1, ref TCommand_Value in2)
        {
            TCommand_Value tmp = new TCommand_Value();

            in1.Copy(tmp);
            in2.Copy(in1);
            tmp.Copy(in2);
        }
        public void Move_Up(int no)
        {
            if (no >= 1 && no < Values_Count)
            {
                Swap_Value(ref Values[no], ref Values[no - 1]);
            }
        }
        public void Move_Dn(int no)
        {
            if (no >= 0 && no < Values_Count - 1)
            {
                Swap_Value(ref Values[no], ref Values[no + 1]);
            }
        }
    }
    public class TCommand_Value : TBase_Class
    {
        public emValue_Type Type;
        public string Name;
        public string Disp_String;
        public string Value;
        public string Default_Value;
        public ArrayList Combo_List = null;

        public TCommand_Value()
        {
            Set_Default();
        }
        public TCommand_Value(emValue_Type type, string name, string disp_string, string value, string default_value, ArrayList combo_list = null)
        {
            Set_Data(type, name, disp_string, value, default_value, combo_list);
        }
        public void Set_Default()
        {
            Type = emValue_Type.String;
            Name = "Default";
            Disp_String = "Disp_String";
            Value = "";
            Default_Value = "Default_Value";
            Combo_List = null;
        }
        override public TBase_Class New_Class()
        {
            return new TCommand_Value();
        }
        override public void Copy(TBase_Class sor_base, TBase_Class dis_base)
        {
            if (sor_base is TCommand_Value && dis_base is TCommand_Value)
            {
                TCommand_Value sor = (TCommand_Value)sor_base;
                TCommand_Value dis = (TCommand_Value)dis_base;

                dis.Type = sor.Type;
                dis.Name = sor.Name;
                dis.Disp_String = sor.Disp_String;
                dis.Value = sor.Value;
                dis.Default_Value = sor.Default_Value;
                //dis.In_Data = sor.In_Data;
                dis.Combo_List = sor.Combo_List;
            }
        }

        public override string ToString()
        {
            string result = "";

            result = string.Format("{0:s},{1:s},{2:s},{3:s},{4:s}",
                                   Value_Type.Type_To_String(Type), Name, Disp_String, Value, Default_Value);
            return result;
        }
        public void Set_Data(string str)
        {
            string[] list = null;

            Halcon_Tool.Break_String(str, ref list);
            if (list.Length == 5)
            {
                Type = Value_Type.String_To_Type(list[0]);
                Name = list[1];
                Disp_String = list[2];
                Value = list[3];
                Default_Value = list[4];
            }
        }
        public void Set_Data(emValue_Type type, string name, string disp_string, string value, string default_value, ArrayList combo_list = null)
        {
            Type = type;
            Name = name;
            Disp_String = disp_string;
            Value = value;
            Default_Value = default_value;
            Combo_List = combo_list;
        }
    }

}
